
led_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e34  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000090  08008088  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08008088  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b86  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a1  00000000  00000000  00035c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000393e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cc7  00000000  00000000  0003b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017870  00000000  00000000  000541df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8c8  00000000  00000000  0006ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d0  00000000  00000000  000fa368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007fb4 	.word	0x08007fb4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08007fb4 	.word	0x08007fb4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_GPIO_EXTI_Callback>:
volatile bool pressed = false;
volatile uint32_t counter = 0;
volatile uint32_t last_press;
static uint32_t last_tick;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != EXTERNAL_BUTTON_Pin) {
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d12d      	bne.n	8000548 <HAL_GPIO_EXTI_Callback+0x6c>
		return;
	}

	if (HAL_GetTick() - last_tick < DEBOUNCE_THRESHOLD) {
 80004ec:	f000 fdba 	bl	8001064 <HAL_GetTick>
 80004f0:	4602      	mov	r2, r0
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <HAL_GPIO_EXTI_Callback+0x78>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	2b31      	cmp	r3, #49	; 0x31
 80004fa:	d927      	bls.n	800054c <HAL_GPIO_EXTI_Callback+0x70>
		return;
	}

	if (pressed) {
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <HAL_GPIO_EXTI_Callback+0x7c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d005      	beq.n	8000512 <HAL_GPIO_EXTI_Callback+0x36>
		counter++;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_GPIO_EXTI_Callback+0x80>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <HAL_GPIO_EXTI_Callback+0x80>)
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	e004      	b.n	800051c <HAL_GPIO_EXTI_Callback+0x40>
	} else {
		last_press = HAL_GetTick();
 8000512:	f000 fda7 	bl	8001064 <HAL_GetTick>
 8000516:	4603      	mov	r3, r0
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <HAL_GPIO_EXTI_Callback+0x84>)
 800051a:	6013      	str	r3, [r2, #0]
	}

	pressed = !pressed;
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_GPIO_EXTI_Callback+0x7c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f083 0301 	eor.w	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_GPIO_EXTI_Callback+0x7c>)
 800053a:	701a      	strb	r2, [r3, #0]

	last_tick = HAL_GetTick();
 800053c:	f000 fd92 	bl	8001064 <HAL_GetTick>
 8000540:	4603      	mov	r3, r0
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_GPIO_EXTI_Callback+0x78>)
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e002      	b.n	800054e <HAL_GPIO_EXTI_Callback+0x72>
		return;
 8000548:	bf00      	nop
 800054a:	e000      	b.n	800054e <HAL_GPIO_EXTI_Callback+0x72>
		return;
 800054c:	bf00      	nop
}
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200001f4 	.word	0x200001f4
 8000558:	200001e8 	.word	0x200001e8
 800055c:	200001ec 	.word	0x200001ec
 8000560:	200001f0 	.word	0x200001f0

08000564 <get_count.0>:
  MX_I2S2_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */
  uint32_t get_count() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_NVIC_DisableIRQ(EXTERNAL_BUTTON_EXTI_IRQn);
 800056e:	2007      	movs	r0, #7
 8000570:	f000 fed1 	bl	8001316 <HAL_NVIC_DisableIRQ>
	uint32_t current_count = counter;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <get_count.0+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
	HAL_NVIC_EnableIRQ(EXTERNAL_BUTTON_EXTI_IRQn);
 800057a:	2007      	movs	r0, #7
 800057c:	f000 febd 	bl	80012fa <HAL_NVIC_EnableIRQ>
	return current_count;
 8000580:	68fb      	ldr	r3, [r7, #12]
  }
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001ec 	.word	0x200001ec

08000590 <main>:
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
int main(void)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800059c:	f000 fcfc 	bl	8000f98 <HAL_Init>
  SystemClock_Config();
 80005a0:	f000 f884 	bl	80006ac <SystemClock_Config>
  PeriphCommonClock_Config();
 80005a4:	f000 f8ea 	bl	800077c <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80005a8:	f000 f9ca 	bl	8000940 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ac:	f000 f906 	bl	80007bc <MX_I2C1_Init>
  MX_I2S2_Init();
 80005b0:	f000 f932 	bl	8000818 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005b4:	f000 f95e 	bl	8000874 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b8:	f000 f98c 	bl	80008d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005bc:	f007 f8b2 	bl	8007724 <MX_USB_HOST_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for (int i = 0; i < 16; i++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e00a      	b.n	80005dc <main+0x4c>
      GPIOE->ODR = 1 << i;
 80005c6:	2201      	movs	r2, #1
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <main+0xe4>)
 80005ce:	615a      	str	r2, [r3, #20]
      HAL_Delay(30);
 80005d0:	201e      	movs	r0, #30
 80005d2:	f000 fd53 	bl	800107c <HAL_Delay>
  for (int i = 0; i < 16; i++) {
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	ddf1      	ble.n	80005c6 <main+0x36>
  }
  for (int i = 15; i >= 0; i--) {
 80005e2:	230f      	movs	r3, #15
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	e00a      	b.n	80005fe <main+0x6e>
      GPIOE->ODR = 1 << i;
 80005e8:	2201      	movs	r2, #1
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	409a      	lsls	r2, r3
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <main+0xe4>)
 80005f0:	615a      	str	r2, [r3, #20]
      HAL_Delay(30);
 80005f2:	201e      	movs	r0, #30
 80005f4:	f000 fd42 	bl	800107c <HAL_Delay>
  for (int i = 15; i >= 0; i--) {
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	daf1      	bge.n	80005e8 <main+0x58>
  }

  while (1)
  {
	  GPIOE->ODR &= ~(0x3FF << 6);
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <main+0xe4>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <main+0xe4>)
 800060a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800060e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000612:	6153      	str	r3, [r2, #20]
	  GPIOE->ODR |= (get_count() & 0x3FF) << 6;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	469c      	mov	ip, r3
 8000618:	f7ff ffa4 	bl	8000564 <get_count.0>
 800061c:	4603      	mov	r3, r0
 800061e:	019a      	lsls	r2, r3, #6
 8000620:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000624:	4013      	ands	r3, r2
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <main+0xe4>)
 8000628:	6952      	ldr	r2, [r2, #20]
 800062a:	4912      	ldr	r1, [pc, #72]	; (8000674 <main+0xe4>)
 800062c:	4313      	orrs	r3, r2
 800062e:	614b      	str	r3, [r1, #20]

	  if (HAL_GetTick() - get_last_press() > HOLD_DELAY &&
 8000630:	f000 fd18 	bl	8001064 <HAL_GetTick>
 8000634:	4604      	mov	r4, r0
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	469c      	mov	ip, r3
 800063a:	f000 f821 	bl	8000680 <get_last_press.1>
 800063e:	4603      	mov	r3, r0
 8000640:	1ae3      	subs	r3, r4, r3
 8000642:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000646:	d90e      	bls.n	8000666 <main+0xd6>
			  HAL_GPIO_ReadPin(GPIOA, EXTERNAL_BUTTON_Pin))
 8000648:	2102      	movs	r1, #2
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0xe8>)
 800064c:	f001 f802 	bl	8001654 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
	  if (HAL_GetTick() - get_last_press() > HOLD_DELAY &&
 8000652:	2b00      	cmp	r3, #0
 8000654:	d007      	beq.n	8000666 <main+0xd6>
	  {
		  HAL_Delay(AUTO_COUNT_DELAY);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f000 fd10 	bl	800107c <HAL_Delay>
		  counter++;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <main+0xec>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <main+0xec>)
 8000664:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(UPDATE_DELAY);
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f000 fd08 	bl	800107c <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800066c:	f007 f880 	bl	8007770 <MX_USB_HOST_Process>
	  GPIOE->ODR &= ~(0x3FF << 6);
 8000670:	e7c8      	b.n	8000604 <main+0x74>
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40020000 	.word	0x40020000
 800067c:	200001ec 	.word	0x200001ec

08000680 <get_last_press.1>:
  uint32_t get_last_press() {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_NVIC_DisableIRQ(EXTERNAL_BUTTON_EXTI_IRQn);
 800068a:	2007      	movs	r0, #7
 800068c:	f000 fe43 	bl	8001316 <HAL_NVIC_DisableIRQ>
	uint32_t current_last_press = last_press;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <get_last_press.1+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
	HAL_NVIC_EnableIRQ(EXTERNAL_BUTTON_EXTI_IRQn);
 8000696:	2007      	movs	r0, #7
 8000698:	f000 fe2f 	bl	80012fa <HAL_NVIC_EnableIRQ>
	return current_last_press;
 800069c:	68fb      	ldr	r3, [r7, #12]
  }
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001f0 	.word	0x200001f0

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 fb74 	bl	8007da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <SystemClock_Config+0xc8>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <SystemClock_Config+0xc8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <SystemClock_Config+0xcc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <SystemClock_Config+0xcc>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <SystemClock_Config+0xcc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000720:	23c0      	movs	r3, #192	; 0xc0
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000724:	2304      	movs	r3, #4
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f003 f9c7 	bl	8003ac4 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800073c:	f000 f9ec 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f003 fc29 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000768:	f000 f9d6 	bl	8000b18 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	; 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000792:	2301      	movs	r3, #1
 8000794:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000796:	23c8      	movs	r3, #200	; 0xc8
 8000798:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800079a:	2305      	movs	r3, #5
 800079c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fe11 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007b0:	f000 f9b2 	bl	8000b18 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C1_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_I2C1_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_I2C1_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_I2C1_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_I2C1_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_I2C1_Init+0x50>)
 80007fa:	f002 fb7f 	bl	8002efc <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 f988 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac
 8000810:	40005400 	.word	0x40005400
 8000814:	000186a0 	.word	0x000186a0

08000818 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2S2_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_I2S2_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2S2_Init+0x50>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2S2_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_I2S2_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2S2_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2S2_Init+0x50>)
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <MX_I2S2_Init+0x58>)
 8000840:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S2_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2S2_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2S2_Init+0x50>)
 8000850:	2201      	movs	r2, #1
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_I2S2_Init+0x50>)
 8000856:	f002 fc95 	bl	8003184 <HAL_I2S_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f95a 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000100 	.word	0x20000100
 800086c:	40003800 	.word	0x40003800
 8000870:	00017700 	.word	0x00017700

08000874 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2S3_Init+0x54>)
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MX_I2S3_Init+0x58>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2S3_Init+0x54>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2S3_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_I2S3_Init+0x54>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_I2S3_Init+0x54>)
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <MX_I2S3_Init+0x5c>)
 800089e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008b4:	f002 fc66 	bl	8003184 <HAL_I2S_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008be:	f000 f92b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000148 	.word	0x20000148
 80008cc:	40003c00 	.word	0x40003c00
 80008d0:	00017700 	.word	0x00017700

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_SPI1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_SPI1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_SPI1_Init+0x64>)
 8000920:	220a      	movs	r2, #10
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_SPI1_Init+0x64>)
 8000926:	f003 fea1 	bl	800466c <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f8f2 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000190 	.word	0x20000190
 800093c:	40013000 	.word	0x40013000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4b6a      	ldr	r3, [pc, #424]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a69      	ldr	r2, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b67      	ldr	r3, [pc, #412]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4b63      	ldr	r3, [pc, #396]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a62      	ldr	r2, [pc, #392]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a5b      	ldr	r2, [pc, #364]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b59      	ldr	r3, [pc, #356]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a54      	ldr	r2, [pc, #336]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <MX_GPIO_Init+0x1c4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80009fe:	2200      	movs	r2, #0
 8000a00:	f64f 71c8 	movw	r1, #65480	; 0xffc8
 8000a04:	4840      	ldr	r0, [pc, #256]	; (8000b08 <MX_GPIO_Init+0x1c8>)
 8000a06:	f000 fe3d 	bl	8001684 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	483f      	ldr	r0, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x1cc>)
 8000a10:	f000 fe38 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a14:	2200      	movs	r2, #0
 8000a16:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a1a:	483d      	ldr	r0, [pc, #244]	; (8000b10 <MX_GPIO_Init+0x1d0>)
 8000a1c:	f000 fe32 	bl	8001684 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4835      	ldr	r0, [pc, #212]	; (8000b08 <MX_GPIO_Init+0x1c8>)
 8000a34:	f000 fc8a 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE6 PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000a38:	f64f 73c8 	movw	r3, #65480	; 0xffc8
 8000a3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482d      	ldr	r0, [pc, #180]	; (8000b08 <MX_GPIO_Init+0x1c8>)
 8000a52:	f000 fc7b 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000a56:	2330      	movs	r3, #48	; 0x30
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4827      	ldr	r0, [pc, #156]	; (8000b08 <MX_GPIO_Init+0x1c8>)
 8000a6c:	f000 fc6e 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4821      	ldr	r0, [pc, #132]	; (8000b0c <MX_GPIO_Init+0x1cc>)
 8000a88:	f000 fc60 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 EXTERNAL_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|EXTERNAL_BUTTON_Pin;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x1d4>)
 8000aa2:	f000 fc53 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aaa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4814      	ldr	r0, [pc, #80]	; (8000b10 <MX_GPIO_Init+0x1d0>)
 8000ac0:	f000 fc44 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <MX_GPIO_Init+0x1d0>)
 8000ad8:	f000 fc38 	bl	800134c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2006      	movs	r0, #6
 8000ae2:	f000 fbee 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f000 fc07 	bl	80012fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2007      	movs	r0, #7
 8000af2:	f000 fbe6 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f000 fbff 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40020000 	.word	0x40020000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b62:	2007      	movs	r0, #7
 8000b64:	f000 fba2 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bb2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <HAL_I2C_MspInit+0x8c>)
 8000bd0:	f000 fbbc 	bl	800134c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400

08000c04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	; 0x38
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a59      	ldr	r2, [pc, #356]	; (8000d88 <HAL_I2S_MspInit+0x184>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d15b      	bne.n	8000cde <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a57      	ldr	r2, [pc, #348]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	623b      	str	r3, [r7, #32]
 8000c40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	483e      	ldr	r0, [pc, #248]	; (8000d90 <HAL_I2S_MspInit+0x18c>)
 8000c96:	f000 fb59 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000caa:	2305      	movs	r3, #5
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4836      	ldr	r0, [pc, #216]	; (8000d90 <HAL_I2S_MspInit+0x18c>)
 8000cb6:	f000 fb49 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	482f      	ldr	r0, [pc, #188]	; (8000d94 <HAL_I2S_MspInit+0x190>)
 8000cd8:	f000 fb38 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cdc:	e04f      	b.n	8000d7e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <HAL_I2S_MspInit+0x194>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d14a      	bne.n	8000d7e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_I2S_MspInit+0x188>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <HAL_I2S_MspInit+0x198>)
 8000d58:	f000 faf8 	bl	800134c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d5c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_I2S_MspInit+0x18c>)
 8000d7a:	f000 fae7 	bl	800134c <HAL_GPIO_Init>
}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40003800 	.word	0x40003800
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020400 	.word	0x40020400
 8000d98:	40003c00 	.word	0x40003c00
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_SPI_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12b      	bne.n	8000e1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_SPI_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dfa:	23e0      	movs	r3, #224	; 0xe0
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_SPI_MspInit+0x8c>)
 8000e16:	f000 fa99 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40013000 	.word	0x40013000
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f8de 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fc15 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTERNAL_BUTTON_Pin);
 8000e96:	2002      	movs	r0, #2
 8000e98:	f000 fc0e 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <OTG_FS_IRQHandler+0x10>)
 8000ea6:	f000 fe89 	bl	8001bbc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200005dc 	.word	0x200005dc

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f006 ff26 	bl	8007d34 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20020000 	.word	0x20020000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	200001f8 	.word	0x200001f8
 8000f1c:	200008f0 	.word	0x200008f0

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f006 fee5 	bl	8007d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb0b 	bl	8000590 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f88:	08007ff8 	.word	0x08007ff8
  ldr r2, =_sbss
 8000f8c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f90:	200008f0 	.word	0x200008f0

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f973 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fdaa 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f999 	bl	8001332 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001018:	f000 f953 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000
 8001034:	20000008 	.word	0x20000008
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	200001fc 	.word	0x200001fc

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200001fc 	.word	0x200001fc

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db12      	blt.n	800119c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	490a      	ldr	r1, [pc, #40]	; (80011a8 <__NVIC_DisableIRQ+0x44>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	3320      	adds	r3, #32
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001190:	f3bf 8f4f 	dsb	sy
}
 8001194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001196:	f3bf 8f6f 	isb	sy
}
 800119a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff05 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff1a 	bl	800110c <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff0d 	bl	8001128 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff1d 	bl	8001164 <__NVIC_DisableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff94 	bl	8001268 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e159      	b.n	800161c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8148 	bne.w	8001616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d005      	beq.n	800139e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	2b02      	cmp	r3, #2
 800139c:	d130      	bne.n	8001400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 0201 	and.w	r2, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b03      	cmp	r3, #3
 800140a:	d017      	beq.n	800143c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d123      	bne.n	8001490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a2 	beq.w	8001616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b54      	ldr	r3, [pc, #336]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_GPIO_Init+0x2f0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d019      	beq.n	800154e <HAL_GPIO_Init+0x202>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_GPIO_Init+0x2f4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0x1fe>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a47      	ldr	r2, [pc, #284]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00d      	beq.n	8001546 <HAL_GPIO_Init+0x1fa>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a46      	ldr	r2, [pc, #280]	; (8001648 <HAL_GPIO_Init+0x2fc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_GPIO_Init+0x1f6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a45      	ldr	r2, [pc, #276]	; (800164c <HAL_GPIO_Init+0x300>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_GPIO_Init+0x1f2>
 800153a:	2304      	movs	r3, #4
 800153c:	e008      	b.n	8001550 <HAL_GPIO_Init+0x204>
 800153e:	2307      	movs	r3, #7
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x204>
 8001542:	2303      	movs	r3, #3
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x204>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x204>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x204>
 800154e:	2300      	movs	r3, #0
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001560:	4935      	ldr	r1, [pc, #212]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001592:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_GPIO_Init+0x304>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3301      	adds	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	f67f aea2 	bls.w	8001368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40013800 	.word	0x40013800
 800163c:	40020000 	.word	0x40020000
 8001640:	40020400 	.word	0x40020400
 8001644:	40020800 	.word	0x40020800
 8001648:	40020c00 	.word	0x40020c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40013c00 	.word	0x40013c00

08001654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016a0:	e003      	b.n	80016aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff00 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40013c00 	.word	0x40013c00

080016e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b08f      	sub	sp, #60	; 0x3c
 80016ec:	af0a      	add	r7, sp, #40	; 0x28
 80016ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e054      	b.n	80017a4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d106      	bne.n	800171a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f006 f863 	bl	80077e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 f892 	bl	8004862 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	687e      	ldr	r6, [r7, #4]
 8001746:	466d      	mov	r5, sp
 8001748:	f106 0410 	add.w	r4, r6, #16
 800174c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001758:	e885 0003 	stmia.w	r5, {r0, r1}
 800175c:	1d33      	adds	r3, r6, #4
 800175e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f003 f80c 	bl	800477e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f889 	bl	8004884 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	687e      	ldr	r6, [r7, #4]
 800177a:	466d      	mov	r5, sp
 800177c:	f106 0410 	add.w	r4, r6, #16
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001790:	1d33      	adds	r3, r6, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f003 fa11 	bl	8004bbc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	4608      	mov	r0, r1
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	70fb      	strb	r3, [r7, #3]
 80017be:	460b      	mov	r3, r1
 80017c0:	70bb      	strb	r3, [r7, #2]
 80017c2:	4613      	mov	r3, r2
 80017c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_HCD_HC_Init+0x28>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e076      	b.n	80018c2 <HAL_HCD_HC_Init+0x116>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	333d      	adds	r3, #61	; 0x3d
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3338      	adds	r3, #56	; 0x38
 80017fc:	787a      	ldrb	r2, [r7, #1]
 80017fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3340      	adds	r3, #64	; 0x40
 800180e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001810:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	212c      	movs	r1, #44	; 0x2c
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3339      	adds	r3, #57	; 0x39
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	333f      	adds	r3, #63	; 0x3f
 8001832:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001836:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	78ba      	ldrb	r2, [r7, #2]
 800183c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001840:	b2d0      	uxtb	r0, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	333a      	adds	r3, #58	; 0x3a
 800184e:	4602      	mov	r2, r0
 8001850:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001852:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da09      	bge.n	800186e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	333b      	adds	r3, #59	; 0x3b
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e008      	b.n	8001880 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	333b      	adds	r3, #59	; 0x3b
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	333c      	adds	r3, #60	; 0x3c
 800188e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001892:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	787c      	ldrb	r4, [r7, #1]
 800189a:	78ba      	ldrb	r2, [r7, #2]
 800189c:	78f9      	ldrb	r1, [r7, #3]
 800189e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	4623      	mov	r3, r4
 80018b0:	f003 fb0a 	bl	8004ec8 <USB_HC_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}

080018ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_HCD_HC_Halt+0x1e>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e00f      	b.n	8001908 <HAL_HCD_HC_Halt+0x3e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fd5a 	bl	80053b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	70fb      	strb	r3, [r7, #3]
 8001922:	460b      	mov	r3, r1
 8001924:	70bb      	strb	r3, [r7, #2]
 8001926:	4613      	mov	r3, r2
 8001928:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333b      	adds	r3, #59	; 0x3b
 8001938:	78ba      	ldrb	r2, [r7, #2]
 800193a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	333f      	adds	r3, #63	; 0x3f
 800194a:	787a      	ldrb	r2, [r7, #1]
 800194c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800194e:	7c3b      	ldrb	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d112      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2203      	movs	r2, #3
 8001964:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	333d      	adds	r3, #61	; 0x3d
 8001974:	7f3a      	ldrb	r2, [r7, #28]
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e008      	b.n	800198c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2202      	movs	r2, #2
 800198a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b03      	cmp	r3, #3
 8001990:	f200 80c6 	bhi.w	8001b20 <HAL_HCD_HC_SubmitRequest+0x210>
 8001994:	a201      	add	r2, pc, #4	; (adr r2, 800199c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199a:	bf00      	nop
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	08001b0d 	.word	0x08001b0d
 80019a4:	08001a11 	.word	0x08001a11
 80019a8:	08001a8f 	.word	0x08001a8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019ac:	7c3b      	ldrb	r3, [r7, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 80b8 	bne.w	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>
 80019b4:	78bb      	ldrb	r3, [r7, #2]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 80b4 	bne.w	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019bc:	8b3b      	ldrh	r3, [r7, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d108      	bne.n	80019d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3355      	adds	r3, #85	; 0x55
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3355      	adds	r3, #85	; 0x55
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3342      	adds	r3, #66	; 0x42
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fa:	e093      	b.n	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3342      	adds	r3, #66	; 0x42
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
      break;
 8001a0e:	e089      	b.n	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a10:	78bb      	ldrb	r3, [r7, #2]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11d      	bne.n	8001a52 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3355      	adds	r3, #85	; 0x55
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3342      	adds	r3, #66	; 0x42
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a3c:	e073      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3342      	adds	r3, #66	; 0x42
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
      break;
 8001a50:	e069      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3354      	adds	r3, #84	; 0x54
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3342      	adds	r3, #66	; 0x42
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
      break;
 8001a78:	e055      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3342      	adds	r3, #66	; 0x42
 8001a88:	2202      	movs	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
      break;
 8001a8c:	e04b      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a8e:	78bb      	ldrb	r3, [r7, #2]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11d      	bne.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3355      	adds	r3, #85	; 0x55
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3342      	adds	r3, #66	; 0x42
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aba:	e034      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3342      	adds	r3, #66	; 0x42
 8001aca:	2202      	movs	r2, #2
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e02a      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3354      	adds	r3, #84	; 0x54
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3342      	adds	r3, #66	; 0x42
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
      break;
 8001af6:	e016      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3342      	adds	r3, #66	; 0x42
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
      break;
 8001b0a:	e00c      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3342      	adds	r3, #66	; 0x42
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b24:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3344      	adds	r3, #68	; 0x44
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	8b3a      	ldrh	r2, [r7, #24]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	202c      	movs	r0, #44	; 0x2c
 8001b40:	fb00 f303 	mul.w	r3, r0, r3
 8001b44:	440b      	add	r3, r1
 8001b46:	334c      	adds	r3, #76	; 0x4c
 8001b48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3360      	adds	r3, #96	; 0x60
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3350      	adds	r3, #80	; 0x50
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3339      	adds	r3, #57	; 0x39
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3361      	adds	r3, #97	; 0x61
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	222c      	movs	r2, #44	; 0x2c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	3338      	adds	r3, #56	; 0x38
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	18d1      	adds	r1, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	f003 faae 	bl	800510c <USB_HC_StartXfer>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 ffaf 	bl	8004b36 <USB_GetMode>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 80f6 	bne.w	8001dcc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 ff93 	bl	8004b10 <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80ec 	beq.w	8001dca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 ff8a 	bl	8004b10 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c06:	d104      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 ff7a 	bl	8004b10 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c26:	d104      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ff6a 	bl	8004b10 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c46:	d104      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 ff5a 	bl	8004b10 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d103      	bne.n	8001c6e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 ff4c 	bl	8004b10 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c82:	d11c      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c8c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	6938      	ldr	r0, [r7, #16]
 8001ca2:	f002 fe3b 	bl	800491c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ca6:	6938      	ldr	r0, [r7, #16]
 8001ca8:	f002 fe6c 	bl	8004984 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f842 	bl	8004d3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f005 fe0f 	bl	80078dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 ff24 	bl	8004b10 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd2:	d102      	bne.n	8001cda <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f001 f89e 	bl	8002e16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 ff16 	bl	8004b10 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d106      	bne.n	8001cfc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f005 fdd8 	bl	80078a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 ff05 	bl	8004b10 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d101      	bne.n	8001d14 <HAL_HCD_IRQHandler+0x158>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_HCD_IRQHandler+0x15a>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 ffa1 	bl	8002c72 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0210 	orr.w	r2, r2, #16
 8001d3e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fee3 	bl	8004b10 <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d54:	d13a      	bne.n	8001dcc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fb18 	bl	8005390 <USB_HC_ReadInterrupt>
 8001d60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e025      	b.n	8001db4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d92:	d106      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ab 	bl	8001ef6 <HCD_HC_IN_IRQHandler>
 8001da0:	e005      	b.n	8001dae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fbf9 	bl	80025a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3d4      	bcc.n	8001d68 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	615a      	str	r2, [r3, #20]
 8001dc8:	e000      	b.n	8001dcc <HAL_HCD_IRQHandler+0x210>
      return;
 8001dca:	bf00      	nop
    }
  }
}
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_HCD_Start+0x16>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e013      	b.n	8001e10 <HAL_HCD_Start+0x3e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f804 	bl	8004e04 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fd1d 	bl	8004840 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_HCD_Stop+0x16>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e00d      	b.n	8001e4a <HAL_HCD_Stop+0x32>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 fbf2 	bl	8005624 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 ffa6 	bl	8004db0 <USB_ResetPort>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3360      	adds	r3, #96	; 0x60
 8001e88:	781b      	ldrb	r3, [r3, #0]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3350      	adds	r3, #80	; 0x50
 8001eb0:	681b      	ldr	r3, [r3, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 ffea 	bl	8004ea4 <USB_GetCurrentFrame>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 ffc5 	bl	8004e76 <USB_GetHostSpeed>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d11a      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2304      	movs	r3, #4
 8001f36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3361      	adds	r3, #97	; 0x61
 8001f46:	2206      	movs	r2, #6
 8001f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fa2c 	bl	80053b2 <USB_HC_Halt>
 8001f5a:	e0af      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d11b      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3361      	adds	r3, #97	; 0x61
 8001f96:	2207      	movs	r2, #7
 8001f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fa04 	bl	80053b2 <USB_HC_Halt>
 8001faa:	e087      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d109      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]
 8001fd4:	e072      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11a      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	2205      	movs	r2, #5
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f9c9 	bl	80053b2 <USB_HC_Halt>
 8002020:	e04c      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d11b      	bne.n	8002072 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3361      	adds	r3, #97	; 0x61
 800205c:	2208      	movs	r2, #8
 800205e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f9a1 	bl	80053b2 <USB_HC_Halt>
 8002070:	e024      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d119      	bne.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3361      	adds	r3, #97	; 0x61
 80020a8:	2206      	movs	r2, #6
 80020aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 f97b 	bl	80053b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d2:	d112      	bne.n	80020fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f967 	bl	80053b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020f8:	e24e      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	f040 80df 	bne.w	80022d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d019      	beq.n	800214e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3348      	adds	r3, #72	; 0x48
 8002128:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0159      	lsls	r1, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	440b      	add	r3, r1
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	202c      	movs	r0, #44	; 0x2c
 8002144:	fb00 f303 	mul.w	r3, r0, r3
 8002148:	440b      	add	r3, r1
 800214a:	3350      	adds	r3, #80	; 0x50
 800214c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3361      	adds	r3, #97	; 0x61
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	2301      	movs	r3, #1
 8002182:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	333f      	adds	r3, #63	; 0x3f
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	333f      	adds	r3, #63	; 0x3f
 80021a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d111      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 f8fb 	bl	80053b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2310      	movs	r3, #16
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	e03a      	b.n	8002246 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	333f      	adds	r3, #63	; 0x3f
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d009      	beq.n	80021f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	333f      	adds	r3, #63	; 0x3f
 80021f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d126      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	0151      	lsls	r1, r2, #5
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	440a      	add	r2, r1
 800220e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002216:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	202c      	movs	r0, #44	; 0x2c
 8002234:	fb00 f303 	mul.w	r3, r0, r3
 8002238:	4413      	add	r3, r2
 800223a:	3360      	adds	r3, #96	; 0x60
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f005 fb59 	bl	80078f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d12b      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3348      	adds	r3, #72	; 0x48
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	440a      	add	r2, r1
 800226a:	3240      	adds	r2, #64	; 0x40
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 818e 	beq.w	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3354      	adds	r3, #84	; 0x54
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3354      	adds	r3, #84	; 0x54
 80022a0:	4602      	mov	r2, r0
 80022a2:	701a      	strb	r2, [r3, #0]
}
 80022a4:	e178      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3354      	adds	r3, #84	; 0x54
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3354      	adds	r3, #84	; 0x54
 80022ca:	4602      	mov	r2, r0
 80022cc:	701a      	strb	r2, [r3, #0]
}
 80022ce:	e163      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	f040 80f6 	bne.w	80024d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3361      	adds	r3, #97	; 0x61
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d109      	bne.n	8002310 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3360      	adds	r3, #96	; 0x60
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e0c9      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3361      	adds	r3, #97	; 0x61
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d109      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3360      	adds	r3, #96	; 0x60
 8002332:	2205      	movs	r2, #5
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e0b5      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3361      	adds	r3, #97	; 0x61
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b06      	cmp	r3, #6
 800234a:	d009      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3361      	adds	r3, #97	; 0x61
 800235a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800235c:	2b08      	cmp	r3, #8
 800235e:	d150      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	335c      	adds	r3, #92	; 0x5c
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	202c      	movs	r0, #44	; 0x2c
 8002378:	fb00 f303 	mul.w	r3, r0, r3
 800237c:	440b      	add	r3, r1
 800237e:	335c      	adds	r3, #92	; 0x5c
 8002380:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	335c      	adds	r3, #92	; 0x5c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d912      	bls.n	80023bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	335c      	adds	r3, #92	; 0x5c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	2204      	movs	r2, #4
 80023b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023ba:	e073      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002400:	e050      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3361      	adds	r3, #97	; 0x61
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d122      	bne.n	800245c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3360      	adds	r3, #96	; 0x60
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800243e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002446:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e023      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3361      	adds	r3, #97	; 0x61
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b07      	cmp	r3, #7
 800246e:	d119      	bne.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	335c      	adds	r3, #92	; 0x5c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	202c      	movs	r0, #44	; 0x2c
 8002488:	fb00 f303 	mul.w	r3, r0, r3
 800248c:	440b      	add	r3, r1
 800248e:	335c      	adds	r3, #92	; 0x5c
 8002490:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	2204      	movs	r2, #4
 80024a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	461a      	mov	r2, r3
 80024b2:	2302      	movs	r3, #2
 80024b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	202c      	movs	r0, #44	; 0x2c
 80024c0:	fb00 f303 	mul.w	r3, r0, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3360      	adds	r3, #96	; 0x60
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f005 fa13 	bl	80078f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024d2:	e061      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d156      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d111      	bne.n	8002522 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f002 ff49 	bl	80053b2 <USB_HC_Halt>
 8002520:	e031      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	333f      	adds	r3, #63	; 0x3f
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	333f      	adds	r3, #63	; 0x3f
 8002544:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002546:	2b02      	cmp	r3, #2
 8002548:	d11d      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	335c      	adds	r3, #92	; 0x5c
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d110      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f002 ff16 	bl	80053b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	2310      	movs	r3, #16
 8002596:	6093      	str	r3, [r2, #8]
}
 8002598:	bf00      	nop
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d11a      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2304      	movs	r3, #4
 80025e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	2206      	movs	r2, #6
 80025f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fed7 	bl	80053b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002604:	e331      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b20      	cmp	r3, #32
 800261a:	d12e      	bne.n	800267a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2320      	movs	r3, #32
 800262c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	333d      	adds	r3, #61	; 0x3d
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	f040 8313 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	333d      	adds	r3, #61	; 0x3d
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f002 fe9d 	bl	80053b2 <USB_HC_Halt>
}
 8002678:	e2f7      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002690:	d112      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	461a      	mov	r2, r3
 80026a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fe7e 	bl	80053b2 <USB_HC_Halt>
}
 80026b6:	e2d8      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d140      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d111      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333d      	adds	r3, #61	; 0x3d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	2301      	movs	r3, #1
 800272a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fe32 	bl	80053b2 <USB_HC_Halt>
}
 800274e:	e28c      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d12c      	bne.n	80027c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2204      	movs	r2, #4
 8002776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	333d      	adds	r3, #61	; 0x3d
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fe03 	bl	80053b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	6093      	str	r3, [r2, #8]
}
 80027be:	e254      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11a      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	2308      	movs	r3, #8
 80027e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3361      	adds	r3, #97	; 0x61
 80027f6:	2205      	movs	r2, #5
 80027f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fdd4 	bl	80053b2 <USB_HC_Halt>
}
 800280a:	e22e      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d140      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	335c      	adds	r3, #92	; 0x5c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	333d      	adds	r3, #61	; 0x3d
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d112      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	333c      	adds	r3, #60	; 0x3c
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	333d      	adds	r3, #61	; 0x3d
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fd91 	bl	80053b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2310      	movs	r3, #16
 80028a0:	6093      	str	r3, [r2, #8]
}
 80028a2:	e1e2      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d164      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d111      	bne.n	80028e6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3361      	adds	r3, #97	; 0x61
 80028d0:	2206      	movs	r2, #6
 80028d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fd67 	bl	80053b2 <USB_HC_Halt>
 80028e4:	e044      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	335c      	adds	r3, #92	; 0x5c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	202c      	movs	r0, #44	; 0x2c
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	440b      	add	r3, r1
 8002904:	335c      	adds	r3, #92	; 0x5c
 8002906:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	335c      	adds	r3, #92	; 0x5c
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d920      	bls.n	800295e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	335c      	adds	r3, #92	; 0x5c
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3360      	adds	r3, #96	; 0x60
 800293c:	2204      	movs	r2, #4
 800293e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	b2d9      	uxtb	r1, r3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	4413      	add	r3, r2
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f004 ffce 	bl	80078f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800295c:	e008      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	6093      	str	r3, [r2, #8]
}
 8002982:	e172      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	d11b      	bne.n	80029d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	2208      	movs	r2, #8
 80029ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fcfa 	bl	80053b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	6093      	str	r3, [r2, #8]
}
 80029d2:	e14a      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 813f 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d17d      	bne.n	8002afc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	333f      	adds	r3, #63	; 0x3f
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d00a      	beq.n	8002a3c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333f      	adds	r3, #63	; 0x3f
 8002a34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	f040 8100 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d113      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3355      	adds	r3, #85	; 0x55
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2d8      	uxtb	r0, r3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3355      	adds	r3, #85	; 0x55
 8002a68:	4602      	mov	r2, r0
 8002a6a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 80e3 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	334c      	adds	r3, #76	; 0x4c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80d8 	beq.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	334c      	adds	r3, #76	; 0x4c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	202c      	movs	r0, #44	; 0x2c
 8002aa2:	fb00 f202 	mul.w	r2, r0, r2
 8002aa6:	440a      	add	r2, r1
 8002aa8:	3240      	adds	r2, #64	; 0x40
 8002aaa:	8812      	ldrh	r2, [r2, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	202c      	movs	r0, #44	; 0x2c
 8002ab6:	fb00 f202 	mul.w	r2, r0, r2
 8002aba:	440a      	add	r2, r1
 8002abc:	3240      	adds	r2, #64	; 0x40
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b5 	beq.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3355      	adds	r3, #85	; 0x55
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2d8      	uxtb	r0, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3355      	adds	r3, #85	; 0x55
 8002af6:	4602      	mov	r2, r0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e09f      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3361      	adds	r3, #97	; 0x61
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d109      	bne.n	8002b24 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3360      	adds	r3, #96	; 0x60
 8002b1e:	2202      	movs	r2, #2
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e08b      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3361      	adds	r3, #97	; 0x61
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d109      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3360      	adds	r3, #96	; 0x60
 8002b46:	2202      	movs	r2, #2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e077      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	; 0x61
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d109      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3360      	adds	r3, #96	; 0x60
 8002b6e:	2205      	movs	r2, #5
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e063      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3361      	adds	r3, #97	; 0x61
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d009      	beq.n	8002b9c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d14f      	bne.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	335c      	adds	r3, #92	; 0x5c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	202c      	movs	r0, #44	; 0x2c
 8002bb4:	fb00 f303 	mul.w	r3, r0, r3
 8002bb8:	440b      	add	r3, r1
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d912      	bls.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	335c      	adds	r3, #92	; 0x5c
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3360      	adds	r3, #96	; 0x60
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e021      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c20:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c28:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	202c      	movs	r0, #44	; 0x2c
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f004 fe47 	bl	80078f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	; 0x28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	0c5b      	lsrs	r3, r3, #17
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d004      	beq.n	8002cb8 <HCD_RXQLVL_IRQHandler+0x46>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	f000 80a9 	beq.w	8002e08 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cb6:	e0aa      	b.n	8002e0e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a6 	beq.w	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3344      	adds	r3, #68	; 0x44
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 809b 	beq.w	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3350      	adds	r3, #80	; 0x50
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	441a      	add	r2, r3
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	202c      	movs	r0, #44	; 0x2c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334c      	adds	r3, #76	; 0x4c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d87a      	bhi.n	8002df4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3344      	adds	r3, #68	; 0x44
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	b292      	uxth	r2, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f001 fea2 	bl	8004a60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3344      	adds	r3, #68	; 0x44
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	441a      	add	r2, r3
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	202c      	movs	r0, #44	; 0x2c
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3344      	adds	r3, #68	; 0x44
 8002d3e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3350      	adds	r3, #80	; 0x50
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	441a      	add	r2, r3
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	202c      	movs	r0, #44	; 0x2c
 8002d5a:	fb00 f303 	mul.w	r3, r0, r3
 8002d5e:	440b      	add	r3, r1
 8002d60:	3350      	adds	r3, #80	; 0x50
 8002d62:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	0cdb      	lsrs	r3, r3, #19
 8002d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3340      	adds	r3, #64	; 0x40
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d13c      	bne.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d039      	beq.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3354      	adds	r3, #84	; 0x54
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2d8      	uxtb	r0, r3
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3354      	adds	r3, #84	; 0x54
 8002dee:	4602      	mov	r2, r0
 8002df0:	701a      	strb	r2, [r3, #0]
      break;
 8002df2:	e00b      	b.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	2204      	movs	r2, #4
 8002e04:	701a      	strb	r2, [r3, #0]
      break;
 8002e06:	e001      	b.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e0c:	bf00      	nop
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d10b      	bne.n	8002e66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d102      	bne.n	8002e5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f004 fd31 	bl	80078c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d132      	bne.n	8002ed6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d126      	bne.n	8002ed0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d113      	bne.n	8002eb2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e94:	d106      	bne.n	8002ea4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 ff4d 	bl	8004d3c <USB_InitFSLSPClkSel>
 8002ea2:	e011      	b.n	8002ec8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 ff46 	bl	8004d3c <USB_InitFSLSPClkSel>
 8002eb0:	e00a      	b.n	8002ec8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d106      	bne.n	8002ec8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ec6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f004 fd23 	bl	8007914 <HAL_HCD_PortEnabled_Callback>
 8002ece:	e002      	b.n	8002ed6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f004 fd2d 	bl	8007930 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d103      	bne.n	8002ee8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e12b      	b.n	8003166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fe26 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f60:	f001 fa20 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8002f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a81      	ldr	r2, [pc, #516]	; (8003170 <HAL_I2C_Init+0x274>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d807      	bhi.n	8002f80 <HAL_I2C_Init+0x84>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_I2C_Init+0x278>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e006      	b.n	8002f8e <HAL_I2C_Init+0x92>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <HAL_I2C_Init+0x27c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e7      	b.n	8003166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a78      	ldr	r2, [pc, #480]	; (800317c <HAL_I2C_Init+0x280>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_I2C_Init+0x274>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_I2C_Init+0xd4>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e009      	b.n	8002fe4 <HAL_I2C_Init+0xe8>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a69      	ldr	r2, [pc, #420]	; (8003180 <HAL_I2C_Init+0x284>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	495c      	ldr	r1, [pc, #368]	; (8003170 <HAL_I2C_Init+0x274>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d819      	bhi.n	8003038 <HAL_I2C_Init+0x13c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e59      	subs	r1, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003012:	1c59      	adds	r1, r3, #1
 8003014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003018:	400b      	ands	r3, r1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_I2C_Init+0x138>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e59      	subs	r1, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fbb1 f3f3 	udiv	r3, r1, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	e051      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003034:	2304      	movs	r3, #4
 8003036:	e04f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_I2C_Init+0x168>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e012      	b.n	800308a <HAL_I2C_Init+0x18e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x196>
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_I2C_Init+0x1bc>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e58      	subs	r0, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	440b      	add	r3, r1
 80030a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b6:	e00f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	0099      	lsls	r1, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6911      	ldr	r1, [r2, #16]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	000186a0 	.word	0x000186a0
 8003174:	001e847f 	.word	0x001e847f
 8003178:	003d08ff 	.word	0x003d08ff
 800317c:	431bde83 	.word	0x431bde83
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e128      	b.n	80033e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a90      	ldr	r2, [pc, #576]	; (80033f0 <HAL_I2S_Init+0x26c>)
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fd27 	bl	8000c04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2202      	movs	r2, #2
 80031d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d060      	beq.n	80032a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ea:	2310      	movs	r3, #16
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e001      	b.n	80031f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d802      	bhi.n	8003202 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003202:	2001      	movs	r0, #1
 8003204:	f001 f9d2 	bl	80045ac <HAL_RCCEx_GetPeriphCLKFreq>
 8003208:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003212:	d125      	bne.n	8003260 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	fbb2 f2f3 	udiv	r2, r2, r3
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	3305      	adds	r3, #5
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e01f      	b.n	800327e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	fbb2 f2f3 	udiv	r2, r2, r3
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	3305      	adds	r3, #5
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e00e      	b.n	800327e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	3305      	adds	r3, #5
 800327c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_I2S_Init+0x270>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	08db      	lsrs	r3, r3, #3
 8003288:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d902      	bls.n	80032b8 <HAL_I2S_Init+0x134>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2bff      	cmp	r3, #255	; 0xff
 80032b6:	d907      	bls.n	80032c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e08f      	b.n	80033e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	ea42 0103 	orr.w	r1, r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	430a      	orrs	r2, r1
 80032da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e6:	f023 030f 	bic.w	r3, r3, #15
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6851      	ldr	r1, [r2, #4]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6892      	ldr	r2, [r2, #8]
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6992      	ldr	r2, [r2, #24]
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d161      	bne.n	80033d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_I2S_Init+0x274>)
 8003318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_I2S_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_I2S_Init+0x1a4>
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_I2S_Init+0x27c>)
 8003326:	e001      	b.n	800332c <HAL_I2S_Init+0x1a8>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	4932      	ldr	r1, [pc, #200]	; (80033fc <HAL_I2S_Init+0x278>)
 8003334:	428a      	cmp	r2, r1
 8003336:	d101      	bne.n	800333c <HAL_I2S_Init+0x1b8>
 8003338:	4a31      	ldr	r2, [pc, #196]	; (8003400 <HAL_I2S_Init+0x27c>)
 800333a:	e001      	b.n	8003340 <HAL_I2S_Init+0x1bc>
 800333c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003340:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_I2S_Init+0x278>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_I2S_Init+0x1d4>
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_I2S_Init+0x27c>)
 8003356:	e001      	b.n	800335c <HAL_I2S_Init+0x1d8>
 8003358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335c:	2202      	movs	r2, #2
 800335e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a25      	ldr	r2, [pc, #148]	; (80033fc <HAL_I2S_Init+0x278>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_I2S_Init+0x1ea>
 800336a:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_I2S_Init+0x27c>)
 800336c:	e001      	b.n	8003372 <HAL_I2S_Init+0x1ee>
 800336e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d003      	beq.n	8003388 <HAL_I2S_Init+0x204>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	e001      	b.n	8003394 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800339e:	4313      	orrs	r3, r2
 80033a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <HAL_I2S_Init+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_I2S_Init+0x24c>
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_I2S_Init+0x27c>)
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x250>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	897a      	ldrh	r2, [r7, #10]
 80033d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	080034fb 	.word	0x080034fb
 80033f4:	cccccccd 	.word	0xcccccccd
 80033f8:	08003611 	.word	0x08003611
 80033fc:	40003800 	.word	0x40003800
 8003400:	40003400 	.word	0x40003400

08003404 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003484:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffb8 	bl	8003404 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	b292      	uxth	r2, r2
 80034b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	1c9a      	adds	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff93 	bl	8003418 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b04      	cmp	r3, #4
 8003514:	d13a      	bne.n	800358c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d109      	bne.n	8003534 <I2S_IRQHandler+0x3a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d102      	bne.n	8003534 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffb4 	bl	800349c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d126      	bne.n	800358c <I2S_IRQHandler+0x92>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b20      	cmp	r3, #32
 800354a:	d11f      	bne.n	800358c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff50 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b03      	cmp	r3, #3
 8003596:	d136      	bne.n	8003606 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d109      	bne.n	80035b6 <I2S_IRQHandler+0xbc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d102      	bne.n	80035b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff45 	bl	8003440 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d122      	bne.n	8003606 <I2S_IRQHandler+0x10c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d11b      	bne.n	8003606 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff13 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a92      	ldr	r2, [pc, #584]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800362a:	4b92      	ldr	r3, [pc, #584]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362c:	e001      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a8b      	ldr	r2, [pc, #556]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003648:	4b8a      	ldr	r3, [pc, #552]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800364a:	e001      	b.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800364c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d004      	beq.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8099 	bne.w	800379a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d107      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f925 	bl	80038cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f9c8 	bl	8003a2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d13a      	bne.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d035      	beq.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036ba:	4b6e      	ldr	r3, [pc, #440]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036bc:	e001      	b.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4969      	ldr	r1, [pc, #420]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ca:	428b      	cmp	r3, r1
 80036cc:	d101      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036ce:	4b69      	ldr	r3, [pc, #420]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d0:	e001      	b.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fe88 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b08      	cmp	r3, #8
 8003724:	f040 80c3 	bne.w	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80bd 	beq.w	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003742:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a49      	ldr	r2, [pc, #292]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003750:	e001      	b.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4944      	ldr	r1, [pc, #272]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375e:	428b      	cmp	r3, r1
 8003760:	d101      	bne.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003762:	4b44      	ldr	r3, [pc, #272]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003764:	e001      	b.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800376e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe4a 	bl	800342c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003798:	e089      	b.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d107      	bne.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8be 	bl	8003930 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8fd 	bl	80039c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d12f      	bne.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02a      	beq.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037fe:	e001      	b.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4919      	ldr	r1, [pc, #100]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380c:	428b      	cmp	r3, r1
 800380e:	d101      	bne.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003812:	e001      	b.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fdfa 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b08      	cmp	r3, #8
 8003840:	d136      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003858:	e001      	b.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4902      	ldr	r1, [pc, #8]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003866:	428b      	cmp	r3, r1
 8003868:	d106      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800386a:	4b02      	ldr	r3, [pc, #8]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800386c:	e006      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800386e:	bf00      	nop
 8003870:	40003800 	.word	0x40003800
 8003874:	40003400 	.word	0x40003400
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003880:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003890:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fdc0 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ac:	e000      	b.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ae:	bf00      	nop
}
 80038b0:	bf00      	nop
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c99      	adds	r1, r3, #2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6251      	str	r1, [r2, #36]	; 0x24
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d113      	bne.n	8003926 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffc9 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c99      	adds	r1, r3, #2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6251      	str	r1, [r2, #36]	; 0x24
 8003942:	8819      	ldrh	r1, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <I2SEx_TxISR_I2SExt+0x90>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <I2SEx_TxISR_I2SExt+0x22>
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003950:	e001      	b.n	8003956 <I2SEx_TxISR_I2SExt+0x26>
 8003952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003956:	460a      	mov	r2, r1
 8003958:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d121      	bne.n	80039b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <I2SEx_TxISR_I2SExt+0x90>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <I2SEx_TxISR_I2SExt+0x50>
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <I2SEx_TxISR_I2SExt+0x94>)
 800397e:	e001      	b.n	8003984 <I2SEx_TxISR_I2SExt+0x54>
 8003980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <I2SEx_TxISR_I2SExt+0x90>)
 800398c:	428b      	cmp	r3, r1
 800398e:	d101      	bne.n	8003994 <I2SEx_TxISR_I2SExt+0x64>
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003992:	e001      	b.n	8003998 <I2SEx_TxISR_I2SExt+0x68>
 8003994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff81 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40003800 	.word	0x40003800
 80039c4:	40003400 	.word	0x40003400

080039c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68d8      	ldr	r0, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	1c99      	adds	r1, r3, #2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039e0:	b282      	uxth	r2, r0
 80039e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d113      	bne.n	8003a24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff4a 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <I2SEx_RxISR_I2SExt+0x90>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <I2SEx_RxISR_I2SExt+0x16>
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a40:	e001      	b.n	8003a46 <I2SEx_RxISR_I2SExt+0x1a>
 8003a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a46:	68d8      	ldr	r0, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	1c99      	adds	r1, r3, #2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a52:	b282      	uxth	r2, r0
 8003a54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d121      	bne.n	8003ab2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <I2SEx_RxISR_I2SExt+0x90>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <I2SEx_RxISR_I2SExt+0x50>
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a7a:	e001      	b.n	8003a80 <I2SEx_RxISR_I2SExt+0x54>
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	490d      	ldr	r1, [pc, #52]	; (8003abc <I2SEx_RxISR_I2SExt+0x90>)
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d101      	bne.n	8003a90 <I2SEx_RxISR_I2SExt+0x64>
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a8e:	e001      	b.n	8003a94 <I2SEx_RxISR_I2SExt+0x68>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff03 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40003800 	.word	0x40003800
 8003ac0:	40003400 	.word	0x40003400

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e267      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d075      	beq.n	8003bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aee:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d112      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	4b7e      	ldr	r3, [pc, #504]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x108>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d157      	bne.n	8003bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e242      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x74>
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x98>
 8003b42:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6f      	ldr	r2, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6d      	ldr	r3, [pc, #436]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	4b69      	ldr	r3, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a68      	ldr	r2, [pc, #416]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fa72 	bl	8001064 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd fa6e 	bl	8001064 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e207      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fa5e 	bl	8001064 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fd fa5a 	bl	8001064 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1f3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0xe8>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c7      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4937      	ldr	r1, [pc, #220]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fa13 	bl	8001064 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fd fa0f 	bl	8001064 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a8      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4925      	ldr	r1, [pc, #148]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f9f2 	bl	8001064 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fd f9ee 	bl	8001064 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e187      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d036      	beq.n	8003d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd f9d2 	bl	8001064 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd f9ce 	bl	8001064 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e167      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x200>
 8003ce2:	e01b      	b.n	8003d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fd f9bb 	bl	8001064 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e00e      	b.n	8003d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fd f9b7 	bl	8001064 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d907      	bls.n	8003d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e150      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	42470000 	.word	0x42470000
 8003d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ea      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a7c      	ldr	r2, [pc, #496]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b7a      	ldr	r3, [pc, #488]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b74      	ldr	r3, [pc, #464]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fd f977 	bl	8001064 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fd f973 	bl	8001064 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e10c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x2ea>
 8003da0:	4b64      	ldr	r3, [pc, #400]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a63      	ldr	r2, [pc, #396]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x30c>
 8003db6:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a5e      	ldr	r2, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a5b      	ldr	r2, [pc, #364]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dd0:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	4b55      	ldr	r3, [pc, #340]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a54      	ldr	r2, [pc, #336]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0304 	bic.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd f938 	bl	8001064 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd f934 	bl	8001064 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0cb      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ee      	beq.n	8003df8 <HAL_RCC_OscConfig+0x334>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fd f922 	bl	8001064 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fd f91e 	bl	8001064 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0b5      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ee      	bne.n	8003e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a1 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d05c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d141      	bne.n	8003efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd f8f2 	bl	8001064 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd f8ee 	bl	8001064 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e087      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	491b      	ldr	r1, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fd f8c7 	bl	8001064 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd f8c3 	bl	8001064 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e05c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x416>
 8003ef8:	e054      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fd f8b0 	bl	8001064 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd f8ac 	bl	8001064 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e045      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x444>
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e038      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d028      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d121      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fc ffde 	bl	8001064 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fc ffda 	bl	8001064 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc ff3e 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	08007fd0 	.word	0x08007fd0
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b094      	sub	sp, #80	; 0x50
 8004186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	647b      	str	r3, [r7, #68]	; 0x44
 800418c:	2300      	movs	r3, #0
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	2300      	movs	r3, #0
 8004192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004198:	4b79      	ldr	r3, [pc, #484]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d00d      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x40>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	f200 80e1 	bhi.w	800436c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x3a>
 80041b2:	e0db      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b73      	ldr	r3, [pc, #460]	; (8004384 <HAL_RCC_GetSysClockFreq+0x204>)
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041b8:	e0db      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ba:	4b73      	ldr	r3, [pc, #460]	; (8004388 <HAL_RCC_GetSysClockFreq+0x208>)
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041be:	e0d8      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ca:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d063      	beq.n	800429e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	2200      	movs	r2, #0
 80041de:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ea:	2300      	movs	r3, #0
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041f2:	4622      	mov	r2, r4
 80041f4:	462b      	mov	r3, r5
 80041f6:	f04f 0000 	mov.w	r0, #0
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	0159      	lsls	r1, r3, #5
 8004200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004204:	0150      	lsls	r0, r2, #5
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4621      	mov	r1, r4
 800420c:	1a51      	subs	r1, r2, r1
 800420e:	6139      	str	r1, [r7, #16]
 8004210:	4629      	mov	r1, r5
 8004212:	eb63 0301 	sbc.w	r3, r3, r1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004224:	4659      	mov	r1, fp
 8004226:	018b      	lsls	r3, r1, #6
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800422e:	4651      	mov	r1, sl
 8004230:	018a      	lsls	r2, r1, #6
 8004232:	4651      	mov	r1, sl
 8004234:	ebb2 0801 	subs.w	r8, r2, r1
 8004238:	4659      	mov	r1, fp
 800423a:	eb63 0901 	sbc.w	r9, r3, r1
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004252:	4690      	mov	r8, r2
 8004254:	4699      	mov	r9, r3
 8004256:	4623      	mov	r3, r4
 8004258:	eb18 0303 	adds.w	r3, r8, r3
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	462b      	mov	r3, r5
 8004260:	eb49 0303 	adc.w	r3, r9, r3
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004272:	4629      	mov	r1, r5
 8004274:	024b      	lsls	r3, r1, #9
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800427c:	4621      	mov	r1, r4
 800427e:	024a      	lsls	r2, r1, #9
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2200      	movs	r2, #0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
 800428a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004290:	f7fb ffa2 	bl	80001d8 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	e058      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	2200      	movs	r2, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	4611      	mov	r1, r2
 80042aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	2300      	movs	r3, #0
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	f04f 0000 	mov.w	r0, #0
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	0159      	lsls	r1, r3, #5
 80042c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ca:	0150      	lsls	r0, r2, #5
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4641      	mov	r1, r8
 80042d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042d6:	4649      	mov	r1, r9
 80042d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042f0:	ebb2 040a 	subs.w	r4, r2, sl
 80042f4:	eb63 050b 	sbc.w	r5, r3, fp
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	00eb      	lsls	r3, r5, #3
 8004302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004306:	00e2      	lsls	r2, r4, #3
 8004308:	4614      	mov	r4, r2
 800430a:	461d      	mov	r5, r3
 800430c:	4643      	mov	r3, r8
 800430e:	18e3      	adds	r3, r4, r3
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	464b      	mov	r3, r9
 8004314:	eb45 0303 	adc.w	r3, r5, r3
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004326:	4629      	mov	r1, r5
 8004328:	028b      	lsls	r3, r1, #10
 800432a:	4621      	mov	r1, r4
 800432c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004330:	4621      	mov	r1, r4
 8004332:	028a      	lsls	r2, r1, #10
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433a:	2200      	movs	r2, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	61fa      	str	r2, [r7, #28]
 8004340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004344:	f7fb ff48 	bl	80001d8 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4613      	mov	r3, r2
 800434e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	3301      	adds	r3, #1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetSysClockFreq+0x204>)
 800436e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004374:	4618      	mov	r0, r3
 8004376:	3750      	adds	r7, #80	; 0x50
 8004378:	46bd      	mov	sp, r7
 800437a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200

0800438c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000

080043a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a8:	f7ff fff0 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4903      	ldr	r1, [pc, #12]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08007fe0 	.word	0x08007fe0

080043cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d038      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043fa:	f7fc fe33 	bl	8001064 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004402:	f7fc fe2f 	bl	8001064 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0bd      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004414:	4b61      	ldr	r3, [pc, #388]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f0      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	495a      	ldr	r1, [pc, #360]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800443a:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004440:	f7fc fe10 	bl	8001064 <HAL_GetTick>
 8004444:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004448:	f7fc fe0c 	bl	8001064 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e09a      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445a:	4b50      	ldr	r3, [pc, #320]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8083 	beq.w	800457a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	4b48      	ldr	r3, [pc, #288]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	4a47      	ldr	r2, [pc, #284]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	6413      	str	r3, [r2, #64]	; 0x40
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004490:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800449c:	f7fc fde2 	bl	8001064 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fc fdde 	bl	8001064 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e06c      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c2:	4b36      	ldr	r3, [pc, #216]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02f      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d028      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e0:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f0:	4b2c      	ldr	r3, [pc, #176]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044f6:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d114      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004508:	f7fc fdac 	bl	8001064 <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	e00a      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fc fda8 	bl	8001064 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e034      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ee      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453e:	d10d      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004540:	4b16      	ldr	r3, [pc, #88]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004554:	4911      	ldr	r1, [pc, #68]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
 800455a:	e005      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004566:	6093      	str	r3, [r2, #8]
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	4909      	ldr	r1, [pc, #36]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7d1a      	ldrb	r2, [r3, #20]
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800458c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	42470068 	.word	0x42470068
 800459c:	40023800 	.word	0x40023800
 80045a0:	40007000 	.word	0x40007000
 80045a4:	42470e40 	.word	0x42470e40
 80045a8:	424711e0 	.word	0x424711e0

080045ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d140      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d131      	bne.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045e2:	617b      	str	r3, [r7, #20]
          break;
 80045e4:	e031      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f2:	d109      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045fe:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e008      	b.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004612:	4a15      	ldr	r2, [pc, #84]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800461c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004634:	0f1b      	lsrs	r3, r3, #28
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]
          break;
 8004642:	e002      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
          break;
 8004648:	bf00      	nop
        }
      }
      break;
 800464a:	bf00      	nop
    }
  }
  return frequency;
 800464c:	697b      	ldr	r3, [r7, #20]
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	00bb8000 	.word	0x00bb8000
 8004664:	007a1200 	.word	0x007a1200
 8004668:	00f42400 	.word	0x00f42400

0800466c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e07b      	b.n	8004776 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	d108      	bne.n	8004698 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468e:	d009      	beq.n	80046a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	61da      	str	r2, [r3, #28]
 8004696:	e005      	b.n	80046a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fb6e 	bl	8000da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	ea42 0103 	orr.w	r1, r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	f003 0104 	and.w	r1, r3, #4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0210 	and.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004764:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800477e:	b084      	sub	sp, #16
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	f107 001c 	add.w	r0, r7, #28
 800478c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	2b01      	cmp	r3, #1
 8004794:	d122      	bne.n	80047dc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9bf 	bl	8004b54 <USB_CoreReset>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	e01a      	b.n	8004812 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9b3 	bl	8004b54 <USB_CoreReset>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
 8004804:	e005      	b.n	8004812 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10b      	bne.n	8004830 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f043 0206 	orr.w	r2, r3, #6
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr

08004840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d115      	bne.n	80048d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f7fc fbe2 	bl	800107c <HAL_Delay>
      ms++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f939 	bl	8004b36 <USB_GetMode>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d01e      	beq.n	8004908 <USB_SetCurrentMode+0x84>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b31      	cmp	r3, #49	; 0x31
 80048ce:	d9f0      	bls.n	80048b2 <USB_SetCurrentMode+0x2e>
 80048d0:	e01a      	b.n	8004908 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d115      	bne.n	8004904 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e4:	2001      	movs	r0, #1
 80048e6:	f7fc fbc9 	bl	800107c <HAL_Delay>
      ms++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f920 	bl	8004b36 <USB_GetMode>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <USB_SetCurrentMode+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b31      	cmp	r3, #49	; 0x31
 8004900:	d9f0      	bls.n	80048e4 <USB_SetCurrentMode+0x60>
 8004902:	e001      	b.n	8004908 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e005      	b.n	8004914 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b32      	cmp	r3, #50	; 0x32
 800490c:	d101      	bne.n	8004912 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3301      	adds	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <USB_FlushTxFifo+0x64>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e01b      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	daf2      	bge.n	800492a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <USB_FlushTxFifo+0x64>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b20      	cmp	r3, #32
 8004970:	d0f0      	beq.n	8004954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	00030d40 	.word	0x00030d40

08004984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <USB_FlushRxFifo+0x5c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e018      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2210      	movs	r2, #16
 80049b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <USB_FlushRxFifo+0x5c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e006      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d0f0      	beq.n	80049b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	00030d40 	.word	0x00030d40

080049e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	460b      	mov	r3, r1
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d123      	bne.n	8004a52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a0a:	88bb      	ldrh	r3, [r7, #4]
 8004a0c:	3303      	adds	r3, #3
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e018      	b.n	8004a4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	031a      	lsls	r2, r3, #12
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a24:	461a      	mov	r2, r3
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3301      	adds	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3e2      	bcc.n	8004a18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3724      	adds	r7, #36	; 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b08b      	sub	sp, #44	; 0x2c
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	089b      	lsrs	r3, r3, #2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	e014      	b.n	8004ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	3301      	adds	r3, #1
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3e6      	bcc.n	8004a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004abe:	8bfb      	ldrh	r3, [r7, #30]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01e      	beq.n	8004b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	3301      	adds	r3, #1
 8004aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	3301      	adds	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004af6:	8bfb      	ldrh	r3, [r7, #30]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004afc:	8bfb      	ldrh	r3, [r7, #30]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ea      	bne.n	8004ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	372c      	adds	r7, #44	; 0x2c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0301 	and.w	r3, r3, #1
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <USB_CoreReset+0x64>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e01b      	b.n	8004baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	daf2      	bge.n	8004b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <USB_CoreReset+0x64>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e006      	b.n	8004baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d0f0      	beq.n	8004b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	00030d40 	.word	0x00030d40

08004bbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10a      	bne.n	8004c2e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e014      	b.n	8004c58 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e009      	b.n	8004c58 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c58:	2110      	movs	r1, #16
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fe5e 	bl	800491c <USB_FlushTxFifo>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fe8a 	bl	8004984 <USB_FlushRxFifo>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e015      	b.n	8004cac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d3e5      	bcc.n	8004c80 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <USB_HostInit+0x16c>)
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a13      	ldr	r2, [pc, #76]	; (8004d2c <USB_HostInit+0x170>)
 8004ce0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ce4:	e009      	b.n	8004cfa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <USB_HostInit+0x174>)
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <USB_HostInit+0x178>)
 8004cf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f043 0210 	orr.w	r2, r3, #16
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <USB_HostInit+0x17c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d24:	b004      	add	sp, #16
 8004d26:	4770      	bx	lr
 8004d28:	01000200 	.word	0x01000200
 8004d2c:	00e00300 	.word	0x00e00300
 8004d30:	00600080 	.word	0x00600080
 8004d34:	004000e0 	.word	0x004000e0
 8004d38:	a3200008 	.word	0xa3200008

08004d3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d84:	461a      	mov	r2, r3
 8004d86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d8a:	6053      	str	r3, [r2, #4]
 8004d8c:	e009      	b.n	8004da2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d106      	bne.n	8004da2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004da0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dde:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004de0:	2064      	movs	r0, #100	; 0x64
 8004de2:	f7fc f94b 	bl	800107c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004df4:	200a      	movs	r0, #10
 8004df6:	f7fc f941 	bl	800107c <HAL_Delay>

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <USB_DriveVbus+0x44>
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d106      	bne.n	8004e48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	d109      	bne.n	8004e68 <USB_DriveVbus+0x64>
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	0c5b      	lsrs	r3, r3, #17
 8004e94:	f003 0303 	and.w	r3, r3, #3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	b29b      	uxth	r3, r3
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	70fb      	strb	r3, [r7, #3]
 8004eda:	460b      	mov	r3, r1
 8004edc:	70bb      	strb	r3, [r7, #2]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004efc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d87e      	bhi.n	8005004 <USB_HC_Init+0x13c>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <USB_HC_Init+0x44>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004fc7 	.word	0x08004fc7
 8004f14:	08004f1d 	.word	0x08004f1d
 8004f18:	08004f89 	.word	0x08004f89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004f2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	da10      	bge.n	8004f5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f56:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004f58:	e057      	b.n	800500a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d051      	beq.n	800500a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f84:	60d3      	str	r3, [r2, #12]
      break;
 8004f86:	e040      	b.n	800500a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	461a      	mov	r2, r3
 8004f96:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da34      	bge.n	800500e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004fc4:	e023      	b.n	800500e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f240 2325 	movw	r3, #549	; 0x225
 8004fd8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da17      	bge.n	8005012 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005000:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005002:	e006      	b.n	8005012 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	77fb      	strb	r3, [r7, #31]
      break;
 8005008:	e004      	b.n	8005014 <USB_HC_Init+0x14c>
      break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <USB_HC_Init+0x14c>
      break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <USB_HC_Init+0x14c>
      break;
 8005012:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	440a      	add	r2, r1
 800502a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	6939      	ldr	r1, [r7, #16]
 800504a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800504e:	4313      	orrs	r3, r2
 8005050:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800505e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005062:	2b00      	cmp	r3, #0
 8005064:	da03      	bge.n	800506e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e001      	b.n	8005072 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff feff 	bl	8004e76 <USB_GetHostSpeed>
 8005078:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800507a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800507e:	2b02      	cmp	r3, #2
 8005080:	d106      	bne.n	8005090 <USB_HC_Init+0x1c8>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d003      	beq.n	8005090 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e001      	b.n	8005094 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005094:	787b      	ldrb	r3, [r7, #1]
 8005096:	059b      	lsls	r3, r3, #22
 8005098:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800509c:	78bb      	ldrb	r3, [r7, #2]
 800509e:	02db      	lsls	r3, r3, #11
 80050a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050aa:	049b      	lsls	r3, r3, #18
 80050ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80050b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	0159      	lsls	r1, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	440b      	add	r3, r1
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80050d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d003      	beq.n	80050e2 <USB_HC_Init+0x21a>
 80050da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10f      	bne.n	8005102 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005100:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005102:	7ffb      	ldrb	r3, [r7, #31]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005128:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02d      	beq.n	8005192 <USB_HC_StartXfer+0x86>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d129      	bne.n	8005192 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d117      	bne.n	8005174 <USB_HC_StartXfer+0x68>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	79db      	ldrb	r3, [r3, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <USB_HC_StartXfer+0x48>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	79db      	ldrb	r3, [r3, #7]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d10f      	bne.n	8005174 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <USB_HC_StartXfer+0x86>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	795b      	ldrb	r3, [r3, #5]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	4619      	mov	r1, r3
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fa0f 	bl	80055ac <USB_DoPing>
      return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e0f8      	b.n	8005384 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	8912      	ldrh	r2, [r2, #8]
 80051a2:	4413      	add	r3, r2
 80051a4:	3b01      	subs	r3, #1
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	8912      	ldrh	r2, [r2, #8]
 80051aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80051b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051b2:	8b7b      	ldrh	r3, [r7, #26]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d90b      	bls.n	80051d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80051bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	8912      	ldrh	r2, [r2, #8]
 80051c2:	fb03 f202 	mul.w	r2, r3, r2
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	611a      	str	r2, [r3, #16]
 80051ca:	e001      	b.n	80051d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80051cc:	2301      	movs	r3, #1
 80051ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	78db      	ldrb	r3, [r3, #3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80051d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	8912      	ldrh	r2, [r2, #8]
 80051de:	fb03 f202 	mul.w	r2, r3, r2
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	611a      	str	r2, [r3, #16]
 80051e6:	e003      	b.n	80051f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051fa:	04d9      	lsls	r1, r3, #19
 80051fc:	4b63      	ldr	r3, [pc, #396]	; (800538c <USB_HC_StartXfer+0x280>)
 80051fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005200:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	7a9b      	ldrb	r3, [r3, #10]
 8005206:	075b      	lsls	r3, r3, #29
 8005208:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	0148      	lsls	r0, r1, #5
 8005210:	6a39      	ldr	r1, [r7, #32]
 8005212:	4401      	add	r1, r0
 8005214:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005218:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800521a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	68d9      	ldr	r1, [r3, #12]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	460a      	mov	r2, r1
 8005234:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	440a      	add	r2, r1
 8005264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005268:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800526c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	7e7b      	ldrb	r3, [r7, #25]
 800527e:	075b      	lsls	r3, r3, #29
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	0148      	lsls	r0, r1, #5
 8005284:	6a39      	ldr	r1, [r7, #32]
 8005286:	4401      	add	r1, r0
 8005288:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e003      	b.n	80052c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d6:	461a      	mov	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e04e      	b.n	8005384 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d149      	bne.n	8005382 <USB_HC_StartXfer+0x276>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d045      	beq.n	8005382 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	79db      	ldrb	r3, [r3, #7]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d830      	bhi.n	8005360 <USB_HC_StartXfer+0x254>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <USB_HC_StartXfer+0x1f8>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005315 	.word	0x08005315
 8005308:	08005339 	.word	0x08005339
 800530c:	08005315 	.word	0x08005315
 8005310:	08005339 	.word	0x08005339
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	3303      	adds	r3, #3
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800531e:	8afa      	ldrh	r2, [r7, #22]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	b29b      	uxth	r3, r3
 8005326:	429a      	cmp	r2, r3
 8005328:	d91c      	bls.n	8005364 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	619a      	str	r2, [r3, #24]
        }
        break;
 8005336:	e015      	b.n	8005364 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	3303      	adds	r3, #3
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005342:	8afa      	ldrh	r2, [r7, #22]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	b29b      	uxth	r3, r3
 800534e:	429a      	cmp	r2, r3
 8005350:	d90a      	bls.n	8005368 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	619a      	str	r2, [r3, #24]
        }
        break;
 800535e:	e003      	b.n	8005368 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005360:	bf00      	nop
 8005362:	e002      	b.n	800536a <USB_HC_StartXfer+0x25e>
        break;
 8005364:	bf00      	nop
 8005366:	e000      	b.n	800536a <USB_HC_StartXfer+0x25e>
        break;
 8005368:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	785a      	ldrb	r2, [r3, #1]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	b29b      	uxth	r3, r3
 8005378:	2000      	movs	r0, #0
 800537a:	9000      	str	r0, [sp, #0]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fb31 	bl	80049e4 <USB_WritePacket>
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3728      	adds	r7, #40	; 0x28
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	1ff80000 	.word	0x1ff80000

08005390 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	b29b      	uxth	r3, r3
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b089      	sub	sp, #36	; 0x24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	0c9b      	lsrs	r3, r3, #18
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	0fdb      	lsrs	r3, r3, #31
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d104      	bne.n	800540c <USB_HC_Halt+0x5a>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e0c8      	b.n	800559e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <USB_HC_Halt+0x66>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d163      	bne.n	80054e0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	440a      	add	r2, r1
 800542e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005436:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 80ab 	bne.w	800559c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d133      	bne.n	80054ba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	440a      	add	r2, r1
 8005468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005470:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800548c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005490:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549e:	d81d      	bhi.n	80054dc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b6:	d0ec      	beq.n	8005492 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054b8:	e070      	b.n	800559c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054da:	e05f      	b.n	800559c <USB_HC_Halt+0x1ea>
            break;
 80054dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054de:	e05d      	b.n	800559c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d133      	bne.n	8005578 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	440a      	add	r2, r1
 8005526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800552e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	440a      	add	r2, r1
 8005546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800554e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555c:	d81d      	bhi.n	800559a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005574:	d0ec      	beq.n	8005550 <USB_HC_Halt+0x19e>
 8005576:	e011      	b.n	800559c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	440a      	add	r2, r1
 800558e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e000      	b.n	800559c <USB_HC_Halt+0x1ea>
          break;
 800559a:	bf00      	nop
    }
  }

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3724      	adds	r7, #36	; 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80055c0:	2301      	movs	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	04da      	lsls	r2, r3, #19
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <USB_DoPing+0x74>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	1ff80000 	.word	0x1ff80000

08005624 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff f912 	bl	8004862 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800563e:	2110      	movs	r1, #16
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff f96b 	bl	800491c <USB_FlushTxFifo>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff f997 	bl	8004984 <USB_FlushRxFifo>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e01f      	b.n	80056a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800567c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800568c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569a:	461a      	mov	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d9dc      	bls.n	8005666 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e034      	b.n	800571c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	461a      	mov	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f8:	d80c      	bhi.n	8005714 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800570c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005710:	d0ec      	beq.n	80056ec <USB_StopHost+0xc8>
 8005712:	e000      	b.n	8005716 <USB_StopHost+0xf2>
        break;
 8005714:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3301      	adds	r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d9c7      	bls.n	80056b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800572e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005736:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff f881 	bl	8004840 <USB_EnableGlobalInt>

  return ret;
 800573e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af04      	add	r7, sp, #16
 800574e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005750:	2301      	movs	r3, #1
 8005752:	2202      	movs	r2, #2
 8005754:	2102      	movs	r1, #2
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fc66 	bl	8006028 <USBH_FindInterface>
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2bff      	cmp	r3, #255	; 0xff
 8005764:	d002      	beq.n	800576c <USBH_CDC_InterfaceInit+0x24>
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d901      	bls.n	8005770 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800576c:	2302      	movs	r3, #2
 800576e:	e13d      	b.n	80059ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fc3b 	bl	8005ff0 <USBH_SelectInterface>
 800577a:	4603      	mov	r3, r0
 800577c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005784:	2302      	movs	r3, #2
 8005786:	e131      	b.n	80059ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800578e:	2050      	movs	r0, #80	; 0x50
 8005790:	f002 fafa 	bl	8007d88 <malloc>
 8005794:	4603      	mov	r3, r0
 8005796:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80057a8:	2302      	movs	r3, #2
 80057aa:	e11f      	b.n	80059ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80057ac:	2250      	movs	r2, #80	; 0x50
 80057ae:	2100      	movs	r1, #0
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f002 faf9 	bl	8007da8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	211a      	movs	r1, #26
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da15      	bge.n	80057fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	211a      	movs	r1, #26
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	211a      	movs	r1, #26
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 ff2c 	bl	800765e <USBH_AllocPipe>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	7819      	ldrb	r1, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	7858      	ldrb	r0, [r3, #1]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	8952      	ldrh	r2, [r2, #10]
 8005826:	9202      	str	r2, [sp, #8]
 8005828:	2203      	movs	r2, #3
 800582a:	9201      	str	r2, [sp, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4623      	mov	r3, r4
 8005830:	4602      	mov	r2, r0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f001 fee4 	bl	8007600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f002 f9f3 	bl	8007c2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005846:	2300      	movs	r3, #0
 8005848:	2200      	movs	r2, #0
 800584a:	210a      	movs	r1, #10
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fbeb 	bl	8006028 <USBH_FindInterface>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2bff      	cmp	r3, #255	; 0xff
 800585a:	d002      	beq.n	8005862 <USBH_CDC_InterfaceInit+0x11a>
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d901      	bls.n	8005866 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005862:	2302      	movs	r3, #2
 8005864:	e0c2      	b.n	80059ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	211a      	movs	r1, #26
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	4413      	add	r3, r2
 8005872:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b25b      	sxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	da16      	bge.n	80058ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	211a      	movs	r1, #26
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	4413      	add	r3, r2
 800588a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	211a      	movs	r1, #26
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	4413      	add	r3, r2
 80058a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	835a      	strh	r2, [r3, #26]
 80058aa:	e015      	b.n	80058d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	211a      	movs	r1, #26
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	211a      	movs	r1, #26
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	211a      	movs	r1, #26
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	4413      	add	r3, r2
 80058e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da16      	bge.n	800591e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	211a      	movs	r1, #26
 80058f6:	fb01 f303 	mul.w	r3, r1, r3
 80058fa:	4413      	add	r3, r2
 80058fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	211a      	movs	r1, #26
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005916:	881a      	ldrh	r2, [r3, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	835a      	strh	r2, [r3, #26]
 800591c:	e015      	b.n	800594a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	211a      	movs	r1, #26
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	211a      	movs	r1, #26
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005944:	881a      	ldrh	r2, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	7b9b      	ldrb	r3, [r3, #14]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 fe84 	bl	800765e <USBH_AllocPipe>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	7bdb      	ldrb	r3, [r3, #15]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fe7a 	bl	800765e <USBH_AllocPipe>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	7b59      	ldrb	r1, [r3, #13]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	7b98      	ldrb	r0, [r3, #14]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	8b12      	ldrh	r2, [r2, #24]
 800598a:	9202      	str	r2, [sp, #8]
 800598c:	2202      	movs	r2, #2
 800598e:	9201      	str	r2, [sp, #4]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4623      	mov	r3, r4
 8005994:	4602      	mov	r2, r0
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fe32 	bl	8007600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	7b19      	ldrb	r1, [r3, #12]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	7bd8      	ldrb	r0, [r3, #15]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	8b52      	ldrh	r2, [r2, #26]
 80059b4:	9202      	str	r2, [sp, #8]
 80059b6:	2202      	movs	r2, #2
 80059b8:	9201      	str	r2, [sp, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4623      	mov	r3, r4
 80059be:	4602      	mov	r2, r0
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fe1d 	bl	8007600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	7b5b      	ldrb	r3, [r3, #13]
 80059d2:	2200      	movs	r2, #0
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f002 f928 	bl	8007c2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	7b1b      	ldrb	r3, [r3, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f002 f921 	bl	8007c2c <USBH_LL_SetToggle>

  return USBH_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}

080059f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00e      	beq.n	8005a2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fe12 	bl	800763e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fe3d 	bl	80076a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	7b1b      	ldrb	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	7b1b      	ldrb	r3, [r3, #12]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fdff 	bl	800763e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	7b1b      	ldrb	r3, [r3, #12]
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fe2a 	bl	80076a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	7b5b      	ldrb	r3, [r3, #13]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	7b5b      	ldrb	r3, [r3, #13]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 fdec 	bl	800763e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	7b5b      	ldrb	r3, [r3, #13]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fe17 	bl	80076a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f002 f983 	bl	8007d98 <free>
    phost->pActiveClass->pData = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a98:	2200      	movs	r2, #0
 8005a9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3340      	adds	r3, #64	; 0x40
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8b1 	bl	8005c26 <GetLineCoding>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d105      	bne.n	8005ada <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005ada:	7afb      	ldrb	r3, [r7, #11]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d877      	bhi.n	8005bf8 <USBH_CDC_Process+0x114>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <USBH_CDC_Process+0x2c>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b25 	.word	0x08005b25
 8005b14:	08005b2b 	.word	0x08005b2b
 8005b18:	08005b5b 	.word	0x08005b5b
 8005b1c:	08005bcf 	.word	0x08005bcf
 8005b20:	08005bdd 	.word	0x08005bdd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e06d      	b.n	8005c06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f897 	bl	8005c64 <SetLineCoding>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b48:	e058      	b.n	8005bfc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005b4a:	7bbb      	ldrb	r3, [r7, #14]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d055      	beq.n	8005bfc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2204      	movs	r2, #4
 8005b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b58:	e050      	b.n	8005bfc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3340      	adds	r3, #64	; 0x40
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f860 	bl	8005c26 <GetLineCoding>
 8005b66:	4603      	mov	r3, r0
 8005b68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d126      	bne.n	8005bbe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d13b      	bne.n	8005c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d133      	bne.n	8005c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d12b      	bne.n	8005c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d124      	bne.n	8005c00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f958 	bl	8005e6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005bbc:	e020      	b.n	8005c00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d01d      	beq.n	8005c00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005bcc:	e018      	b.n	8005c00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f867 	bl	8005ca2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f8da 	bl	8005d8e <CDC_ProcessReception>
      break;
 8005bda:	e014      	b.n	8005c06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005bdc:	2100      	movs	r1, #0
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ffef 	bl	8006bc2 <USBH_ClrFeature>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005bf6:	e005      	b.n	8005c04 <USBH_CDC_Process+0x120>

    default:
      break;
 8005bf8:	bf00      	nop
 8005bfa:	e004      	b.n	8005c06 <USBH_CDC_Process+0x122>
      break;
 8005bfc:	bf00      	nop
 8005bfe:	e002      	b.n	8005c06 <USBH_CDC_Process+0x122>
      break;
 8005c00:	bf00      	nop
 8005c02:	e000      	b.n	8005c06 <USBH_CDC_Process+0x122>
      break;
 8005c04:	bf00      	nop

  }

  return status;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	22a1      	movs	r2, #161	; 0xa1
 8005c34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2221      	movs	r2, #33	; 0x21
 8005c3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2207      	movs	r2, #7
 8005c4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2207      	movs	r2, #7
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fa81 	bl	800715c <USBH_CtlReq>
 8005c5a:	4603      	mov	r3, r0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2221      	movs	r2, #33	; 0x21
 8005c72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2207      	movs	r2, #7
 8005c8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2207      	movs	r2, #7
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 fa62 	bl	800715c <USBH_CtlReq>
 8005c98:	4603      	mov	r3, r0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af02      	add	r7, sp, #8
 8005ca8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d002      	beq.n	8005cc8 <CDC_ProcessTransmission+0x26>
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d023      	beq.n	8005d0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005cc6:	e05e      	b.n	8005d86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	8b12      	ldrh	r2, [r2, #24]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d90b      	bls.n	8005cec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	69d9      	ldr	r1, [r3, #28]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8b1a      	ldrh	r2, [r3, #24]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	7b5b      	ldrb	r3, [r3, #13]
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	9000      	str	r0, [sp, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fc48 	bl	800757a <USBH_BulkSendData>
 8005cea:	e00b      	b.n	8005d04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	7b5b      	ldrb	r3, [r3, #13]
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	9000      	str	r0, [sp, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 fc3b 	bl	800757a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d0c:	e03b      	b.n	8005d86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	7b5b      	ldrb	r3, [r3, #13]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 ff5f 	bl	8007bd8 <USBH_LL_GetURBState>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d128      	bne.n	8005d76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	8b12      	ldrh	r2, [r2, #24]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d90e      	bls.n	8005d4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	8b12      	ldrh	r2, [r2, #24]
 8005d38:	1a9a      	subs	r2, r3, r2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	8b12      	ldrh	r2, [r2, #24]
 8005d46:	441a      	add	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	61da      	str	r2, [r3, #28]
 8005d4c:	e002      	b.n	8005d54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d64:	e00e      	b.n	8005d84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f868 	bl	8005e44 <USBH_CDC_TransmitCallback>
      break;
 8005d74:	e006      	b.n	8005d84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d103      	bne.n	8005d84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d84:	bf00      	nop
  }
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b086      	sub	sp, #24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d002      	beq.n	8005db4 <CDC_ProcessReception+0x26>
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d00e      	beq.n	8005dd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005db2:	e043      	b.n	8005e3c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	6a19      	ldr	r1, [r3, #32]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	8b5a      	ldrh	r2, [r3, #26]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	7b1b      	ldrb	r3, [r3, #12]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 fbff 	bl	80075c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005dce:	e035      	b.n	8005e3c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	7b1b      	ldrb	r3, [r3, #12]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 fefe 	bl	8007bd8 <USBH_LL_GetURBState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d129      	bne.n	8005e3a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	7b1b      	ldrb	r3, [r3, #12]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fe61 	bl	8007ab4 <USBH_LL_GetLastXferSize>
 8005df2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d016      	beq.n	8005e2c <CDC_ProcessReception+0x9e>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	8b5b      	ldrh	r3, [r3, #26]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d910      	bls.n	8005e2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad2      	subs	r2, r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	6a1a      	ldr	r2, [r3, #32]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	441a      	add	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2203      	movs	r2, #3
 8005e26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005e2a:	e006      	b.n	8005e3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f80f 	bl	8005e58 <USBH_CDC_ReceiveCallback>
      break;
 8005e3a:	bf00      	nop
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e94:	2302      	movs	r3, #2
 8005e96:	e029      	b.n	8005eec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	79fa      	ldrb	r2, [r7, #7]
 8005e9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f81f 	bl	8005ef4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 fd31 	bl	800794c <USBH_LL_Init>

  return USBH_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e009      	b.n	8005f1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	33e0      	adds	r3, #224	; 0xe0
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	2200      	movs	r2, #0
 8005f12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3301      	adds	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d9f2      	bls.n	8005f06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e009      	b.n	8005f3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f40:	d3f1      	bcc.n	8005f26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2240      	movs	r2, #64	; 0x40
 8005f66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d016      	beq.n	8005fde <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10e      	bne.n	8005fd8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fc0:	1c59      	adds	r1, r3, #1
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	33de      	adds	r3, #222	; 0xde
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
 8005fd6:	e004      	b.n	8005fe2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	e001      	b.n	8005fe2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	429a      	cmp	r2, r3
 800600a:	d204      	bcs.n	8006016 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006014:	e001      	b.n	800601a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006016:	2302      	movs	r3, #2
 8006018:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	4608      	mov	r0, r1
 8006032:	4611      	mov	r1, r2
 8006034:	461a      	mov	r2, r3
 8006036:	4603      	mov	r3, r0
 8006038:	70fb      	strb	r3, [r7, #3]
 800603a:	460b      	mov	r3, r1
 800603c:	70bb      	strb	r3, [r7, #2]
 800603e:	4613      	mov	r3, r2
 8006040:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006050:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006052:	e025      	b.n	80060a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	221a      	movs	r2, #26
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	3308      	adds	r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	3302      	adds	r3, #2
 8006064:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	795b      	ldrb	r3, [r3, #5]
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	429a      	cmp	r2, r3
 800606e:	d002      	beq.n	8006076 <USBH_FindInterface+0x4e>
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	2bff      	cmp	r3, #255	; 0xff
 8006074:	d111      	bne.n	800609a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800607a:	78ba      	ldrb	r2, [r7, #2]
 800607c:	429a      	cmp	r2, r3
 800607e:	d002      	beq.n	8006086 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006080:	78bb      	ldrb	r3, [r7, #2]
 8006082:	2bff      	cmp	r3, #255	; 0xff
 8006084:	d109      	bne.n	800609a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800608a:	787a      	ldrb	r2, [r7, #1]
 800608c:	429a      	cmp	r2, r3
 800608e:	d002      	beq.n	8006096 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006090:	787b      	ldrb	r3, [r7, #1]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d101      	bne.n	800609a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	e006      	b.n	80060a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	3301      	adds	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d9d6      	bls.n	8006054 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80060a6:	23ff      	movs	r3, #255	; 0xff
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fc81 	bl	80079c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80060c2:	2101      	movs	r1, #1
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fd9a 	bl	8007bfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af04      	add	r7, sp, #16
 80060da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80060dc:	2302      	movs	r3, #2
 80060de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d102      	bne.n	80060f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2203      	movs	r2, #3
 80060f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b0b      	cmp	r3, #11
 80060fe:	f200 81be 	bhi.w	800647e <USBH_Process+0x3aa>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <USBH_Process+0x34>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006139 	.word	0x08006139
 800610c:	0800616b 	.word	0x0800616b
 8006110:	080061d3 	.word	0x080061d3
 8006114:	08006419 	.word	0x08006419
 8006118:	0800647f 	.word	0x0800647f
 800611c:	08006277 	.word	0x08006277
 8006120:	080063bf 	.word	0x080063bf
 8006124:	080062ad 	.word	0x080062ad
 8006128:	080062cd 	.word	0x080062cd
 800612c:	080062ed 	.word	0x080062ed
 8006130:	08006331 	.word	0x08006331
 8006134:	08006401 	.word	0x08006401
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 819e 	beq.w	8006482 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800614c:	20c8      	movs	r0, #200	; 0xc8
 800614e:	f001 fd9d 	bl	8007c8c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fc93 	bl	8007a7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006168:	e18b      	b.n	8006482 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006182:	e18d      	b.n	80064a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800618a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800618e:	d914      	bls.n	80061ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006196:	3301      	adds	r3, #1
 8006198:	b2da      	uxtb	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d903      	bls.n	80061b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	220d      	movs	r2, #13
 80061ae:	701a      	strb	r2, [r3, #0]
      break;
 80061b0:	e176      	b.n	80064a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
      break;
 80061b8:	e172      	b.n	80064a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061c0:	f103 020a 	add.w	r2, r3, #10
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80061ca:	200a      	movs	r0, #10
 80061cc:	f001 fd5e 	bl	8007c8c <USBH_Delay>
      break;
 80061d0:	e166      	b.n	80064a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061e2:	2104      	movs	r1, #4
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80061e8:	2064      	movs	r0, #100	; 0x64
 80061ea:	f001 fd4f 	bl	8007c8c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fc1e 	bl	8007a30 <USBH_LL_GetSpeed>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2205      	movs	r2, #5
 8006202:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006204:	2100      	movs	r1, #0
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fa29 	bl	800765e <USBH_AllocPipe>
 800620c:	4603      	mov	r3, r0
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006214:	2180      	movs	r1, #128	; 0x80
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fa21 	bl	800765e <USBH_AllocPipe>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7919      	ldrb	r1, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006238:	b292      	uxth	r2, r2
 800623a:	9202      	str	r2, [sp, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	9201      	str	r2, [sp, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4603      	mov	r3, r0
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 f9da 	bl	8007600 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7959      	ldrb	r1, [r3, #5]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006260:	b292      	uxth	r2, r2
 8006262:	9202      	str	r2, [sp, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	9201      	str	r2, [sp, #4]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4603      	mov	r3, r0
 800626c:	2200      	movs	r2, #0
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 f9c6 	bl	8007600 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006274:	e114      	b.n	80064a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f918 	bl	80064ac <USBH_HandleEnum>
 800627c:	4603      	mov	r3, r0
 800627e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 80fe 	bne.w	8006486 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006298:	2b01      	cmp	r3, #1
 800629a:	d103      	bne.n	80062a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2208      	movs	r2, #8
 80062a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80062a2:	e0f0      	b.n	8006486 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2207      	movs	r2, #7
 80062a8:	701a      	strb	r2, [r3, #0]
      break;
 80062aa:	e0ec      	b.n	8006486 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80e9 	beq.w	800648a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062be:	2101      	movs	r1, #1
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2208      	movs	r2, #8
 80062c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80062ca:	e0de      	b.n	800648a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fc2c 	bl	8006b34 <USBH_SetCfg>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 80d5 	bne.w	800648e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2209      	movs	r2, #9
 80062e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062ea:	e0d0      	b.n	800648e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80062fa:	2101      	movs	r1, #1
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc3c 	bl	8006b7a <USBH_SetFeature>
 8006302:	4603      	mov	r3, r0
 8006304:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006306:	7bbb      	ldrb	r3, [r7, #14]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	220a      	movs	r2, #10
 8006312:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006314:	e0bd      	b.n	8006492 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b03      	cmp	r3, #3
 800631c:	f040 80b9 	bne.w	8006492 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	220a      	movs	r2, #10
 8006324:	701a      	strb	r2, [r3, #0]
      break;
 8006326:	e0b4      	b.n	8006492 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	220a      	movs	r2, #10
 800632c:	701a      	strb	r2, [r3, #0]
      break;
 800632e:	e0b0      	b.n	8006492 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80ad 	beq.w	8006496 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
 8006348:	e016      	b.n	8006378 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	32de      	adds	r2, #222	; 0xde
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	791a      	ldrb	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800635c:	429a      	cmp	r2, r3
 800635e:	d108      	bne.n	8006372 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006360:	7bfa      	ldrb	r2, [r7, #15]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32de      	adds	r2, #222	; 0xde
 8006366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006370:	e005      	b.n	800637e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	3301      	adds	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0e5      	beq.n	800634a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d016      	beq.n	80063b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2206      	movs	r2, #6
 800639e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063a6:	2103      	movs	r1, #3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063ac:	e073      	b.n	8006496 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	220d      	movs	r2, #13
 80063b2:	701a      	strb	r2, [r3, #0]
      break;
 80063b4:	e06f      	b.n	8006496 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	220d      	movs	r2, #13
 80063ba:	701a      	strb	r2, [r3, #0]
      break;
 80063bc:	e06b      	b.n	8006496 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d017      	beq.n	80063f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	220b      	movs	r2, #11
 80063e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063e6:	e058      	b.n	800649a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d154      	bne.n	800649a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	220d      	movs	r2, #13
 80063f4:	701a      	strb	r2, [r3, #0]
      break;
 80063f6:	e050      	b.n	800649a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	220d      	movs	r2, #13
 80063fc:	701a      	strb	r2, [r3, #0]
      break;
 80063fe:	e04c      	b.n	800649a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d049      	beq.n	800649e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
      }
      break;
 8006416:	e042      	b.n	800649e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fd67 	bl	8005ef4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006454:	2105      	movs	r1, #5
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d107      	bne.n	8006476 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fe20 	bl	80060b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006474:	e014      	b.n	80064a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 faa4 	bl	80079c4 <USBH_LL_Start>
      break;
 800647c:	e010      	b.n	80064a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800647e:	bf00      	nop
 8006480:	e00e      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 8006482:	bf00      	nop
 8006484:	e00c      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 8006486:	bf00      	nop
 8006488:	e00a      	b.n	80064a0 <USBH_Process+0x3cc>
    break;
 800648a:	bf00      	nop
 800648c:	e008      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 800648e:	bf00      	nop
 8006490:	e006      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 8006492:	bf00      	nop
 8006494:	e004      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <USBH_Process+0x3cc>
      break;
 800649e:	bf00      	nop
  }
  return USBH_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop

080064ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af04      	add	r7, sp, #16
 80064b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b07      	cmp	r3, #7
 80064c2:	f200 81c1 	bhi.w	8006848 <USBH_HandleEnum+0x39c>
 80064c6:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <USBH_HandleEnum+0x20>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	080065ab 	.word	0x080065ab
 80064d4:	08006615 	.word	0x08006615
 80064d8:	080066a3 	.word	0x080066a3
 80064dc:	0800670d 	.word	0x0800670d
 80064e0:	0800677d 	.word	0x0800677d
 80064e4:	080067c3 	.word	0x080067c3
 80064e8:	08006809 	.word	0x08006809
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80064ec:	2108      	movs	r1, #8
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa50 	bl	8006994 <USBH_Get_DevDesc>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d130      	bne.n	8006560 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7919      	ldrb	r1, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006522:	b292      	uxth	r2, r2
 8006524:	9202      	str	r2, [sp, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	9201      	str	r2, [sp, #4]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	4603      	mov	r3, r0
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f865 	bl	8007600 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	7959      	ldrb	r1, [r3, #5]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800654a:	b292      	uxth	r2, r2
 800654c:	9202      	str	r2, [sp, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4603      	mov	r3, r0
 8006556:	2200      	movs	r2, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f851 	bl	8007600 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800655e:	e175      	b.n	800684c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b03      	cmp	r3, #3
 8006564:	f040 8172 	bne.w	800684c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800656e:	3301      	adds	r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800657e:	2b03      	cmp	r3, #3
 8006580:	d903      	bls.n	800658a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	220d      	movs	r2, #13
 8006586:	701a      	strb	r2, [r3, #0]
      break;
 8006588:	e160      	b.n	800684c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	795b      	ldrb	r3, [r3, #5]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 f885 	bl	80076a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f87f 	bl	80076a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
      break;
 80065a8:	e150      	b.n	800684c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80065aa:	2112      	movs	r1, #18
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f9f1 	bl	8006994 <USBH_Get_DevDesc>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065c2:	e145      	b.n	8006850 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	f040 8142 	bne.w	8006850 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065d2:	3301      	adds	r3, #1
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d903      	bls.n	80065ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	220d      	movs	r2, #13
 80065ea:	701a      	strb	r2, [r3, #0]
      break;
 80065ec:	e130      	b.n	8006850 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	795b      	ldrb	r3, [r3, #5]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f853 	bl	80076a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	791b      	ldrb	r3, [r3, #4]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 f84d 	bl	80076a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
      break;
 8006612:	e11d      	b.n	8006850 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006614:	2101      	movs	r1, #1
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa68 	bl	8006aec <USBH_SetAddress>
 800661c:	4603      	mov	r3, r0
 800661e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d132      	bne.n	800668c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006626:	2002      	movs	r0, #2
 8006628:	f001 fb30 	bl	8007c8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2203      	movs	r2, #3
 8006638:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7919      	ldrb	r1, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800664e:	b292      	uxth	r2, r2
 8006650:	9202      	str	r2, [sp, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	9201      	str	r2, [sp, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	4603      	mov	r3, r0
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 ffcf 	bl	8007600 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7959      	ldrb	r1, [r3, #5]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006676:	b292      	uxth	r2, r2
 8006678:	9202      	str	r2, [sp, #8]
 800667a:	2200      	movs	r2, #0
 800667c:	9201      	str	r2, [sp, #4]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4603      	mov	r3, r0
 8006682:	2200      	movs	r2, #0
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 ffbb 	bl	8007600 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800668a:	e0e3      	b.n	8006854 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	2b03      	cmp	r3, #3
 8006690:	f040 80e0 	bne.w	8006854 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	220d      	movs	r2, #13
 8006698:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	705a      	strb	r2, [r3, #1]
      break;
 80066a0:	e0d8      	b.n	8006854 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80066a2:	2109      	movs	r1, #9
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f99d 	bl	80069e4 <USBH_Get_CfgDesc>
 80066aa:	4603      	mov	r3, r0
 80066ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2204      	movs	r2, #4
 80066b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066ba:	e0cd      	b.n	8006858 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b03      	cmp	r3, #3
 80066c0:	f040 80ca 	bne.w	8006858 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ca:	3301      	adds	r3, #1
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d903      	bls.n	80066e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	220d      	movs	r2, #13
 80066e2:	701a      	strb	r2, [r3, #0]
      break;
 80066e4:	e0b8      	b.n	8006858 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	795b      	ldrb	r3, [r3, #5]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 ffd7 	bl	80076a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	791b      	ldrb	r3, [r3, #4]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 ffd1 	bl	80076a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
      break;
 800670a:	e0a5      	b.n	8006858 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f965 	bl	80069e4 <USBH_Get_CfgDesc>
 800671a:	4603      	mov	r3, r0
 800671c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2205      	movs	r2, #5
 8006728:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800672a:	e097      	b.n	800685c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	2b03      	cmp	r3, #3
 8006730:	f040 8094 	bne.w	800685c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800673a:	3301      	adds	r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800674a:	2b03      	cmp	r3, #3
 800674c:	d903      	bls.n	8006756 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	220d      	movs	r2, #13
 8006752:	701a      	strb	r2, [r3, #0]
      break;
 8006754:	e082      	b.n	800685c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 ff9f 	bl	80076a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	791b      	ldrb	r3, [r3, #4]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 ff99 	bl	80076a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	701a      	strb	r2, [r3, #0]
      break;
 800677a:	e06f      	b.n	800685c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006782:	2b00      	cmp	r3, #0
 8006784:	d019      	beq.n	80067ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006792:	23ff      	movs	r3, #255	; 0xff
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f949 	bl	8006a2c <USBH_Get_StringDesc>
 800679a:	4603      	mov	r3, r0
 800679c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2206      	movs	r2, #6
 80067a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067aa:	e059      	b.n	8006860 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d156      	bne.n	8006860 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2206      	movs	r2, #6
 80067b6:	705a      	strb	r2, [r3, #1]
      break;
 80067b8:	e052      	b.n	8006860 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2206      	movs	r2, #6
 80067be:	705a      	strb	r2, [r3, #1]
      break;
 80067c0:	e04e      	b.n	8006860 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d019      	beq.n	8006800 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80067d8:	23ff      	movs	r3, #255	; 0xff
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f926 	bl	8006a2c <USBH_Get_StringDesc>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2207      	movs	r2, #7
 80067ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067f0:	e038      	b.n	8006864 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d135      	bne.n	8006864 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2207      	movs	r2, #7
 80067fc:	705a      	strb	r2, [r3, #1]
      break;
 80067fe:	e031      	b.n	8006864 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2207      	movs	r2, #7
 8006804:	705a      	strb	r2, [r3, #1]
      break;
 8006806:	e02d      	b.n	8006864 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800681e:	23ff      	movs	r3, #255	; 0xff
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f903 	bl	8006a2c <USBH_Get_StringDesc>
 8006826:	4603      	mov	r3, r0
 8006828:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006834:	e018      	b.n	8006868 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d115      	bne.n	8006868 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e012      	b.n	8006868 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]
      break;
 8006846:	e00f      	b.n	8006868 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006848:	bf00      	nop
 800684a:	e00e      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 800684c:	bf00      	nop
 800684e:	e00c      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 8006850:	bf00      	nop
 8006852:	e00a      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 8006854:	bf00      	nop
 8006856:	e008      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 8006858:	bf00      	nop
 800685a:	e006      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <USBH_HandleEnum+0x3be>
      break;
 8006868:	bf00      	nop
  }
  return Status;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f804 	bl	80068b6 <USBH_HandleSof>
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b0b      	cmp	r3, #11
 80068c6:	d10a      	bne.n	80068de <USBH_HandleSof+0x28>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
  }
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80068f6:	bf00      	nop
}
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006912:	bf00      	nop
}
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f844 	bl	80079fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	791b      	ldrb	r3, [r3, #4]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fe91 	bl	80076a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	795b      	ldrb	r3, [r3, #5]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fe8b 	bl	80076a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af02      	add	r7, sp, #8
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069b2:	2100      	movs	r1, #0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f864 	bl	8006a82 <USBH_GetDescriptor>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	b292      	uxth	r2, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	f000 f918 	bl	8006c0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	331c      	adds	r3, #28
 80069f4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80069f6:	887b      	ldrh	r3, [r7, #2]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f83d 	bl	8006a82 <USBH_GetDescriptor>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006a12:	887b      	ldrh	r3, [r7, #2]
 8006a14:	461a      	mov	r2, r3
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f987 	bl	8006d2c <USBH_ParseCfgDesc>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	461a      	mov	r2, r3
 8006a38:	460b      	mov	r3, r1
 8006a3a:	72fb      	strb	r3, [r7, #11]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a48:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006a50:	893b      	ldrh	r3, [r7, #8]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	460b      	mov	r3, r1
 8006a56:	2100      	movs	r1, #0
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f812 	bl	8006a82 <USBH_GetDescriptor>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d107      	bne.n	8006a78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a6e:	893a      	ldrh	r2, [r7, #8]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fb24 	bl	80070c0 <USBH_ParseStringDesc>
  }

  return status;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	72fb      	strb	r3, [r7, #11]
 8006a90:	4613      	mov	r3, r2
 8006a92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	789b      	ldrb	r3, [r3, #2]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d11c      	bne.n	8006ad6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2206      	movs	r2, #6
 8006aac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	893a      	ldrh	r2, [r7, #8]
 8006ab2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006ab4:	893b      	ldrh	r3, [r7, #8]
 8006ab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006abe:	d104      	bne.n	8006aca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f240 4209 	movw	r2, #1033	; 0x409
 8006ac6:	829a      	strh	r2, [r3, #20]
 8006ac8:	e002      	b.n	8006ad0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8b3a      	ldrh	r2, [r7, #24]
 8006ad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006ad6:	8b3b      	ldrh	r3, [r7, #24]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fb3d 	bl	800715c <USBH_CtlReq>
 8006ae2:	4603      	mov	r3, r0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	789b      	ldrb	r3, [r3, #2]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10f      	bne.n	8006b20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2205      	movs	r2, #5
 8006b0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006b20:	2200      	movs	r2, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fb19 	bl	800715c <USBH_CtlReq>
 8006b2a:	4603      	mov	r3, r0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	789b      	ldrb	r3, [r3, #2]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d10e      	bne.n	8006b66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2209      	movs	r2, #9
 8006b52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006b66:	2200      	movs	r2, #0
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 faf6 	bl	800715c <USBH_CtlReq>
 8006b70:	4603      	mov	r3, r0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	789b      	ldrb	r3, [r3, #2]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10f      	bne.n	8006bae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2203      	movs	r2, #3
 8006b98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fad2 	bl	800715c <USBH_CtlReq>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	789b      	ldrb	r3, [r3, #2]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10f      	bne.n	8006bf6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 faae 	bl	800715c <USBH_CtlReq>
 8006c00:	4603      	mov	r3, r0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	785a      	ldrb	r2, [r3, #1]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3303      	adds	r3, #3
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	791a      	ldrb	r2, [r3, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	795a      	ldrb	r2, [r3, #5]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	799a      	ldrb	r2, [r3, #6]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	79da      	ldrb	r2, [r3, #7]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	79db      	ldrb	r3, [r3, #7]
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	dc11      	bgt.n	8006c90 <USBH_ParseDevDesc+0x86>
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	db16      	blt.n	8006c9e <USBH_ParseDevDesc+0x94>
 8006c70:	3b08      	subs	r3, #8
 8006c72:	2201      	movs	r2, #1
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <USBH_ParseDevDesc+0x8a>
 8006c8e:	e006      	b.n	8006c9e <USBH_ParseDevDesc+0x94>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d104      	bne.n	8006c9e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	79da      	ldrb	r2, [r3, #7]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	71da      	strb	r2, [r3, #7]
      break;
 8006c9c:	e003      	b.n	8006ca6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2240      	movs	r2, #64	; 0x40
 8006ca2:	71da      	strb	r2, [r3, #7]
      break;
 8006ca4:	bf00      	nop
  }

  if (length > 8U)
 8006ca6:	88fb      	ldrh	r3, [r7, #6]
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d939      	bls.n	8006d20 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3309      	adds	r3, #9
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	330a      	adds	r3, #10
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	330b      	adds	r3, #11
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	330d      	adds	r3, #13
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	7b9a      	ldrb	r2, [r3, #14]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	7bda      	ldrb	r2, [r3, #15]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	7c1a      	ldrb	r2, [r3, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	7c5a      	ldrb	r2, [r3, #17]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	745a      	strb	r2, [r3, #17]
  }
}
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	781a      	ldrb	r2, [r3, #0]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	785a      	ldrb	r2, [r3, #1]
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3302      	adds	r3, #2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3303      	adds	r3, #3
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d88:	bf28      	it	cs
 8006d8a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	791a      	ldrb	r2, [r3, #4]
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	795a      	ldrb	r2, [r3, #5]
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	799a      	ldrb	r2, [r3, #6]
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	79da      	ldrb	r2, [r3, #7]
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	7a1a      	ldrb	r2, [r3, #8]
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b09      	cmp	r3, #9
 8006dc2:	d002      	beq.n	8006dca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2209      	movs	r2, #9
 8006dc8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	f240 809d 	bls.w	8006f0c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006dd2:	2309      	movs	r3, #9
 8006dd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006dda:	e081      	b.n	8006ee0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ddc:	f107 0316 	add.w	r3, r7, #22
 8006de0:	4619      	mov	r1, r3
 8006de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de4:	f000 f99f 	bl	8007126 <USBH_GetNextDesc>
 8006de8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d176      	bne.n	8006ee0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b09      	cmp	r3, #9
 8006df8:	d002      	beq.n	8006e00 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2209      	movs	r2, #9
 8006dfe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e04:	221a      	movs	r2, #26
 8006e06:	fb02 f303 	mul.w	r3, r2, r3
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	4413      	add	r3, r2
 8006e10:	3302      	adds	r3, #2
 8006e12:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e16:	69f8      	ldr	r0, [r7, #28]
 8006e18:	f000 f87e 	bl	8006f18 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e26:	e043      	b.n	8006eb0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e28:	f107 0316 	add.w	r3, r7, #22
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e30:	f000 f979 	bl	8007126 <USBH_GetNextDesc>
 8006e34:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d138      	bne.n	8006eb0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	795b      	ldrb	r3, [r3, #5]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d10f      	bne.n	8006e66 <USBH_ParseCfgDesc+0x13a>
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	799b      	ldrb	r3, [r3, #6]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d10b      	bne.n	8006e66 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	79db      	ldrb	r3, [r3, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10f      	bne.n	8006e76 <USBH_ParseCfgDesc+0x14a>
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d00b      	beq.n	8006e76 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2209      	movs	r2, #9
 8006e62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006e64:	e007      	b.n	8006e76 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b07      	cmp	r3, #7
 8006e6c:	d004      	beq.n	8006e78 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	2207      	movs	r2, #7
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e000      	b.n	8006e78 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006e76:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006e80:	3201      	adds	r2, #1
 8006e82:	00d2      	lsls	r2, r2, #3
 8006e84:	211a      	movs	r1, #26
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	6a3a      	ldr	r2, [r7, #32]
 8006e90:	4413      	add	r3, r2
 8006e92:	3304      	adds	r3, #4
 8006e94:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f86b 	bl	8006f76 <USBH_ParseEPDesc>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	791b      	ldrb	r3, [r3, #4]
 8006eb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d204      	bcs.n	8006ec6 <USBH_ParseCfgDesc+0x19a>
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	885a      	ldrh	r2, [r3, #2]
 8006ec0:	8afb      	ldrh	r3, [r7, #22]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d8b0      	bhi.n	8006e28 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d201      	bcs.n	8006ed6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e01c      	b.n	8006f10 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eda:	3301      	adds	r3, #1
 8006edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d805      	bhi.n	8006ef4 <USBH_ParseCfgDesc+0x1c8>
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	885a      	ldrh	r2, [r3, #2]
 8006eec:	8afb      	ldrh	r3, [r7, #22]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	f63f af74 	bhi.w	8006ddc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	791b      	ldrb	r3, [r3, #4]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	bf28      	it	cs
 8006efc:	2302      	movcs	r3, #2
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d201      	bcs.n	8006f0c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e001      	b.n	8006f10 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3730      	adds	r7, #48	; 0x30
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	785a      	ldrb	r2, [r3, #1]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	789a      	ldrb	r2, [r3, #2]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	78da      	ldrb	r2, [r3, #3]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	791a      	ldrb	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	795a      	ldrb	r2, [r3, #5]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	799a      	ldrb	r2, [r3, #6]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	79da      	ldrb	r2, [r3, #7]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	7a1a      	ldrb	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	721a      	strb	r2, [r3, #8]
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b087      	sub	sp, #28
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	785a      	ldrb	r2, [r3, #1]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	789a      	ldrb	r2, [r3, #2]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	78da      	ldrb	r2, [r3, #3]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3305      	adds	r3, #5
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	799a      	ldrb	r2, [r3, #6]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	889b      	ldrh	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	75fb      	strb	r3, [r7, #23]
 8006fd6:	e033      	b.n	8007040 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	889b      	ldrh	r3, [r3, #4]
 8006fdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fe0:	f023 0307 	bic.w	r3, r3, #7
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	889b      	ldrh	r3, [r3, #4]
 8006fee:	b21a      	sxth	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b299      	uxth	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3305      	adds	r3, #5
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	b29b      	uxth	r3, r3
 8007004:	430b      	orrs	r3, r1
 8007006:	b29b      	uxth	r3, r3
 8007008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800700c:	2b00      	cmp	r3, #0
 800700e:	d110      	bne.n	8007032 <USBH_ParseEPDesc+0xbc>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	b299      	uxth	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3305      	adds	r3, #5
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	b29b      	uxth	r3, r3
 8007024:	430b      	orrs	r3, r1
 8007026:	b29b      	uxth	r3, r3
 8007028:	b21b      	sxth	r3, r3
 800702a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800702e:	b21b      	sxth	r3, r3
 8007030:	e001      	b.n	8007036 <USBH_ParseEPDesc+0xc0>
 8007032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007036:	4313      	orrs	r3, r2
 8007038:	b21b      	sxth	r3, r3
 800703a:	b29a      	uxth	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007046:	2b00      	cmp	r3, #0
 8007048:	d116      	bne.n	8007078 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	78db      	ldrb	r3, [r3, #3]
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b01      	cmp	r3, #1
 8007054:	d005      	beq.n	8007062 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	78db      	ldrb	r3, [r3, #3]
 800705a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800705e:	2b03      	cmp	r3, #3
 8007060:	d127      	bne.n	80070b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	799b      	ldrb	r3, [r3, #6]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <USBH_ParseEPDesc+0xfc>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	799b      	ldrb	r3, [r3, #6]
 800706e:	2b10      	cmp	r3, #16
 8007070:	d91f      	bls.n	80070b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007072:	2303      	movs	r3, #3
 8007074:	75fb      	strb	r3, [r7, #23]
 8007076:	e01c      	b.n	80070b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	78db      	ldrb	r3, [r3, #3]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	2b01      	cmp	r3, #1
 8007082:	d10a      	bne.n	800709a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	799b      	ldrb	r3, [r3, #6]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <USBH_ParseEPDesc+0x11e>
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	799b      	ldrb	r3, [r3, #6]
 8007090:	2b10      	cmp	r3, #16
 8007092:	d90e      	bls.n	80070b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007094:	2303      	movs	r3, #3
 8007096:	75fb      	strb	r3, [r7, #23]
 8007098:	e00b      	b.n	80070b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	78db      	ldrb	r3, [r3, #3]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d105      	bne.n	80070b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	799b      	ldrb	r3, [r3, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80070ae:	2303      	movs	r3, #3
 80070b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d120      	bne.n	800711a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	1e9a      	subs	r2, r3, #2
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	bf28      	it	cs
 80070e4:	4613      	movcs	r3, r2
 80070e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3302      	adds	r3, #2
 80070ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80070ee:	2300      	movs	r3, #0
 80070f0:	82fb      	strh	r3, [r7, #22]
 80070f2:	e00b      	b.n	800710c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80070f4:	8afb      	ldrh	r3, [r7, #22]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	3301      	adds	r3, #1
 8007104:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007106:	8afb      	ldrh	r3, [r7, #22]
 8007108:	3302      	adds	r3, #2
 800710a:	82fb      	strh	r3, [r7, #22]
 800710c:	8afa      	ldrh	r2, [r7, #22]
 800710e:	8abb      	ldrh	r3, [r7, #20]
 8007110:	429a      	cmp	r2, r3
 8007112:	d3ef      	bcc.n	80070f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
  }
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	4413      	add	r3, r2
 800713c:	b29a      	uxth	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4413      	add	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	789b      	ldrb	r3, [r3, #2]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d002      	beq.n	800717c <USBH_CtlReq+0x20>
 8007176:	2b02      	cmp	r3, #2
 8007178:	d00f      	beq.n	800719a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800717a:	e027      	b.n	80071cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	88fa      	ldrh	r2, [r7, #6]
 8007186:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2202      	movs	r2, #2
 8007192:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007194:	2301      	movs	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
      break;
 8007198:	e018      	b.n	80071cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f81c 	bl	80071d8 <USBH_HandleControl>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <USBH_CtlReq+0x54>
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d106      	bne.n	80071be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	761a      	strb	r2, [r3, #24]
      break;
 80071bc:	e005      	b.n	80071ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d102      	bne.n	80071ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	709a      	strb	r2, [r3, #2]
      break;
 80071ca:	bf00      	nop
  }
  return status;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7e1b      	ldrb	r3, [r3, #24]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	2b0a      	cmp	r3, #10
 80071f0:	f200 8156 	bhi.w	80074a0 <USBH_HandleControl+0x2c8>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBH_HandleControl+0x24>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	08007229 	.word	0x08007229
 8007200:	08007243 	.word	0x08007243
 8007204:	080072ad 	.word	0x080072ad
 8007208:	080072d3 	.word	0x080072d3
 800720c:	0800730b 	.word	0x0800730b
 8007210:	08007335 	.word	0x08007335
 8007214:	08007387 	.word	0x08007387
 8007218:	080073a9 	.word	0x080073a9
 800721c:	080073e5 	.word	0x080073e5
 8007220:	0800740b 	.word	0x0800740b
 8007224:	08007449 	.word	0x08007449
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f103 0110 	add.w	r1, r3, #16
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	795b      	ldrb	r3, [r3, #5]
 8007232:	461a      	mov	r2, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f943 	bl	80074c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	761a      	strb	r2, [r3, #24]
      break;
 8007240:	e139      	b.n	80074b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	795b      	ldrb	r3, [r3, #5]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fcc5 	bl	8007bd8 <USBH_LL_GetURBState>
 800724e:	4603      	mov	r3, r0
 8007250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d11e      	bne.n	8007296 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	7c1b      	ldrb	r3, [r3, #16]
 800725c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8adb      	ldrh	r3, [r3, #22]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800726a:	7b7b      	ldrb	r3, [r7, #13]
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d103      	bne.n	8007278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2203      	movs	r2, #3
 8007274:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007276:	e115      	b.n	80074a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2205      	movs	r2, #5
 800727c:	761a      	strb	r2, [r3, #24]
      break;
 800727e:	e111      	b.n	80074a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007280:	7b7b      	ldrb	r3, [r7, #13]
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d103      	bne.n	800728e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2209      	movs	r2, #9
 800728a:	761a      	strb	r2, [r3, #24]
      break;
 800728c:	e10a      	b.n	80074a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2207      	movs	r2, #7
 8007292:	761a      	strb	r2, [r3, #24]
      break;
 8007294:	e106      	b.n	80074a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d003      	beq.n	80072a4 <USBH_HandleControl+0xcc>
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	f040 8100 	bne.w	80074a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	220b      	movs	r2, #11
 80072a8:	761a      	strb	r2, [r3, #24]
      break;
 80072aa:	e0fb      	b.n	80074a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6899      	ldr	r1, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	899a      	ldrh	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f93a 	bl	800753e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2204      	movs	r2, #4
 80072ce:	761a      	strb	r2, [r3, #24]
      break;
 80072d0:	e0f1      	b.n	80074b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	791b      	ldrb	r3, [r3, #4]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fc7d 	bl	8007bd8 <USBH_LL_GetURBState>
 80072de:	4603      	mov	r3, r0
 80072e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d102      	bne.n	80072ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2209      	movs	r2, #9
 80072ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d102      	bne.n	80072fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80072f4:	2303      	movs	r3, #3
 80072f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072f8:	e0d6      	b.n	80074a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	f040 80d3 	bne.w	80074a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	220b      	movs	r2, #11
 8007306:	761a      	strb	r2, [r3, #24]
      break;
 8007308:	e0ce      	b.n	80074a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6899      	ldr	r1, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	899a      	ldrh	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	795b      	ldrb	r3, [r3, #5]
 8007316:	2001      	movs	r0, #1
 8007318:	9000      	str	r0, [sp, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8ea 	bl	80074f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007326:	b29a      	uxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2206      	movs	r2, #6
 8007330:	761a      	strb	r2, [r3, #24]
      break;
 8007332:	e0c0      	b.n	80074b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	795b      	ldrb	r3, [r3, #5]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fc4c 	bl	8007bd8 <USBH_LL_GetURBState>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d103      	bne.n	8007352 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2207      	movs	r2, #7
 800734e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007350:	e0ac      	b.n	80074ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b05      	cmp	r3, #5
 8007356:	d105      	bne.n	8007364 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	220c      	movs	r2, #12
 800735c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800735e:	2303      	movs	r3, #3
 8007360:	73fb      	strb	r3, [r7, #15]
      break;
 8007362:	e0a3      	b.n	80074ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d103      	bne.n	8007372 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2205      	movs	r2, #5
 800736e:	761a      	strb	r2, [r3, #24]
      break;
 8007370:	e09c      	b.n	80074ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b04      	cmp	r3, #4
 8007376:	f040 8099 	bne.w	80074ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	220b      	movs	r2, #11
 800737e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007380:	2302      	movs	r3, #2
 8007382:	73fb      	strb	r3, [r7, #15]
      break;
 8007384:	e092      	b.n	80074ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	791b      	ldrb	r3, [r3, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f8d5 	bl	800753e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2208      	movs	r2, #8
 80073a4:	761a      	strb	r2, [r3, #24]

      break;
 80073a6:	e086      	b.n	80074b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	791b      	ldrb	r3, [r3, #4]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc12 	bl	8007bd8 <USBH_LL_GetURBState>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d105      	bne.n	80073ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	220d      	movs	r2, #13
 80073c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073c8:	e072      	b.n	80074b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d103      	bne.n	80073d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	220b      	movs	r2, #11
 80073d4:	761a      	strb	r2, [r3, #24]
      break;
 80073d6:	e06b      	b.n	80074b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d168      	bne.n	80074b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80073de:	2303      	movs	r3, #3
 80073e0:	73fb      	strb	r3, [r7, #15]
      break;
 80073e2:	e065      	b.n	80074b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	795b      	ldrb	r3, [r3, #5]
 80073e8:	2201      	movs	r2, #1
 80073ea:	9200      	str	r2, [sp, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	2100      	movs	r1, #0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f87f 	bl	80074f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	220a      	movs	r2, #10
 8007406:	761a      	strb	r2, [r3, #24]
      break;
 8007408:	e055      	b.n	80074b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	795b      	ldrb	r3, [r3, #5]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fbe1 	bl	8007bd8 <USBH_LL_GetURBState>
 8007416:	4603      	mov	r3, r0
 8007418:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d105      	bne.n	800742c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	220d      	movs	r2, #13
 8007428:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800742a:	e043      	b.n	80074b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d103      	bne.n	800743a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2209      	movs	r2, #9
 8007436:	761a      	strb	r2, [r3, #24]
      break;
 8007438:	e03c      	b.n	80074b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d139      	bne.n	80074b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	220b      	movs	r2, #11
 8007444:	761a      	strb	r2, [r3, #24]
      break;
 8007446:	e035      	b.n	80074b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7e5b      	ldrb	r3, [r3, #25]
 800744c:	3301      	adds	r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	765a      	strb	r2, [r3, #25]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7e5b      	ldrb	r3, [r3, #25]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d806      	bhi.n	800746a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007468:	e025      	b.n	80074b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007470:	2106      	movs	r1, #6
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	795b      	ldrb	r3, [r3, #5]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f90c 	bl	80076a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	791b      	ldrb	r3, [r3, #4]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f906 	bl	80076a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	e00a      	b.n	80074b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80074a0:	bf00      	nop
 80074a2:	e008      	b.n	80074b6 <USBH_HandleControl+0x2de>
      break;
 80074a4:	bf00      	nop
 80074a6:	e006      	b.n	80074b6 <USBH_HandleControl+0x2de>
      break;
 80074a8:	bf00      	nop
 80074aa:	e004      	b.n	80074b6 <USBH_HandleControl+0x2de>
      break;
 80074ac:	bf00      	nop
 80074ae:	e002      	b.n	80074b6 <USBH_HandleControl+0x2de>
      break;
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <USBH_HandleControl+0x2de>
      break;
 80074b4:	bf00      	nop
  }

  return status;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	4613      	mov	r3, r2
 80074cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074ce:	79f9      	ldrb	r1, [r7, #7]
 80074d0:	2300      	movs	r3, #0
 80074d2:	9303      	str	r3, [sp, #12]
 80074d4:	2308      	movs	r3, #8
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2200      	movs	r2, #0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fb46 	bl	8007b76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4611      	mov	r1, r2
 8007500:	461a      	mov	r2, r3
 8007502:	460b      	mov	r3, r1
 8007504:	80fb      	strh	r3, [r7, #6]
 8007506:	4613      	mov	r3, r2
 8007508:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007518:	7979      	ldrb	r1, [r7, #5]
 800751a:	7e3b      	ldrb	r3, [r7, #24]
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	9302      	str	r3, [sp, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	2301      	movs	r3, #1
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	2200      	movs	r2, #0
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fb21 	bl	8007b76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b088      	sub	sp, #32
 8007542:	af04      	add	r7, sp, #16
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	4611      	mov	r1, r2
 800754a:	461a      	mov	r2, r3
 800754c:	460b      	mov	r3, r1
 800754e:	80fb      	strh	r3, [r7, #6]
 8007550:	4613      	mov	r3, r2
 8007552:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007554:	7979      	ldrb	r1, [r7, #5]
 8007556:	2300      	movs	r3, #0
 8007558:	9303      	str	r3, [sp, #12]
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	9302      	str	r3, [sp, #8]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	2301      	movs	r3, #1
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	2300      	movs	r3, #0
 8007568:	2201      	movs	r2, #1
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fb03 	bl	8007b76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007570:	2300      	movs	r3, #0

}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b088      	sub	sp, #32
 800757e:	af04      	add	r7, sp, #16
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	4611      	mov	r1, r2
 8007586:	461a      	mov	r2, r3
 8007588:	460b      	mov	r3, r1
 800758a:	80fb      	strh	r3, [r7, #6]
 800758c:	4613      	mov	r3, r2
 800758e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800759e:	7979      	ldrb	r1, [r7, #5]
 80075a0:	7e3b      	ldrb	r3, [r7, #24]
 80075a2:	9303      	str	r3, [sp, #12]
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	9302      	str	r3, [sp, #8]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	2301      	movs	r3, #1
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2302      	movs	r3, #2
 80075b2:	2200      	movs	r2, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fade 	bl	8007b76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4611      	mov	r1, r2
 80075d0:	461a      	mov	r2, r3
 80075d2:	460b      	mov	r3, r1
 80075d4:	80fb      	strh	r3, [r7, #6]
 80075d6:	4613      	mov	r3, r2
 80075d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075da:	7979      	ldrb	r1, [r7, #5]
 80075dc:	2300      	movs	r3, #0
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	2301      	movs	r3, #1
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2302      	movs	r3, #2
 80075ee:	2201      	movs	r2, #1
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fac0 	bl	8007b76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af04      	add	r7, sp, #16
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	461a      	mov	r2, r3
 800760e:	4603      	mov	r3, r0
 8007610:	70fb      	strb	r3, [r7, #3]
 8007612:	460b      	mov	r3, r1
 8007614:	70bb      	strb	r3, [r7, #2]
 8007616:	4613      	mov	r3, r2
 8007618:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800761a:	7878      	ldrb	r0, [r7, #1]
 800761c:	78ba      	ldrb	r2, [r7, #2]
 800761e:	78f9      	ldrb	r1, [r7, #3]
 8007620:	8b3b      	ldrh	r3, [r7, #24]
 8007622:	9302      	str	r3, [sp, #8]
 8007624:	7d3b      	ldrb	r3, [r7, #20]
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	7c3b      	ldrb	r3, [r7, #16]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4603      	mov	r3, r0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa53 	bl	8007ada <USBH_LL_OpenPipe>

  return USBH_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa72 	bl	8007b38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f836 	bl	80076dc <USBH_GetFreePipe>
 8007670:	4603      	mov	r3, r0
 8007672:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007674:	89fb      	ldrh	r3, [r7, #14]
 8007676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800767a:	4293      	cmp	r3, r2
 800767c:	d00a      	beq.n	8007694 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	89fb      	ldrh	r3, [r7, #14]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	33e0      	adds	r3, #224	; 0xe0
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007694:	89fb      	ldrh	r3, [r7, #14]
 8007696:	b2db      	uxtb	r3, r3
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b0f      	cmp	r3, #15
 80076b0:	d80d      	bhi.n	80076ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	33e0      	adds	r3, #224	; 0xe0
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	33e0      	adds	r3, #224	; 0xe0
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e00f      	b.n	800770e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	33e0      	adds	r3, #224	; 0xe0
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	b29b      	uxth	r3, r3
 8007706:	e007      	b.n	8007718 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	3301      	adds	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b0f      	cmp	r3, #15
 8007712:	d9ec      	bls.n	80076ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007714:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007728:	2201      	movs	r2, #1
 800772a:	490e      	ldr	r1, [pc, #56]	; (8007764 <MX_USB_HOST_Init+0x40>)
 800772c:	480e      	ldr	r0, [pc, #56]	; (8007768 <MX_USB_HOST_Init+0x44>)
 800772e:	f7fe fba7 	bl	8005e80 <USBH_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007738:	f7f9 f9ee 	bl	8000b18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800773c:	490b      	ldr	r1, [pc, #44]	; (800776c <MX_USB_HOST_Init+0x48>)
 800773e:	480a      	ldr	r0, [pc, #40]	; (8007768 <MX_USB_HOST_Init+0x44>)
 8007740:	f7fe fc2c 	bl	8005f9c <USBH_RegisterClass>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800774a:	f7f9 f9e5 	bl	8000b18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800774e:	4806      	ldr	r0, [pc, #24]	; (8007768 <MX_USB_HOST_Init+0x44>)
 8007750:	f7fe fcb0 	bl	80060b4 <USBH_Start>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800775a:	f7f9 f9dd 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800775e:	bf00      	nop
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	08007785 	.word	0x08007785
 8007768:	20000200 	.word	0x20000200
 800776c:	2000000c 	.word	0x2000000c

08007770 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007774:	4802      	ldr	r0, [pc, #8]	; (8007780 <MX_USB_HOST_Process+0x10>)
 8007776:	f7fe fcad 	bl	80060d4 <USBH_Process>
}
 800777a:	bf00      	nop
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000200 	.word	0x20000200

08007784 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	3b01      	subs	r3, #1
 8007794:	2b04      	cmp	r3, #4
 8007796:	d819      	bhi.n	80077cc <USBH_UserProcess+0x48>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBH_UserProcess+0x1c>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	080077bd 	.word	0x080077bd
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077b5 	.word	0x080077b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80077b4:	4b09      	ldr	r3, [pc, #36]	; (80077dc <USBH_UserProcess+0x58>)
 80077b6:	2203      	movs	r2, #3
 80077b8:	701a      	strb	r2, [r3, #0]
  break;
 80077ba:	e008      	b.n	80077ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80077bc:	4b07      	ldr	r3, [pc, #28]	; (80077dc <USBH_UserProcess+0x58>)
 80077be:	2202      	movs	r2, #2
 80077c0:	701a      	strb	r2, [r3, #0]
  break;
 80077c2:	e004      	b.n	80077ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <USBH_UserProcess+0x58>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	701a      	strb	r2, [r3, #0]
  break;
 80077ca:	e000      	b.n	80077ce <USBH_UserProcess+0x4a>

  default:
  break;
 80077cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	200005d8 	.word	0x200005d8

080077e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	; 0x28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	605a      	str	r2, [r3, #4]
 80077f2:	609a      	str	r2, [r3, #8]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007800:	d147      	bne.n	8007892 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	4b25      	ldr	r3, [pc, #148]	; (800789c <HAL_HCD_MspInit+0xbc>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	4a24      	ldr	r2, [pc, #144]	; (800789c <HAL_HCD_MspInit+0xbc>)
 800780c:	f043 0301 	orr.w	r3, r3, #1
 8007810:	6313      	str	r3, [r2, #48]	; 0x30
 8007812:	4b22      	ldr	r3, [pc, #136]	; (800789c <HAL_HCD_MspInit+0xbc>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800781e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	4619      	mov	r1, r3
 8007832:	481b      	ldr	r0, [pc, #108]	; (80078a0 <HAL_HCD_MspInit+0xc0>)
 8007834:	f7f9 fd8a 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007838:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800783c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800783e:	2302      	movs	r3, #2
 8007840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007846:	2303      	movs	r3, #3
 8007848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800784a:	230a      	movs	r3, #10
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800784e:	f107 0314 	add.w	r3, r7, #20
 8007852:	4619      	mov	r1, r3
 8007854:	4812      	ldr	r0, [pc, #72]	; (80078a0 <HAL_HCD_MspInit+0xc0>)
 8007856:	f7f9 fd79 	bl	800134c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <HAL_HCD_MspInit+0xbc>)
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	4a0f      	ldr	r2, [pc, #60]	; (800789c <HAL_HCD_MspInit+0xbc>)
 8007860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007864:	6353      	str	r3, [r2, #52]	; 0x34
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	4b0c      	ldr	r3, [pc, #48]	; (800789c <HAL_HCD_MspInit+0xbc>)
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	4a0b      	ldr	r2, [pc, #44]	; (800789c <HAL_HCD_MspInit+0xbc>)
 8007870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007874:	6453      	str	r3, [r2, #68]	; 0x44
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <HAL_HCD_MspInit+0xbc>)
 8007878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007882:	2200      	movs	r2, #0
 8007884:	2100      	movs	r1, #0
 8007886:	2043      	movs	r0, #67	; 0x43
 8007888:	f7f9 fd1b 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800788c:	2043      	movs	r0, #67	; 0x43
 800788e:	f7f9 fd34 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007892:	bf00      	nop
 8007894:	3728      	adds	r7, #40	; 0x28
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40023800 	.word	0x40023800
 80078a0:	40020000 	.word	0x40020000

080078a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe ffed 	bl	8006892 <USBH_LL_IncTimer>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff f825 	bl	800691e <USBH_LL_Connect>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff f82e 	bl	800694c <USBH_LL_Disconnect>
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
 8007904:	4613      	mov	r3, r2
 8007906:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe ffdf 	bl	80068e6 <USBH_LL_PortEnabled>
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe ffdf 	bl	8006902 <USBH_LL_PortDisabled>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800795a:	2b01      	cmp	r3, #1
 800795c:	d12a      	bne.n	80079b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800795e:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <USBH_LL_Init+0x74>)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a15      	ldr	r2, [pc, #84]	; (80079c0 <USBH_LL_Init+0x74>)
 800796a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <USBH_LL_Init+0x74>)
 8007970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007974:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007976:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <USBH_LL_Init+0x74>)
 8007978:	2208      	movs	r2, #8
 800797a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800797c:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <USBH_LL_Init+0x74>)
 800797e:	2201      	movs	r2, #1
 8007980:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <USBH_LL_Init+0x74>)
 8007984:	2200      	movs	r2, #0
 8007986:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007988:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <USBH_LL_Init+0x74>)
 800798a:	2202      	movs	r2, #2
 800798c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800798e:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <USBH_LL_Init+0x74>)
 8007990:	2200      	movs	r2, #0
 8007992:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007994:	480a      	ldr	r0, [pc, #40]	; (80079c0 <USBH_LL_Init+0x74>)
 8007996:	f7f9 fea7 	bl	80016e8 <HAL_HCD_Init>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079a0:	f7f9 f8ba 	bl	8000b18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079a4:	4806      	ldr	r0, [pc, #24]	; (80079c0 <USBH_LL_Init+0x74>)
 80079a6:	f7fa fa8a 	bl	8001ebe <HAL_HCD_GetCurrentFrame>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fe ff60 	bl	8006874 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200005dc 	.word	0x200005dc

080079c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fa f9f9 	bl	8001dd2 <HAL_HCD_Start>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f95c 	bl	8007ca4 <USBH_Get_USB_Status>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fa fa01 	bl	8001e18 <HAL_HCD_Stop>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 f941 	bl	8007ca4 <USBH_Get_USB_Status>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fa fa49 	bl	8001eda <HAL_HCD_GetCurrentSpeed>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d00c      	beq.n	8007a68 <USBH_LL_GetSpeed+0x38>
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d80d      	bhi.n	8007a6e <USBH_LL_GetSpeed+0x3e>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <USBH_LL_GetSpeed+0x2c>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d003      	beq.n	8007a62 <USBH_LL_GetSpeed+0x32>
 8007a5a:	e008      	b.n	8007a6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a60:	e008      	b.n	8007a74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007a62:	2301      	movs	r3, #1
 8007a64:	73fb      	strb	r3, [r7, #15]
    break;
 8007a66:	e005      	b.n	8007a74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6c:	e002      	b.n	8007a74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	73fb      	strb	r3, [r7, #15]
    break;
 8007a72:	bf00      	nop
  }
  return  speed;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fa f9dc 	bl	8001e52 <HAL_HCD_ResetPort>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 f8ff 	bl	8007ca4 <USBH_Get_USB_Status>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ac6:	78fa      	ldrb	r2, [r7, #3]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fa f9e3 	bl	8001e96 <HAL_HCD_HC_GetXferCount>
 8007ad0:	4603      	mov	r3, r0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ada:	b590      	push	{r4, r7, lr}
 8007adc:	b089      	sub	sp, #36	; 0x24
 8007ade:	af04      	add	r7, sp, #16
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4603      	mov	r3, r0
 8007aea:	70fb      	strb	r3, [r7, #3]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70bb      	strb	r3, [r7, #2]
 8007af0:	4613      	mov	r3, r2
 8007af2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b02:	787c      	ldrb	r4, [r7, #1]
 8007b04:	78ba      	ldrb	r2, [r7, #2]
 8007b06:	78f9      	ldrb	r1, [r7, #3]
 8007b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4623      	mov	r3, r4
 8007b1a:	f7f9 fe47 	bl	80017ac <HAL_HCD_HC_Init>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f8bd 	bl	8007ca4 <USBH_Get_USB_Status>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd90      	pop	{r4, r7, pc}

08007b38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b52:	78fa      	ldrb	r2, [r7, #3]
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f9 feb7 	bl	80018ca <HAL_HCD_HC_Halt>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f89e 	bl	8007ca4 <USBH_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007b76:	b590      	push	{r4, r7, lr}
 8007b78:	b089      	sub	sp, #36	; 0x24
 8007b7a:	af04      	add	r7, sp, #16
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	461a      	mov	r2, r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70bb      	strb	r3, [r7, #2]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b9e:	787c      	ldrb	r4, [r7, #1]
 8007ba0:	78ba      	ldrb	r2, [r7, #2]
 8007ba2:	78f9      	ldrb	r1, [r7, #3]
 8007ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ba8:	9303      	str	r3, [sp, #12]
 8007baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4623      	mov	r3, r4
 8007bba:	f7f9 fea9 	bl	8001910 <HAL_HCD_HC_SubmitRequest>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f86d 	bl	8007ca4 <USBH_Get_USB_Status>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd90      	pop	{r4, r7, pc}

08007bd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fa f93d 	bl	8001e6e <HAL_HCD_HC_GetURBState>
 8007bf4:	4603      	mov	r3, r0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d103      	bne.n	8007c1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f870 	bl	8007cfc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c1c:	20c8      	movs	r0, #200	; 0xc8
 8007c1e:	f7f9 fa2d 	bl	800107c <HAL_Delay>
  return USBH_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	212c      	movs	r1, #44	; 0x2c
 8007c4a:	fb01 f303 	mul.w	r3, r1, r3
 8007c4e:	4413      	add	r3, r2
 8007c50:	333b      	adds	r3, #59	; 0x3b
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d009      	beq.n	8007c6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	212c      	movs	r1, #44	; 0x2c
 8007c5e:	fb01 f303 	mul.w	r3, r1, r3
 8007c62:	4413      	add	r3, r2
 8007c64:	3354      	adds	r3, #84	; 0x54
 8007c66:	78ba      	ldrb	r2, [r7, #2]
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e008      	b.n	8007c7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	212c      	movs	r1, #44	; 0x2c
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	3355      	adds	r3, #85	; 0x55
 8007c7a:	78ba      	ldrb	r2, [r7, #2]
 8007c7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7f9 f9f1 	bl	800107c <HAL_Delay>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d817      	bhi.n	8007ce8 <USBH_Get_USB_Status+0x44>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <USBH_Get_USB_Status+0x1c>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007cd7 	.word	0x08007cd7
 8007cc8:	08007cdd 	.word	0x08007cdd
 8007ccc:	08007ce3 	.word	0x08007ce3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd4:	e00b      	b.n	8007cee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cda:	e008      	b.n	8007cee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce0:	e005      	b.n	8007cee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce6:	e002      	b.n	8007cee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	73fb      	strb	r3, [r7, #15]
    break;
 8007cec:	bf00      	nop
  }
  return usb_status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	e001      	b.n	8007d1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	2101      	movs	r1, #1
 8007d20:	4803      	ldr	r0, [pc, #12]	; (8007d30 <MX_DriverVbusFS+0x34>)
 8007d22:	f7f9 fcaf 	bl	8001684 <HAL_GPIO_WritePin>
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40020800 	.word	0x40020800

08007d34 <__errno>:
 8007d34:	4b01      	ldr	r3, [pc, #4]	; (8007d3c <__errno+0x8>)
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	2000002c 	.word	0x2000002c

08007d40 <__libc_init_array>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4d0d      	ldr	r5, [pc, #52]	; (8007d78 <__libc_init_array+0x38>)
 8007d44:	4c0d      	ldr	r4, [pc, #52]	; (8007d7c <__libc_init_array+0x3c>)
 8007d46:	1b64      	subs	r4, r4, r5
 8007d48:	10a4      	asrs	r4, r4, #2
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	d109      	bne.n	8007d64 <__libc_init_array+0x24>
 8007d50:	4d0b      	ldr	r5, [pc, #44]	; (8007d80 <__libc_init_array+0x40>)
 8007d52:	4c0c      	ldr	r4, [pc, #48]	; (8007d84 <__libc_init_array+0x44>)
 8007d54:	f000 f92e 	bl	8007fb4 <_init>
 8007d58:	1b64      	subs	r4, r4, r5
 8007d5a:	10a4      	asrs	r4, r4, #2
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	d105      	bne.n	8007d6e <__libc_init_array+0x2e>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d68:	4798      	blx	r3
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7ee      	b.n	8007d4c <__libc_init_array+0xc>
 8007d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d72:	4798      	blx	r3
 8007d74:	3601      	adds	r6, #1
 8007d76:	e7f2      	b.n	8007d5e <__libc_init_array+0x1e>
 8007d78:	08007ff0 	.word	0x08007ff0
 8007d7c:	08007ff0 	.word	0x08007ff0
 8007d80:	08007ff0 	.word	0x08007ff0
 8007d84:	08007ff4 	.word	0x08007ff4

08007d88 <malloc>:
 8007d88:	4b02      	ldr	r3, [pc, #8]	; (8007d94 <malloc+0xc>)
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f000 b87f 	b.w	8007e90 <_malloc_r>
 8007d92:	bf00      	nop
 8007d94:	2000002c 	.word	0x2000002c

08007d98 <free>:
 8007d98:	4b02      	ldr	r3, [pc, #8]	; (8007da4 <free+0xc>)
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	f000 b80b 	b.w	8007db8 <_free_r>
 8007da2:	bf00      	nop
 8007da4:	2000002c 	.word	0x2000002c

08007da8 <memset>:
 8007da8:	4402      	add	r2, r0
 8007daa:	4603      	mov	r3, r0
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d100      	bne.n	8007db2 <memset+0xa>
 8007db0:	4770      	bx	lr
 8007db2:	f803 1b01 	strb.w	r1, [r3], #1
 8007db6:	e7f9      	b.n	8007dac <memset+0x4>

08007db8 <_free_r>:
 8007db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d044      	beq.n	8007e48 <_free_r+0x90>
 8007dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc2:	9001      	str	r0, [sp, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dca:	bfb8      	it	lt
 8007dcc:	18e4      	addlt	r4, r4, r3
 8007dce:	f000 f8e3 	bl	8007f98 <__malloc_lock>
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <_free_r+0x94>)
 8007dd4:	9801      	ldr	r0, [sp, #4]
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	b933      	cbnz	r3, 8007de8 <_free_r+0x30>
 8007dda:	6063      	str	r3, [r4, #4]
 8007ddc:	6014      	str	r4, [r2, #0]
 8007dde:	b003      	add	sp, #12
 8007de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007de4:	f000 b8de 	b.w	8007fa4 <__malloc_unlock>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d908      	bls.n	8007dfe <_free_r+0x46>
 8007dec:	6825      	ldr	r5, [r4, #0]
 8007dee:	1961      	adds	r1, r4, r5
 8007df0:	428b      	cmp	r3, r1
 8007df2:	bf01      	itttt	eq
 8007df4:	6819      	ldreq	r1, [r3, #0]
 8007df6:	685b      	ldreq	r3, [r3, #4]
 8007df8:	1949      	addeq	r1, r1, r5
 8007dfa:	6021      	streq	r1, [r4, #0]
 8007dfc:	e7ed      	b.n	8007dda <_free_r+0x22>
 8007dfe:	461a      	mov	r2, r3
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	b10b      	cbz	r3, 8007e08 <_free_r+0x50>
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d9fa      	bls.n	8007dfe <_free_r+0x46>
 8007e08:	6811      	ldr	r1, [r2, #0]
 8007e0a:	1855      	adds	r5, r2, r1
 8007e0c:	42a5      	cmp	r5, r4
 8007e0e:	d10b      	bne.n	8007e28 <_free_r+0x70>
 8007e10:	6824      	ldr	r4, [r4, #0]
 8007e12:	4421      	add	r1, r4
 8007e14:	1854      	adds	r4, r2, r1
 8007e16:	42a3      	cmp	r3, r4
 8007e18:	6011      	str	r1, [r2, #0]
 8007e1a:	d1e0      	bne.n	8007dde <_free_r+0x26>
 8007e1c:	681c      	ldr	r4, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	6053      	str	r3, [r2, #4]
 8007e22:	4421      	add	r1, r4
 8007e24:	6011      	str	r1, [r2, #0]
 8007e26:	e7da      	b.n	8007dde <_free_r+0x26>
 8007e28:	d902      	bls.n	8007e30 <_free_r+0x78>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	e7d6      	b.n	8007dde <_free_r+0x26>
 8007e30:	6825      	ldr	r5, [r4, #0]
 8007e32:	1961      	adds	r1, r4, r5
 8007e34:	428b      	cmp	r3, r1
 8007e36:	bf04      	itt	eq
 8007e38:	6819      	ldreq	r1, [r3, #0]
 8007e3a:	685b      	ldreq	r3, [r3, #4]
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	bf04      	itt	eq
 8007e40:	1949      	addeq	r1, r1, r5
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	6054      	str	r4, [r2, #4]
 8007e46:	e7ca      	b.n	8007dde <_free_r+0x26>
 8007e48:	b003      	add	sp, #12
 8007e4a:	bd30      	pop	{r4, r5, pc}
 8007e4c:	200008e0 	.word	0x200008e0

08007e50 <sbrk_aligned>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	4e0e      	ldr	r6, [pc, #56]	; (8007e8c <sbrk_aligned+0x3c>)
 8007e54:	460c      	mov	r4, r1
 8007e56:	6831      	ldr	r1, [r6, #0]
 8007e58:	4605      	mov	r5, r0
 8007e5a:	b911      	cbnz	r1, 8007e62 <sbrk_aligned+0x12>
 8007e5c:	f000 f88c 	bl	8007f78 <_sbrk_r>
 8007e60:	6030      	str	r0, [r6, #0]
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f887 	bl	8007f78 <_sbrk_r>
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	d00a      	beq.n	8007e84 <sbrk_aligned+0x34>
 8007e6e:	1cc4      	adds	r4, r0, #3
 8007e70:	f024 0403 	bic.w	r4, r4, #3
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d007      	beq.n	8007e88 <sbrk_aligned+0x38>
 8007e78:	1a21      	subs	r1, r4, r0
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f000 f87c 	bl	8007f78 <_sbrk_r>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d101      	bne.n	8007e88 <sbrk_aligned+0x38>
 8007e84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007e88:	4620      	mov	r0, r4
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	200008e4 	.word	0x200008e4

08007e90 <_malloc_r>:
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	1ccd      	adds	r5, r1, #3
 8007e96:	f025 0503 	bic.w	r5, r5, #3
 8007e9a:	3508      	adds	r5, #8
 8007e9c:	2d0c      	cmp	r5, #12
 8007e9e:	bf38      	it	cc
 8007ea0:	250c      	movcc	r5, #12
 8007ea2:	2d00      	cmp	r5, #0
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	db01      	blt.n	8007eac <_malloc_r+0x1c>
 8007ea8:	42a9      	cmp	r1, r5
 8007eaa:	d905      	bls.n	8007eb8 <_malloc_r+0x28>
 8007eac:	230c      	movs	r3, #12
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	4e2e      	ldr	r6, [pc, #184]	; (8007f74 <_malloc_r+0xe4>)
 8007eba:	f000 f86d 	bl	8007f98 <__malloc_lock>
 8007ebe:	6833      	ldr	r3, [r6, #0]
 8007ec0:	461c      	mov	r4, r3
 8007ec2:	bb34      	cbnz	r4, 8007f12 <_malloc_r+0x82>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ffc2 	bl	8007e50 <sbrk_aligned>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	4604      	mov	r4, r0
 8007ed0:	d14d      	bne.n	8007f6e <_malloc_r+0xde>
 8007ed2:	6834      	ldr	r4, [r6, #0]
 8007ed4:	4626      	mov	r6, r4
 8007ed6:	2e00      	cmp	r6, #0
 8007ed8:	d140      	bne.n	8007f5c <_malloc_r+0xcc>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	4631      	mov	r1, r6
 8007ede:	4638      	mov	r0, r7
 8007ee0:	eb04 0803 	add.w	r8, r4, r3
 8007ee4:	f000 f848 	bl	8007f78 <_sbrk_r>
 8007ee8:	4580      	cmp	r8, r0
 8007eea:	d13a      	bne.n	8007f62 <_malloc_r+0xd2>
 8007eec:	6821      	ldr	r1, [r4, #0]
 8007eee:	3503      	adds	r5, #3
 8007ef0:	1a6d      	subs	r5, r5, r1
 8007ef2:	f025 0503 	bic.w	r5, r5, #3
 8007ef6:	3508      	adds	r5, #8
 8007ef8:	2d0c      	cmp	r5, #12
 8007efa:	bf38      	it	cc
 8007efc:	250c      	movcc	r5, #12
 8007efe:	4629      	mov	r1, r5
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7ff ffa5 	bl	8007e50 <sbrk_aligned>
 8007f06:	3001      	adds	r0, #1
 8007f08:	d02b      	beq.n	8007f62 <_malloc_r+0xd2>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	442b      	add	r3, r5
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	e00e      	b.n	8007f30 <_malloc_r+0xa0>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	1b52      	subs	r2, r2, r5
 8007f16:	d41e      	bmi.n	8007f56 <_malloc_r+0xc6>
 8007f18:	2a0b      	cmp	r2, #11
 8007f1a:	d916      	bls.n	8007f4a <_malloc_r+0xba>
 8007f1c:	1961      	adds	r1, r4, r5
 8007f1e:	42a3      	cmp	r3, r4
 8007f20:	6025      	str	r5, [r4, #0]
 8007f22:	bf18      	it	ne
 8007f24:	6059      	strne	r1, [r3, #4]
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	bf08      	it	eq
 8007f2a:	6031      	streq	r1, [r6, #0]
 8007f2c:	5162      	str	r2, [r4, r5]
 8007f2e:	604b      	str	r3, [r1, #4]
 8007f30:	4638      	mov	r0, r7
 8007f32:	f104 060b 	add.w	r6, r4, #11
 8007f36:	f000 f835 	bl	8007fa4 <__malloc_unlock>
 8007f3a:	f026 0607 	bic.w	r6, r6, #7
 8007f3e:	1d23      	adds	r3, r4, #4
 8007f40:	1af2      	subs	r2, r6, r3
 8007f42:	d0b6      	beq.n	8007eb2 <_malloc_r+0x22>
 8007f44:	1b9b      	subs	r3, r3, r6
 8007f46:	50a3      	str	r3, [r4, r2]
 8007f48:	e7b3      	b.n	8007eb2 <_malloc_r+0x22>
 8007f4a:	6862      	ldr	r2, [r4, #4]
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	bf0c      	ite	eq
 8007f50:	6032      	streq	r2, [r6, #0]
 8007f52:	605a      	strne	r2, [r3, #4]
 8007f54:	e7ec      	b.n	8007f30 <_malloc_r+0xa0>
 8007f56:	4623      	mov	r3, r4
 8007f58:	6864      	ldr	r4, [r4, #4]
 8007f5a:	e7b2      	b.n	8007ec2 <_malloc_r+0x32>
 8007f5c:	4634      	mov	r4, r6
 8007f5e:	6876      	ldr	r6, [r6, #4]
 8007f60:	e7b9      	b.n	8007ed6 <_malloc_r+0x46>
 8007f62:	230c      	movs	r3, #12
 8007f64:	603b      	str	r3, [r7, #0]
 8007f66:	4638      	mov	r0, r7
 8007f68:	f000 f81c 	bl	8007fa4 <__malloc_unlock>
 8007f6c:	e7a1      	b.n	8007eb2 <_malloc_r+0x22>
 8007f6e:	6025      	str	r5, [r4, #0]
 8007f70:	e7de      	b.n	8007f30 <_malloc_r+0xa0>
 8007f72:	bf00      	nop
 8007f74:	200008e0 	.word	0x200008e0

08007f78 <_sbrk_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	; (8007f94 <_sbrk_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7f8 ff96 	bl	8000eb4 <_sbrk>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_sbrk_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_sbrk_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	200008e8 	.word	0x200008e8

08007f98 <__malloc_lock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_lock+0x8>)
 8007f9a:	f000 b809 	b.w	8007fb0 <__retarget_lock_acquire_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200008ec 	.word	0x200008ec

08007fa4 <__malloc_unlock>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__malloc_unlock+0x8>)
 8007fa6:	f000 b804 	b.w	8007fb2 <__retarget_lock_release_recursive>
 8007faa:	bf00      	nop
 8007fac:	200008ec 	.word	0x200008ec

08007fb0 <__retarget_lock_acquire_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <__retarget_lock_release_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <_init>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	bf00      	nop
 8007fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fba:	bc08      	pop	{r3}
 8007fbc:	469e      	mov	lr, r3
 8007fbe:	4770      	bx	lr

08007fc0 <_fini>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr
