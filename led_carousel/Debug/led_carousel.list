
led_carousel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e2c  08008e2c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e34  08008e34  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  20000094  08008ed0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08008ed0  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a64d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cdb  00000000  00000000  0003a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0003e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  0003fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c19  00000000  00000000  00040fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccfc  00000000  00000000  0005abc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096efb  00000000  00000000  000778c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e7c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006268  00000000  00000000  0010e810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008de8 	.word	0x08008de8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	08008de8 	.word	0x08008de8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PFP */
volatile bool pressed = false;
volatile bool direction = true; // true - clockwise

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != PUSH_BUTTON_Pin) {
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d132      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x76>
		return;
	}

	static uint32_t last_tick;
	if (HAL_GetTick() - last_tick < DEBOUNCE_THRESHOLD) {
 80004ec:	f000 fece 	bl	800128c <HAL_GetTick>
 80004f0:	4602      	mov	r2, r0
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_GPIO_EXTI_Callback+0x84>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	2b31      	cmp	r3, #49	; 0x31
 80004fa:	d92c      	bls.n	8000556 <HAL_GPIO_EXTI_Callback+0x7a>
		return;
	}

	last_tick = HAL_GetTick();
 80004fc:	f000 fec6 	bl	800128c <HAL_GetTick>
 8000500:	4603      	mov	r3, r0
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_GPIO_EXTI_Callback+0x84>)
 8000504:	6013      	str	r3, [r2, #0]

	if (pressed) {
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_GPIO_EXTI_Callback+0x88>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00f      	beq.n	8000530 <HAL_GPIO_EXTI_Callback+0x54>
		direction = !direction;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_GPIO_EXTI_Callback+0x8c>)
 800052e:	701a      	strb	r2, [r3, #0]
	}

	pressed = !pressed;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_GPIO_EXTI_Callback+0x88>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_GPIO_EXTI_Callback+0x88>)
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e002      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x7c>
		return;
 8000552:	bf00      	nop
 8000554:	e000      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x7c>
		return;
 8000556:	bf00      	nop
}
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000238 	.word	0x20000238
 8000564:	20000234 	.word	0x20000234
 8000568:	20000000 	.word	0x20000000

0800056c <get_current_direction.1>:
{
	/* USER CODE BEGIN 1 */
	volatile uint32_t *tim4_ccrx[] = {&TIM4->CCR1, &TIM4->CCR2, &TIM4->CCR3, &TIM4->CCR4};
	static uint8_t curr_led = 0;

	bool get_current_direction() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_NVIC_DisableIRQ(PUSH_BUTTON_EXTI_IRQn);
 8000576:	2006      	movs	r0, #6
 8000578:	f000 ffe1 	bl	800153e <HAL_NVIC_DisableIRQ>
		bool current_direction = direction;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <get_current_direction.1+0x28>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	73fb      	strb	r3, [r7, #15]
		HAL_NVIC_EnableIRQ(PUSH_BUTTON_EXTI_IRQn);
 8000582:	2006      	movs	r0, #6
 8000584:	f000 ffcd 	bl	8001522 <HAL_NVIC_EnableIRQ>

		return current_direction;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
	}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000

08000598 <main>:
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b087      	sub	sp, #28
 800059c:	af00      	add	r7, sp, #0
int main(void)
 800059e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a2:	617b      	str	r3, [r7, #20]
	volatile uint32_t *tim4_ccrx[] = {&TIM4->CCR1, &TIM4->CCR2, &TIM4->CCR3, &TIM4->CCR4};
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <main+0x94>)
 80005a6:	1d3c      	adds	r4, r7, #4
 80005a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fe07 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f8ad 	bl	8000710 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005b6:	f000 f913 	bl	80007e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa8b 	bl	8000ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005be:	f000 f92f 	bl	8000820 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005c2:	f000 f95b 	bl	800087c <MX_I2S2_Init>
  MX_I2S3_Init();
 80005c6:	f000 f987 	bl	80008d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ca:	f000 f9b5 	bl	8000938 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005ce:	f007 ffc3 	bl	8008558 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80005d2:	f000 f9e7 	bl	80009a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 80005d6:	2100      	movs	r1, #0
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0x98>)
 80005da:	f004 fa75 	bl	8004ac8 <HAL_TIM_PWM_Start>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x50>
	  Error_Handler();
 80005e4:	f000 fb56 	bl	8000c94 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK) {
 80005e8:	2104      	movs	r1, #4
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0x98>)
 80005ec:	f004 fa6c 	bl	8004ac8 <HAL_TIM_PWM_Start>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <main+0x62>
	  Error_Handler();
 80005f6:	f000 fb4d 	bl	8000c94 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK) {
 80005fa:	2108      	movs	r1, #8
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x98>)
 80005fe:	f004 fa63 	bl	8004ac8 <HAL_TIM_PWM_Start>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <main+0x74>
	  Error_Handler();
 8000608:	f000 fb44 	bl	8000c94 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK) {
 800060c:	210c      	movs	r1, #12
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <main+0x98>)
 8000610:	f004 fa5a 	bl	8004ac8 <HAL_TIM_PWM_Start>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <main+0x86>
	  Error_Handler();
 800061a:	f000 fb3b 	bl	8000c94 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  run_carousel();
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	469c      	mov	ip, r3
 8000622:	f000 f845 	bl	80006b0 <run_carousel.0>
	  /* USER CODE END WHILE */
	  MX_USB_HOST_Process();
 8000626:	f007 ffbd 	bl	80085a4 <MX_USB_HOST_Process>
	  run_carousel();
 800062a:	e7f8      	b.n	800061e <main+0x86>
 800062c:	08008e00 	.word	0x08008e00
 8000630:	200001ec 	.word	0x200001ec

08000634 <run_pwm.2>:
	void run_pwm() {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4663      	mov	r3, ip
 800063c:	f8c7 c004 	str.w	ip, [r7, #4]
		volatile uint32_t *led = tim4_ccrx[curr_led];
 8000640:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <run_pwm.2+0x70>)
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000648:	60fb      	str	r3, [r7, #12]
		for (; *led <= TIM4->ARR; *led += BRIGHTNESS_STEP)
 800064a:	e00d      	b.n	8000668 <run_pwm.2+0x34>
			HAL_Delay(PWM_DELAY);
 800064c:	200f      	movs	r0, #15
 800064e:	f000 fe29 	bl	80012a4 <HAL_Delay>
		for (; *led <= TIM4->ARR; *led += BRIGHTNESS_STEP)
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <run_pwm.2+0x74>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <run_pwm.2+0x78>)
 8000658:	fba2 2303 	umull	r2, r3, r2, r3
 800065c:	091a      	lsrs	r2, r3, #4
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	441a      	add	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <run_pwm.2+0x74>)
 800066e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000670:	429a      	cmp	r2, r3
 8000672:	d9eb      	bls.n	800064c <run_pwm.2+0x18>
		for (; *led > 0; *led -= BRIGHTNESS_STEP)
 8000674:	e00d      	b.n	8000692 <run_pwm.2+0x5e>
			HAL_Delay(PWM_DELAY);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 fe14 	bl	80012a4 <HAL_Delay>
		for (; *led > 0; *led -= BRIGHTNESS_STEP)
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <run_pwm.2+0x74>)
 800067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <run_pwm.2+0x78>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	091b      	lsrs	r3, r3, #4
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	1ad2      	subs	r2, r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1ed      	bne.n	8000676 <run_pwm.2+0x42>
	}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000023c 	.word	0x2000023c
 80006a8:	40000800 	.word	0x40000800
 80006ac:	cccccccd 	.word	0xcccccccd

080006b0 <run_carousel.0>:
	void run_carousel () {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4664      	mov	r4, ip
 80006b8:	f8c7 c004 	str.w	ip, [r7, #4]
		if (get_current_direction()) {
 80006bc:	46a4      	mov	ip, r4
 80006be:	f7ff ff55 	bl	800056c <get_current_direction.1>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00d      	beq.n	80006e4 <run_carousel.0+0x34>
			curr_led = (curr_led + 1) % 4;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <run_carousel.0+0x5c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	425a      	negs	r2, r3
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	f002 0203 	and.w	r2, r2, #3
 80006d8:	bf58      	it	pl
 80006da:	4253      	negpl	r3, r2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <run_carousel.0+0x5c>)
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e00c      	b.n	80006fe <run_carousel.0+0x4e>
			curr_led = (curr_led + 3) % 4;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <run_carousel.0+0x5c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	3303      	adds	r3, #3
 80006ea:	425a      	negs	r2, r3
 80006ec:	f003 0303 	and.w	r3, r3, #3
 80006f0:	f002 0203 	and.w	r2, r2, #3
 80006f4:	bf58      	it	pl
 80006f6:	4253      	negpl	r3, r2
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <run_carousel.0+0x5c>)
 80006fc:	701a      	strb	r2, [r3, #0]
		run_pwm();
 80006fe:	46a4      	mov	ip, r4
 8000700:	f7ff ff98 	bl	8000634 <run_pwm.2>
	}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	2000023c 	.word	0x2000023c

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f008 fa5c 	bl	8008bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <SystemClock_Config+0xc8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <SystemClock_Config+0xc8>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <SystemClock_Config+0xc8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <SystemClock_Config+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a20      	ldr	r2, [pc, #128]	; (80007dc <SystemClock_Config+0xcc>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <SystemClock_Config+0xcc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000784:	23c0      	movs	r3, #192	; 0xc0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000788:	2304      	movs	r3, #4
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fa91 	bl	8003cbc <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a0:	f000 fa78 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2103      	movs	r1, #3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fcf3 	bl	80041ac <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007cc:	f000 fa62 	bl	8000c94 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007f6:	2301      	movs	r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007fa:	23c8      	movs	r3, #200	; 0xc8
 80007fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007fe:	2305      	movs	r3, #5
 8000800:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fedb 	bl	80045c4 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000814:	f000 fa3e 	bl	8000c94 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f002 fc49 	bl	80030f4 <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 fa14 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000b0 	.word	0x200000b0
 8000874:	40005400 	.word	0x40005400
 8000878:	000186a0 	.word	0x000186a0

0800087c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2S2_Init+0x50>)
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MX_I2S2_Init+0x54>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2S2_Init+0x50>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2S2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_I2S2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_I2S2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_I2S2_Init+0x50>)
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <MX_I2S2_Init+0x58>)
 80008a4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_I2S2_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_I2S2_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_I2S2_Init+0x50>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_I2S2_Init+0x50>)
 80008ba:	f002 fd5f 	bl	800337c <HAL_I2S_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008c4:	f000 f9e6 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000104 	.word	0x20000104
 80008d0:	40003800 	.word	0x40003800
 80008d4:	00017700 	.word	0x00017700

080008d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_I2S3_Init+0x54>)
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <MX_I2S3_Init+0x58>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2S3_Init+0x54>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_I2S3_Init+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_I2S3_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_I2S3_Init+0x54>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_I2S3_Init+0x54>)
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <MX_I2S3_Init+0x5c>)
 8000902:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_I2S3_Init+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_I2S3_Init+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_I2S3_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2S3_Init+0x54>)
 8000918:	f002 fd30 	bl	800337c <HAL_I2S_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000922:	f000 f9b7 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000014c 	.word	0x2000014c
 8000930:	40003c00 	.word	0x40003c00
 8000934:	00017700 	.word	0x00017700

08000938 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI1_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x64>)
 800098a:	f003 ff6b 	bl	8004864 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 f97e 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000194 	.word	0x20000194
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d4:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <MX_TIM4_Init+0x128>)
 80009d6:	4a3e      	ldr	r2, [pc, #248]	; (8000ad0 <MX_TIM4_Init+0x12c>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <MX_TIM4_Init+0x128>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <MX_TIM4_Init+0x128>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_TIM4_Init+0x128>)
 80009e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b37      	ldr	r3, [pc, #220]	; (8000acc <MX_TIM4_Init+0x128>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_TIM4_Init+0x128>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009fa:	4834      	ldr	r0, [pc, #208]	; (8000acc <MX_TIM4_Init+0x128>)
 80009fc:	f003 ffbb 	bl	8004976 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a06:	f000 f945 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a14:	4619      	mov	r1, r3
 8000a16:	482d      	ldr	r0, [pc, #180]	; (8000acc <MX_TIM4_Init+0x128>)
 8000a18:	f004 f9c8 	bl	8004dac <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 f937 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a26:	4829      	ldr	r0, [pc, #164]	; (8000acc <MX_TIM4_Init+0x128>)
 8000a28:	f003 fff4 	bl	8004a14 <HAL_TIM_PWM_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a32:	f000 f92f 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	4619      	mov	r1, r3
 8000a44:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_TIM4_Init+0x128>)
 8000a46:	f004 fd45 	bl	80054d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a50:	f000 f920 	bl	8000c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_TIM4_Init+0x128>)
 8000a6c:	f004 f8dc 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a76:	f000 f90d 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <MX_TIM4_Init+0x128>)
 8000a82:	f004 f8d1 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000a8c:	f000 f902 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2208      	movs	r2, #8
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_TIM4_Init+0x128>)
 8000a98:	f004 f8c6 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000aa2:	f000 f8f7 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM4_Init+0x128>)
 8000aae:	f004 f8bb 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000ab8:	f000 f8ec 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM4_Init+0x128>)
 8000abe:	f000 fa97 	bl	8000ff0 <HAL_TIM_MspPostInit>

}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	; 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200001ec 	.word	0x200001ec
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a63      	ldr	r2, [pc, #396]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a5c      	ldr	r2, [pc, #368]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b56      	ldr	r3, [pc, #344]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a55      	ldr	r2, [pc, #340]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b4f      	ldr	r3, [pc, #316]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <MX_GPIO_Init+0x1ac>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2108      	movs	r1, #8
 8000b96:	483b      	ldr	r0, [pc, #236]	; (8000c84 <MX_GPIO_Init+0x1b0>)
 8000b98:	f000 fe70 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4839      	ldr	r0, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x1b4>)
 8000ba2:	f000 fe6b 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4838      	ldr	r0, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x1b8>)
 8000bac:	f000 fe66 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4830      	ldr	r0, [pc, #192]	; (8000c84 <MX_GPIO_Init+0x1b0>)
 8000bc4:	f000 fcd6 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4829      	ldr	r0, [pc, #164]	; (8000c84 <MX_GPIO_Init+0x1b0>)
 8000be0:	f000 fcc8 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4822      	ldr	r0, [pc, #136]	; (8000c84 <MX_GPIO_Init+0x1b0>)
 8000bfa:	f000 fcbb 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_GPIO_Init+0x1b4>)
 8000c16:	f000 fcad 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c1e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4818      	ldr	r0, [pc, #96]	; (8000c90 <MX_GPIO_Init+0x1bc>)
 8000c30:	f000 fca0 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000c34:	2310      	movs	r3, #16
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4810      	ldr	r0, [pc, #64]	; (8000c8c <MX_GPIO_Init+0x1b8>)
 8000c4c:	f000 fc92 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c50:	2320      	movs	r3, #32
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <MX_GPIO_Init+0x1b8>)
 8000c64:	f000 fc86 	bl	8001574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f000 fc3c 	bl	80014ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c72:	2006      	movs	r0, #6
 8000c74:	f000 fc55 	bl	8001522 <HAL_NVIC_EnableIRQ>

}
 8000c78:	bf00      	nop
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	40020000 	.word	0x40020000

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f000 fbf8 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_I2C_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <HAL_I2C_MspInit+0x8c>)
 8000d4c:	f000 fc12 	bl	8001574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a59      	ldr	r2, [pc, #356]	; (8000f04 <HAL_I2S_MspInit+0x184>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d15b      	bne.n	8000e5a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
 8000da6:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df6:	2304      	movs	r3, #4
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e06:	2306      	movs	r3, #6
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483e      	ldr	r0, [pc, #248]	; (8000f0c <HAL_I2S_MspInit+0x18c>)
 8000e12:	f000 fbaf 	bl	8001574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e16:	2308      	movs	r3, #8
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e26:	2305      	movs	r3, #5
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4836      	ldr	r0, [pc, #216]	; (8000f0c <HAL_I2S_MspInit+0x18c>)
 8000e32:	f000 fb9f 	bl	8001574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <HAL_I2S_MspInit+0x190>)
 8000e54:	f000 fb8e 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e58:	e04f      	b.n	8000efa <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <HAL_I2S_MspInit+0x194>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d14a      	bne.n	8000efa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4811      	ldr	r0, [pc, #68]	; (8000f18 <HAL_I2S_MspInit+0x198>)
 8000ed4:	f000 fb4e 	bl	8001574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ed8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eea:	2306      	movs	r3, #6
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_I2S_MspInit+0x18c>)
 8000ef6:	f000 fb3d 	bl	8001574 <HAL_GPIO_Init>
}
 8000efa:	bf00      	nop
 8000efc:	3738      	adds	r7, #56	; 0x38
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40003c00 	.word	0x40003c00
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_SPI_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f76:	23e0      	movs	r3, #224	; 0xe0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f92:	f000 faef 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40013000 	.word	0x40013000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10d      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_TIM_Base_MspInit+0x40>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_TIM_Base_MspInit+0x40>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_TIM_Base_MspInit+0x40>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40000800 	.word	0x40000800
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_TIM_MspPostInit+0x68>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d11e      	bne.n	8001050 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_TIM_MspPostInit+0x6c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_TIM_MspPostInit+0x6c>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_TIM_MspPostInit+0x6c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800102e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001032:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_TIM_MspPostInit+0x70>)
 800104c:	f000 fa92 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40000800 	.word	0x40000800
 800105c:	40023800 	.word	0x40023800
 8001060:	40020c00 	.word	0x40020c00

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f8d8 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fbf7 	bl	80018b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <OTG_FS_IRQHandler+0x10>)
 80010ce:	f000 fe71 	bl	8001db4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000624 	.word	0x20000624

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f007 fd2c 	bl	8008b68 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	20000240 	.word	0x20000240
 8001144:	20000938 	.word	0x20000938

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001196:	f7ff ffd7 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f007 fceb 	bl	8008b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff f9fb 	bl	8000598 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80011b0:	08008e3c 	.word	0x08008e3c
  ldr r2, =_sbss
 80011b4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80011b8:	20000938 	.word	0x20000938

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f973 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fd54 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f999 	bl	800155a <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001240:	f000 f953 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000004 	.word	0x20000004
 800125c:	2000000c 	.word	0x2000000c
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000000c 	.word	0x2000000c
 8001288:	20000244 	.word	0x20000244

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000244 	.word	0x20000244

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db12      	blt.n	80013c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	490a      	ldr	r1, [pc, #40]	; (80013d0 <__NVIC_DisableIRQ+0x44>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	3320      	adds	r3, #32
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013b8:	f3bf 8f4f 	dsb	sy
}
 80013bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013be:	f3bf 8f6f 	isb	sy
}
 80013c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff05 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff1a 	bl	8001334 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff8e 	bl	8001428 <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff0d 	bl	8001350 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff1d 	bl	800138c <__NVIC_DisableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff94 	bl	8001490 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e159      	b.n	8001844 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8148 	bne.w	800183e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a2 	beq.w	800183e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b57      	ldr	r3, [pc, #348]	; (800185c <HAL_GPIO_Init+0x2e8>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a56      	ldr	r2, [pc, #344]	; (800185c <HAL_GPIO_Init+0x2e8>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <HAL_GPIO_Init+0x2e8>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x2ec>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_GPIO_Init+0x2f0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x202>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_GPIO_Init+0x2f4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x1fe>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_GPIO_Init+0x2f8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x1fa>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_GPIO_Init+0x2fc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x1f6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a45      	ldr	r2, [pc, #276]	; (8001874 <HAL_GPIO_Init+0x300>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x1f2>
 8001762:	2304      	movs	r3, #4
 8001764:	e008      	b.n	8001778 <HAL_GPIO_Init+0x204>
 8001766:	2307      	movs	r3, #7
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x204>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x204>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x204>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x204>
 8001776:	2300      	movs	r3, #0
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001788:	4935      	ldr	r1, [pc, #212]	; (8001860 <HAL_GPIO_Init+0x2ec>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_GPIO_Init+0x304>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <HAL_GPIO_Init+0x304>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_GPIO_Init+0x304>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_GPIO_Init+0x304>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_GPIO_Init+0x304>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180e:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_GPIO_Init+0x304>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_GPIO_Init+0x304>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_GPIO_Init+0x304>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	f67f aea2 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe04 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08f      	sub	sp, #60	; 0x3c
 80018e4:	af0a      	add	r7, sp, #40	; 0x28
 80018e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e054      	b.n	800199c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d106      	bne.n	8001912 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f006 fe81 	bl	8008614 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 feaf 	bl	8005694 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	687e      	ldr	r6, [r7, #4]
 800193e:	466d      	mov	r5, sp
 8001940:	f106 0410 	add.w	r4, r6, #16
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001950:	e885 0003 	stmia.w	r5, {r0, r1}
 8001954:	1d33      	adds	r3, r6, #4
 8001956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f003 fe29 	bl	80055b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2101      	movs	r1, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fea6 	bl	80056b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	687e      	ldr	r6, [r7, #4]
 8001972:	466d      	mov	r5, sp
 8001974:	f106 0410 	add.w	r4, r6, #16
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001984:	e885 0003 	stmia.w	r5, {r0, r1}
 8001988:	1d33      	adds	r3, r6, #4
 800198a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198c:	6838      	ldr	r0, [r7, #0]
 800198e:	f004 f82f 	bl	80059f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	70fb      	strb	r3, [r7, #3]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70bb      	strb	r3, [r7, #2]
 80019ba:	4613      	mov	r3, r2
 80019bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_HCD_HC_Init+0x28>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e076      	b.n	8001aba <HAL_HCD_HC_Init+0x116>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	333d      	adds	r3, #61	; 0x3d
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3338      	adds	r3, #56	; 0x38
 80019f4:	787a      	ldrb	r2, [r7, #1]
 80019f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3340      	adds	r3, #64	; 0x40
 8001a06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a08:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	212c      	movs	r1, #44	; 0x2c
 8001a10:	fb01 f303 	mul.w	r3, r1, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	3339      	adds	r3, #57	; 0x39
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	333f      	adds	r3, #63	; 0x3f
 8001a2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	78ba      	ldrb	r2, [r7, #2]
 8001a34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a38:	b2d0      	uxtb	r0, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	333a      	adds	r3, #58	; 0x3a
 8001a46:	4602      	mov	r2, r0
 8001a48:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da09      	bge.n	8001a66 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	333b      	adds	r3, #59	; 0x3b
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e008      	b.n	8001a78 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	333b      	adds	r3, #59	; 0x3b
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	333c      	adds	r3, #60	; 0x3c
 8001a86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a8a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	787c      	ldrb	r4, [r7, #1]
 8001a92:	78ba      	ldrb	r2, [r7, #2]
 8001a94:	78f9      	ldrb	r1, [r7, #3]
 8001a96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f004 f928 	bl	8005cfc <USB_HC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}

08001ac2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_HCD_HC_Halt+0x1e>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e00f      	b.n	8001b00 <HAL_HCD_HC_Halt+0x3e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 fb78 	bl	80061e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	70fb      	strb	r3, [r7, #3]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70bb      	strb	r3, [r7, #2]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	212c      	movs	r1, #44	; 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	333b      	adds	r3, #59	; 0x3b
 8001b30:	78ba      	ldrb	r2, [r7, #2]
 8001b32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	333f      	adds	r3, #63	; 0x3f
 8001b42:	787a      	ldrb	r2, [r7, #1]
 8001b44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b46:	7c3b      	ldrb	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d112      	bne.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	7f3a      	ldrb	r2, [r7, #28]
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	e008      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3342      	adds	r3, #66	; 0x42
 8001b80:	2202      	movs	r2, #2
 8001b82:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	f200 80c6 	bhi.w	8001d18 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001d05 	.word	0x08001d05
 8001b9c:	08001c09 	.word	0x08001c09
 8001ba0:	08001c87 	.word	0x08001c87
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ba4:	7c3b      	ldrb	r3, [r7, #16]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	f040 80b8 	bne.w	8001d1c <HAL_HCD_HC_SubmitRequest+0x214>
 8001bac:	78bb      	ldrb	r3, [r7, #2]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80b4 	bne.w	8001d1c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bb4:	8b3b      	ldrh	r3, [r7, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3355      	adds	r3, #85	; 0x55
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3355      	adds	r3, #85	; 0x55
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	3342      	adds	r3, #66	; 0x42
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bf2:	e093      	b.n	8001d1c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	212c      	movs	r1, #44	; 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3342      	adds	r3, #66	; 0x42
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
      break;
 8001c06:	e089      	b.n	8001d1c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c08:	78bb      	ldrb	r3, [r7, #2]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11d      	bne.n	8001c4a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3355      	adds	r3, #85	; 0x55
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3342      	adds	r3, #66	; 0x42
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c34:	e073      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e069      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3354      	adds	r3, #84	; 0x54
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3342      	adds	r3, #66	; 0x42
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
      break;
 8001c70:	e055      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3342      	adds	r3, #66	; 0x42
 8001c80:	2202      	movs	r2, #2
 8001c82:	701a      	strb	r2, [r3, #0]
      break;
 8001c84:	e04b      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11d      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3355      	adds	r3, #85	; 0x55
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cb2:	e034      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e02a      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3354      	adds	r3, #84	; 0x54
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e016      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3342      	adds	r3, #66	; 0x42
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
      break;
 8001d02:	e00c      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3342      	adds	r3, #66	; 0x42
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d18:	bf00      	nop
 8001d1a:	e000      	b.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d1c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3344      	adds	r3, #68	; 0x44
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	8b3a      	ldrh	r2, [r7, #24]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	202c      	movs	r0, #44	; 0x2c
 8001d38:	fb00 f303 	mul.w	r3, r0, r3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	334c      	adds	r3, #76	; 0x4c
 8001d40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3360      	adds	r3, #96	; 0x60
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3350      	adds	r3, #80	; 0x50
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	212c      	movs	r1, #44	; 0x2c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	3339      	adds	r3, #57	; 0x39
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3361      	adds	r3, #97	; 0x61
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	222c      	movs	r2, #44	; 0x2c
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	3338      	adds	r3, #56	; 0x38
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	18d1      	adds	r1, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	f004 f8cc 	bl	8005f40 <USB_HC_StartXfer>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop

08001db4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fdcd 	bl	800596a <USB_GetMode>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f040 80f6 	bne.w	8001fc4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fdb1 	bl	8005944 <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80ec 	beq.w	8001fc2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fda8 	bl	8005944 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dfe:	d104      	bne.n	8001e0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fd98 	bl	8005944 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e1e:	d104      	bne.n	8001e2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fd88 	bl	8005944 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e3e:	d104      	bne.n	8001e4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fd78 	bl	8005944 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d103      	bne.n	8001e66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2202      	movs	r2, #2
 8001e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fd6a 	bl	8005944 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e7a:	d11c      	bne.n	8001eb6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10f      	bne.n	8001eb6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e96:	2110      	movs	r1, #16
 8001e98:	6938      	ldr	r0, [r7, #16]
 8001e9a:	f003 fc59 	bl	8005750 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e9e:	6938      	ldr	r0, [r7, #16]
 8001ea0:	f003 fc8a 	bl	80057b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fe60 	bl	8005b70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f006 fc2d 	bl	8008710 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fd42 	bl	8005944 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eca:	d102      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f001 f89e 	bl	800300e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fd34 	bl	8005944 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d106      	bne.n	8001ef4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f006 fbf6 	bl	80086d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fd23 	bl	8005944 <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d101      	bne.n	8001f0c <HAL_HCD_IRQHandler+0x158>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_HCD_IRQHandler+0x15a>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0210 	bic.w	r2, r2, #16
 8001f20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 ffa1 	bl	8002e6a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0210 	orr.w	r2, r2, #16
 8001f36:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fd01 	bl	8005944 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f4c:	d13a      	bne.n	8001fc4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f936 	bl	80061c4 <USB_HC_ReadInterrupt>
 8001f58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e025      	b.n	8001fac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d018      	beq.n	8001fa6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f8a:	d106      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8ab 	bl	80020ee <HCD_HC_IN_IRQHandler>
 8001f98:	e005      	b.n	8001fa6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fbf9 	bl	8002798 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3d4      	bcc.n	8001f60 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	e000      	b.n	8001fc4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001fc2:	bf00      	nop
    }
  }
}
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_HCD_Start+0x16>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e013      	b.n	8002008 <HAL_HCD_Start+0x3e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fe22 	bl	8005c38 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fb3a 	bl	8005672 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_HCD_Stop+0x16>
 8002022:	2302      	movs	r3, #2
 8002024:	e00d      	b.n	8002042 <HAL_HCD_Stop+0x32>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fa10 	bl	8006458 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fdc4 	bl	8005be4 <USB_ResetPort>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3350      	adds	r3, #80	; 0x50
 80020a8:	681b      	ldr	r3, [r3, #0]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 fe08 	bl	8005cd8 <USB_GetCurrentFrame>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fde3 	bl	8005caa <USB_GetHostSpeed>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d11a      	bne.n	8002154 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	2304      	movs	r3, #4
 800212e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3361      	adds	r3, #97	; 0x61
 800213e:	2206      	movs	r2, #6
 8002140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f004 f84a 	bl	80061e6 <USB_HC_Halt>
 8002152:	e0af      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216a:	d11b      	bne.n	80021a4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	461a      	mov	r2, r3
 800217a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3361      	adds	r3, #97	; 0x61
 800218e:	2207      	movs	r2, #7
 8002190:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f004 f822 	bl	80061e6 <USB_HC_Halt>
 80021a2:	e087      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d109      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2320      	movs	r3, #32
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e072      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d11a      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	2308      	movs	r3, #8
 80021f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3361      	adds	r3, #97	; 0x61
 8002204:	2205      	movs	r2, #5
 8002206:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 ffe7 	bl	80061e6 <USB_HC_Halt>
 8002218:	e04c      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002230:	d11b      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002244:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3361      	adds	r3, #97	; 0x61
 8002254:	2208      	movs	r2, #8
 8002256:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f003 ffbf 	bl	80061e6 <USB_HC_Halt>
 8002268:	e024      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d119      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3361      	adds	r3, #97	; 0x61
 80022a0:	2206      	movs	r2, #6
 80022a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 ff99 	bl	80061e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ca:	d112      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 ff85 	bl	80061e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022f0:	e24e      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 80df 	bne.w	80024c8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3348      	adds	r3, #72	; 0x48
 8002320:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0159      	lsls	r1, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	440b      	add	r3, r1
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002334:	1ad2      	subs	r2, r2, r3
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	202c      	movs	r0, #44	; 0x2c
 800233c:	fb00 f303 	mul.w	r3, r0, r3
 8002340:	440b      	add	r3, r1
 8002342:	3350      	adds	r3, #80	; 0x50
 8002344:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3361      	adds	r3, #97	; 0x61
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	335c      	adds	r3, #92	; 0x5c
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	461a      	mov	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	333f      	adds	r3, #63	; 0x3f
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	333f      	adds	r3, #63	; 0x3f
 800239e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d111      	bne.n	80023c8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 ff19 	bl	80061e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	461a      	mov	r2, r3
 80023c2:	2310      	movs	r3, #16
 80023c4:	6093      	str	r3, [r2, #8]
 80023c6:	e03a      	b.n	800243e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	333f      	adds	r3, #63	; 0x3f
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d009      	beq.n	80023f0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	333f      	adds	r3, #63	; 0x3f
 80023ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d126      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	0151      	lsls	r1, r2, #5
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	440a      	add	r2, r1
 8002406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800240e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3360      	adds	r3, #96	; 0x60
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	b2d9      	uxtb	r1, r3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	202c      	movs	r0, #44	; 0x2c
 800242c:	fb00 f303 	mul.w	r3, r0, r3
 8002430:	4413      	add	r3, r2
 8002432:	3360      	adds	r3, #96	; 0x60
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f006 f977 	bl	800872c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d12b      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3348      	adds	r3, #72	; 0x48
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	202c      	movs	r0, #44	; 0x2c
 800245c:	fb00 f202 	mul.w	r2, r0, r2
 8002460:	440a      	add	r2, r1
 8002462:	3240      	adds	r2, #64	; 0x40
 8002464:	8812      	ldrh	r2, [r2, #0]
 8002466:	fbb3 f3f2 	udiv	r3, r3, r2
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 818e 	beq.w	8002790 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3354      	adds	r3, #84	; 0x54
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3354      	adds	r3, #84	; 0x54
 8002498:	4602      	mov	r2, r0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	e178      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3354      	adds	r3, #84	; 0x54
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3354      	adds	r3, #84	; 0x54
 80024c2:	4602      	mov	r2, r0
 80024c4:	701a      	strb	r2, [r3, #0]
}
 80024c6:	e163      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	f040 80f6 	bne.w	80026cc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d109      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e0c9      	b.n	800269c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d109      	bne.n	8002530 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3360      	adds	r3, #96	; 0x60
 800252a:	2205      	movs	r2, #5
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e0b5      	b.n	800269c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3361      	adds	r3, #97	; 0x61
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b06      	cmp	r3, #6
 8002542:	d009      	beq.n	8002558 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3361      	adds	r3, #97	; 0x61
 8002552:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002554:	2b08      	cmp	r3, #8
 8002556:	d150      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	335c      	adds	r3, #92	; 0x5c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	202c      	movs	r0, #44	; 0x2c
 8002570:	fb00 f303 	mul.w	r3, r0, r3
 8002574:	440b      	add	r3, r1
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	335c      	adds	r3, #92	; 0x5c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d912      	bls.n	80025b4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	335c      	adds	r3, #92	; 0x5c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	2204      	movs	r2, #4
 80025b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025b2:	e073      	b.n	800269c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3360      	adds	r3, #96	; 0x60
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025dc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025e4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025f8:	e050      	b.n	800269c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3361      	adds	r3, #97	; 0x61
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d122      	bne.n	8002654 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3360      	adds	r3, #96	; 0x60
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002636:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800263e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e023      	b.n	800269c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b07      	cmp	r3, #7
 8002666:	d119      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	335c      	adds	r3, #92	; 0x5c
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	202c      	movs	r0, #44	; 0x2c
 8002680:	fb00 f303 	mul.w	r3, r0, r3
 8002684:	440b      	add	r3, r1
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3360      	adds	r3, #96	; 0x60
 8002698:	2204      	movs	r2, #4
 800269a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2302      	movs	r3, #2
 80026ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	b2d9      	uxtb	r1, r3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	202c      	movs	r0, #44	; 0x2c
 80026b8:	fb00 f303 	mul.w	r3, r0, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3360      	adds	r3, #96	; 0x60
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f006 f831 	bl	800872c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026ca:	e061      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d156      	bne.n	8002790 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	333f      	adds	r3, #63	; 0x3f
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d111      	bne.n	800271a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	335c      	adds	r3, #92	; 0x5c
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fd67 	bl	80061e6 <USB_HC_Halt>
 8002718:	e031      	b.n	800277e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	333f      	adds	r3, #63	; 0x3f
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	333f      	adds	r3, #63	; 0x3f
 800273c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800273e:	2b02      	cmp	r3, #2
 8002740:	d11d      	bne.n	800277e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	335c      	adds	r3, #92	; 0x5c
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	3361      	adds	r3, #97	; 0x61
 800276a:	2203      	movs	r2, #3
 800276c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fd34 	bl	80061e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2310      	movs	r3, #16
 800278e:	6093      	str	r3, [r2, #8]
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d11a      	bne.n	80027fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2304      	movs	r3, #4
 80027d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3361      	adds	r3, #97	; 0x61
 80027e8:	2206      	movs	r2, #6
 80027ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fcf5 	bl	80061e6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027fc:	e331      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d12e      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	2320      	movs	r3, #32
 8002824:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	333d      	adds	r3, #61	; 0x3d
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	f040 8313 	bne.w	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	333d      	adds	r3, #61	; 0x3d
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3360      	adds	r3, #96	; 0x60
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fcbb 	bl	80061e6 <USB_HC_Halt>
}
 8002870:	e2f7      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002888:	d112      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	461a      	mov	r2, r3
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fc9c 	bl	80061e6 <USB_HC_Halt>
}
 80028ae:	e2d8      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d140      	bne.n	8002948 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	335c      	adds	r3, #92	; 0x5c
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d111      	bne.n	8002912 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	2301      	movs	r3, #1
 8002922:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fc50 	bl	80061e6 <USB_HC_Halt>
}
 8002946:	e28c      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d12c      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3361      	adds	r3, #97	; 0x61
 800296c:	2204      	movs	r2, #4
 800296e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	333d      	adds	r3, #61	; 0x3d
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	335c      	adds	r3, #92	; 0x5c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fc21 	bl	80061e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	2340      	movs	r3, #64	; 0x40
 80029b4:	6093      	str	r3, [r2, #8]
}
 80029b6:	e254      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11a      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	461a      	mov	r2, r3
 80029dc:	2308      	movs	r3, #8
 80029de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3361      	adds	r3, #97	; 0x61
 80029ee:	2205      	movs	r2, #5
 80029f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fbf2 	bl	80061e6 <USB_HC_Halt>
}
 8002a02:	e22e      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d140      	bne.n	8002a9c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	335c      	adds	r3, #92	; 0x5c
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	333d      	adds	r3, #61	; 0x3d
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d112      	bne.n	8002a78 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	333c      	adds	r3, #60	; 0x3c
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d108      	bne.n	8002a78 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	333d      	adds	r3, #61	; 0x3d
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fbaf 	bl	80061e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2310      	movs	r3, #16
 8002a98:	6093      	str	r3, [r2, #8]
}
 8002a9a:	e1e2      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d164      	bne.n	8002b7c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d111      	bne.n	8002ade <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3361      	adds	r3, #97	; 0x61
 8002ac8:	2206      	movs	r2, #6
 8002aca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fb85 	bl	80061e6 <USB_HC_Halt>
 8002adc:	e044      	b.n	8002b68 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	335c      	adds	r3, #92	; 0x5c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	202c      	movs	r0, #44	; 0x2c
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	440b      	add	r3, r1
 8002afc:	335c      	adds	r3, #92	; 0x5c
 8002afe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d920      	bls.n	8002b56 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	335c      	adds	r3, #92	; 0x5c
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3360      	adds	r3, #96	; 0x60
 8002b34:	2204      	movs	r2, #4
 8002b36:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	b2d9      	uxtb	r1, r3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	202c      	movs	r0, #44	; 0x2c
 8002b42:	fb00 f303 	mul.w	r3, r0, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f005 fdec 	bl	800872c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b54:	e008      	b.n	8002b68 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3360      	adds	r3, #96	; 0x60
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	6093      	str	r3, [r2, #8]
}
 8002b7a:	e172      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d11b      	bne.n	8002bcc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3361      	adds	r3, #97	; 0x61
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fb18 	bl	80061e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	6093      	str	r3, [r2, #8]
}
 8002bca:	e14a      	b.n	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	f040 813f 	bne.w	8002e62 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3361      	adds	r3, #97	; 0x61
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d17d      	bne.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	333f      	adds	r3, #63	; 0x3f
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d00a      	beq.n	8002c34 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	333f      	adds	r3, #63	; 0x3f
 8002c2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	f040 8100 	bne.w	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d113      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3355      	adds	r3, #85	; 0x55
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2d8      	uxtb	r0, r3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3355      	adds	r3, #85	; 0x55
 8002c60:	4602      	mov	r2, r0
 8002c62:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f040 80e3 	bne.w	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	334c      	adds	r3, #76	; 0x4c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80d8 	beq.w	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	334c      	adds	r3, #76	; 0x4c
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	202c      	movs	r0, #44	; 0x2c
 8002c9a:	fb00 f202 	mul.w	r2, r0, r2
 8002c9e:	440a      	add	r2, r1
 8002ca0:	3240      	adds	r2, #64	; 0x40
 8002ca2:	8812      	ldrh	r2, [r2, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	202c      	movs	r0, #44	; 0x2c
 8002cae:	fb00 f202 	mul.w	r2, r0, r2
 8002cb2:	440a      	add	r2, r1
 8002cb4:	3240      	adds	r2, #64	; 0x40
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80b5 	beq.w	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3355      	adds	r3, #85	; 0x55
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	f083 0301 	eor.w	r3, r3, #1
 8002cde:	b2d8      	uxtb	r0, r3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3355      	adds	r3, #85	; 0x55
 8002cee:	4602      	mov	r2, r0
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e09f      	b.n	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3361      	adds	r3, #97	; 0x61
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d109      	bne.n	8002d1c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e08b      	b.n	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3361      	adds	r3, #97	; 0x61
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d109      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3360      	adds	r3, #96	; 0x60
 8002d3e:	2202      	movs	r2, #2
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e077      	b.n	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d109      	bne.n	8002d6c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	2205      	movs	r2, #5
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e063      	b.n	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3361      	adds	r3, #97	; 0x61
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d009      	beq.n	8002d94 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3361      	adds	r3, #97	; 0x61
 8002d8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d14f      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	335c      	adds	r3, #92	; 0x5c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	202c      	movs	r0, #44	; 0x2c
 8002dac:	fb00 f303 	mul.w	r3, r0, r3
 8002db0:	440b      	add	r3, r1
 8002db2:	335c      	adds	r3, #92	; 0x5c
 8002db4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d912      	bls.n	8002df0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	335c      	adds	r3, #92	; 0x5c
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3360      	adds	r3, #96	; 0x60
 8002dea:	2204      	movs	r2, #4
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e021      	b.n	8002e34 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	2202      	movs	r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e18:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e20:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2302      	movs	r3, #2
 8002e44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	b2d9      	uxtb	r1, r3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	202c      	movs	r0, #44	; 0x2c
 8002e50:	fb00 f303 	mul.w	r3, r0, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f005 fc65 	bl	800872c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e62:	bf00      	nop
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08a      	sub	sp, #40	; 0x28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	0c5b      	lsrs	r3, r3, #17
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d004      	beq.n	8002eb0 <HCD_RXQLVL_IRQHandler+0x46>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	f000 80a9 	beq.w	8003000 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002eae:	e0aa      	b.n	8003006 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a6 	beq.w	8003004 <HCD_RXQLVL_IRQHandler+0x19a>
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3344      	adds	r3, #68	; 0x44
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 809b 	beq.w	8003004 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3350      	adds	r3, #80	; 0x50
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	441a      	add	r2, r3
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	202c      	movs	r0, #44	; 0x2c
 8002ee8:	fb00 f303 	mul.w	r3, r0, r3
 8002eec:	440b      	add	r3, r1
 8002eee:	334c      	adds	r3, #76	; 0x4c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d87a      	bhi.n	8002fec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3344      	adds	r3, #68	; 0x44
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f002 fcc0 	bl	8005894 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3344      	adds	r3, #68	; 0x44
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	441a      	add	r2, r3
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	202c      	movs	r0, #44	; 0x2c
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	440b      	add	r3, r1
 8002f34:	3344      	adds	r3, #68	; 0x44
 8002f36:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3350      	adds	r3, #80	; 0x50
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	441a      	add	r2, r3
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	202c      	movs	r0, #44	; 0x2c
 8002f52:	fb00 f303 	mul.w	r3, r0, r3
 8002f56:	440b      	add	r3, r1
 8002f58:	3350      	adds	r3, #80	; 0x50
 8002f5a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	0cdb      	lsrs	r3, r3, #19
 8002f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f70:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3340      	adds	r3, #64	; 0x40
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d13c      	bne.n	8003004 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d039      	beq.n	8003004 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fa6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3354      	adds	r3, #84	; 0x54
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3354      	adds	r3, #84	; 0x54
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	701a      	strb	r2, [r3, #0]
      break;
 8002fea:	e00b      	b.n	8003004 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
      break;
 8002ffe:	e001      	b.n	8003004 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003004:	bf00      	nop
  }
}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800303a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d10b      	bne.n	800305e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f005 fb4f 	bl	80086f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d132      	bne.n	80030ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b04      	cmp	r3, #4
 8003078:	d126      	bne.n	80030c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d113      	bne.n	80030aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003088:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308c:	d106      	bne.n	800309c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f002 fd6b 	bl	8005b70 <USB_InitFSLSPClkSel>
 800309a:	e011      	b.n	80030c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 fd64 	bl	8005b70 <USB_InitFSLSPClkSel>
 80030a8:	e00a      	b.n	80030c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d106      	bne.n	80030c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030b8:	461a      	mov	r2, r3
 80030ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f005 fb41 	bl	8008748 <HAL_HCD_PortEnabled_Callback>
 80030c6:	e002      	b.n	80030ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f005 fb4b 	bl	8008764 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d103      	bne.n	80030e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e12b      	b.n	800335e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fde8 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003158:	f001 fa20 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 800315c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a81      	ldr	r2, [pc, #516]	; (8003368 <HAL_I2C_Init+0x274>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d807      	bhi.n	8003178 <HAL_I2C_Init+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a80      	ldr	r2, [pc, #512]	; (800336c <HAL_I2C_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e006      	b.n	8003186 <HAL_I2C_Init+0x92>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a7d      	ldr	r2, [pc, #500]	; (8003370 <HAL_I2C_Init+0x27c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0e7      	b.n	800335e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a78      	ldr	r2, [pc, #480]	; (8003374 <HAL_I2C_Init+0x280>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0c9b      	lsrs	r3, r3, #18
 8003198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <HAL_I2C_Init+0x274>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d802      	bhi.n	80031c8 <HAL_I2C_Init+0xd4>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	e009      	b.n	80031dc <HAL_I2C_Init+0xe8>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <HAL_I2C_Init+0x284>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	3301      	adds	r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	495c      	ldr	r1, [pc, #368]	; (8003368 <HAL_I2C_Init+0x274>)
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d819      	bhi.n	8003230 <HAL_I2C_Init+0x13c>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e59      	subs	r1, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb1 f3f3 	udiv	r3, r1, r3
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003210:	400b      	ands	r3, r1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_I2C_Init+0x138>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e59      	subs	r1, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fbb1 f3f3 	udiv	r3, r1, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	e051      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800322c:	2304      	movs	r3, #4
 800322e:	e04f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <HAL_I2C_Init+0x168>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e012      	b.n	8003282 <HAL_I2C_Init+0x18e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	0099      	lsls	r1, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x196>
 8003286:	2301      	movs	r3, #1
 8003288:	e022      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10e      	bne.n	80032b0 <HAL_I2C_Init+0x1bc>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e58      	subs	r0, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	6809      	ldr	r1, [r1, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6911      	ldr	r1, [r2, #16]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	430b      	orrs	r3, r1
 8003312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	000186a0 	.word	0x000186a0
 800336c:	001e847f 	.word	0x001e847f
 8003370:	003d08ff 	.word	0x003d08ff
 8003374:	431bde83 	.word	0x431bde83
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e128      	b.n	80035e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a90      	ldr	r2, [pc, #576]	; (80035e8 <HAL_I2S_Init+0x26c>)
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7fd fce9 	bl	8000d80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2202      	movs	r2, #2
 80033d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d060      	beq.n	800349c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033e2:	2310      	movs	r3, #16
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e001      	b.n	80033ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d802      	bhi.n	80033fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033fa:	2001      	movs	r0, #1
 80033fc:	f001 f9d2 	bl	80047a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003400:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340a:	d125      	bne.n	8003458 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	fbb2 f2f3 	udiv	r2, r2, r3
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	3305      	adds	r3, #5
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	e01f      	b.n	8003476 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	461a      	mov	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	3305      	adds	r3, #5
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	e00e      	b.n	8003476 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	3305      	adds	r3, #5
 8003474:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4a5c      	ldr	r2, [pc, #368]	; (80035ec <HAL_I2S_Init+0x270>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	08db      	lsrs	r3, r3, #3
 8003480:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	e003      	b.n	80034a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800349c:	2302      	movs	r3, #2
 800349e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d902      	bls.n	80034b0 <HAL_I2S_Init+0x134>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2bff      	cmp	r3, #255	; 0xff
 80034ae:	d907      	bls.n	80034c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f043 0210 	orr.w	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e08f      	b.n	80035e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	ea42 0103 	orr.w	r1, r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6851      	ldr	r1, [r2, #4]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6992      	ldr	r2, [r2, #24]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003502:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d161      	bne.n	80035d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a38      	ldr	r2, [pc, #224]	; (80035f0 <HAL_I2S_Init+0x274>)
 8003510:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <HAL_I2S_Init+0x278>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_I2S_Init+0x1a4>
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_I2S_Init+0x27c>)
 800351e:	e001      	b.n	8003524 <HAL_I2S_Init+0x1a8>
 8003520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	4932      	ldr	r1, [pc, #200]	; (80035f4 <HAL_I2S_Init+0x278>)
 800352c:	428a      	cmp	r2, r1
 800352e:	d101      	bne.n	8003534 <HAL_I2S_Init+0x1b8>
 8003530:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <HAL_I2S_Init+0x27c>)
 8003532:	e001      	b.n	8003538 <HAL_I2S_Init+0x1bc>
 8003534:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003538:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800353c:	f023 030f 	bic.w	r3, r3, #15
 8003540:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_I2S_Init+0x278>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_I2S_Init+0x1d4>
 800354c:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_I2S_Init+0x27c>)
 800354e:	e001      	b.n	8003554 <HAL_I2S_Init+0x1d8>
 8003550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003554:	2202      	movs	r2, #2
 8003556:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <HAL_I2S_Init+0x278>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_I2S_Init+0x1ea>
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_I2S_Init+0x27c>)
 8003564:	e001      	b.n	800356a <HAL_I2S_Init+0x1ee>
 8003566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003576:	d003      	beq.n	8003580 <HAL_I2S_Init+0x204>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d103      	bne.n	8003588 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e001      	b.n	800358c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003596:	4313      	orrs	r3, r2
 8003598:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035aa:	4313      	orrs	r3, r2
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <HAL_I2S_Init+0x278>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_I2S_Init+0x24c>
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_I2S_Init+0x27c>)
 80035c6:	e001      	b.n	80035cc <HAL_I2S_Init+0x250>
 80035c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035cc:	897a      	ldrh	r2, [r7, #10]
 80035ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	080036f3 	.word	0x080036f3
 80035ec:	cccccccd 	.word	0xcccccccd
 80035f0:	08003809 	.word	0x08003809
 80035f4:	40003800 	.word	0x40003800
 80035f8:	40003400 	.word	0x40003400

080035fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffb8 	bl	80035fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	b292      	uxth	r2, r2
 80036a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	1c9a      	adds	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10e      	bne.n	80036ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff93 	bl	8003610 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b04      	cmp	r3, #4
 800370c:	d13a      	bne.n	8003784 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d109      	bne.n	800372c <I2S_IRQHandler+0x3a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d102      	bne.n	800372c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffb4 	bl	8003694 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d126      	bne.n	8003784 <I2S_IRQHandler+0x92>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d11f      	bne.n	8003784 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003752:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ff50 	bl	8003624 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d136      	bne.n	80037fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d109      	bne.n	80037ae <I2S_IRQHandler+0xbc>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d102      	bne.n	80037ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ff45 	bl	8003638 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d122      	bne.n	80037fe <I2S_IRQHandler+0x10c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d11b      	bne.n	80037fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	f043 0204 	orr.w	r2, r3, #4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff13 	bl	8003624 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a92      	ldr	r2, [pc, #584]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003822:	4b92      	ldr	r3, [pc, #584]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003824:	e001      	b.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a8b      	ldr	r2, [pc, #556]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003840:	4b8a      	ldr	r3, [pc, #552]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003842:	e001      	b.n	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003854:	d004      	beq.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 8099 	bne.w	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f925 	bl	8003ac4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9c8 	bl	8003c24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d13a      	bne.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d035      	beq.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038b2:	4b6e      	ldr	r3, [pc, #440]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b4:	e001      	b.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4969      	ldr	r1, [pc, #420]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c2:	428b      	cmp	r3, r1
 80038c4:	d101      	bne.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038c6:	4b69      	ldr	r3, [pc, #420]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038c8:	e001      	b.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fe88 	bl	8003624 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b08      	cmp	r3, #8
 800391c:	f040 80c3 	bne.w	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80bd 	beq.w	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800393a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a49      	ldr	r2, [pc, #292]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003946:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003948:	e001      	b.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4944      	ldr	r1, [pc, #272]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003956:	428b      	cmp	r3, r1
 8003958:	d101      	bne.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800395a:	4b44      	ldr	r3, [pc, #272]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800395c:	e001      	b.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800395e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003962:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003966:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fe4a 	bl	8003624 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003990:	e089      	b.n	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d107      	bne.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8be 	bl	8003b28 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8fd 	bl	8003bc0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d12f      	bne.n	8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d02a      	beq.n	8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039f6:	e001      	b.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4919      	ldr	r1, [pc, #100]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a08:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a0a:	e001      	b.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fdfa 	bl	8003624 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d136      	bne.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d031      	beq.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4902      	ldr	r1, [pc, #8]	; (8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a5e:	428b      	cmp	r3, r1
 8003a60:	d106      	bne.n	8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a62:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a64:	e006      	b.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a66:	bf00      	nop
 8003a68:	40003800 	.word	0x40003800
 8003a6c:	40003400 	.word	0x40003400
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a78:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fdc0 	bl	8003624 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa4:	e000      	b.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aa6:	bf00      	nop
}
 8003aa8:	bf00      	nop
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c99      	adds	r1, r3, #2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ffc9 	bl	8003ab0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c99      	adds	r1, r3, #2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6251      	str	r1, [r2, #36]	; 0x24
 8003b3a:	8819      	ldrh	r1, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <I2SEx_TxISR_I2SExt+0x90>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <I2SEx_TxISR_I2SExt+0x22>
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <I2SEx_TxISR_I2SExt+0x94>)
 8003b48:	e001      	b.n	8003b4e <I2SEx_TxISR_I2SExt+0x26>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	460a      	mov	r2, r1
 8003b50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d121      	bne.n	8003bae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <I2SEx_TxISR_I2SExt+0x90>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <I2SEx_TxISR_I2SExt+0x50>
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <I2SEx_TxISR_I2SExt+0x94>)
 8003b76:	e001      	b.n	8003b7c <I2SEx_TxISR_I2SExt+0x54>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <I2SEx_TxISR_I2SExt+0x90>)
 8003b84:	428b      	cmp	r3, r1
 8003b86:	d101      	bne.n	8003b8c <I2SEx_TxISR_I2SExt+0x64>
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <I2SEx_TxISR_I2SExt+0x94>)
 8003b8a:	e001      	b.n	8003b90 <I2SEx_TxISR_I2SExt+0x68>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff81 	bl	8003ab0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40003800 	.word	0x40003800
 8003bbc:	40003400 	.word	0x40003400

08003bc0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68d8      	ldr	r0, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	1c99      	adds	r1, r3, #2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bd8:	b282      	uxth	r2, r0
 8003bda:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d113      	bne.n	8003c1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ff4a 	bl	8003ab0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <I2SEx_RxISR_I2SExt+0x90>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d101      	bne.n	8003c3a <I2SEx_RxISR_I2SExt+0x16>
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <I2SEx_RxISR_I2SExt+0x94>)
 8003c38:	e001      	b.n	8003c3e <I2SEx_RxISR_I2SExt+0x1a>
 8003c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3e:	68d8      	ldr	r0, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	1c99      	adds	r1, r3, #2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c4a:	b282      	uxth	r2, r0
 8003c4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d121      	bne.n	8003caa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <I2SEx_RxISR_I2SExt+0x90>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <I2SEx_RxISR_I2SExt+0x50>
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <I2SEx_RxISR_I2SExt+0x94>)
 8003c72:	e001      	b.n	8003c78 <I2SEx_RxISR_I2SExt+0x54>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <I2SEx_RxISR_I2SExt+0x90>)
 8003c80:	428b      	cmp	r3, r1
 8003c82:	d101      	bne.n	8003c88 <I2SEx_RxISR_I2SExt+0x64>
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <I2SEx_RxISR_I2SExt+0x94>)
 8003c86:	e001      	b.n	8003c8c <I2SEx_RxISR_I2SExt+0x68>
 8003c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff03 	bl	8003ab0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	40003400 	.word	0x40003400

08003cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e267      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d075      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cda:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d00c      	beq.n	8003d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce6:	4b85      	ldr	r3, [pc, #532]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d112      	bne.n	8003d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf2:	4b82      	ldr	r3, [pc, #520]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	4b7e      	ldr	r3, [pc, #504]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05b      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x108>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d157      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e242      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d106      	bne.n	8003d30 <HAL_RCC_OscConfig+0x74>
 8003d22:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCC_OscConfig+0xb0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x98>
 8003d3a:	4b70      	ldr	r3, [pc, #448]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6f      	ldr	r2, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b6d      	ldr	r3, [pc, #436]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6c      	ldr	r2, [pc, #432]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0xb0>
 8003d54:	4b69      	ldr	r3, [pc, #420]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a68      	ldr	r2, [pc, #416]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b66      	ldr	r3, [pc, #408]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a65      	ldr	r2, [pc, #404]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fd fa8a 	bl	800128c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fd fa86 	bl	800128c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e207      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b5b      	ldr	r3, [pc, #364]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0xc0>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fa76 	bl	800128c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fd fa72 	bl	800128c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e1f3      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	4b51      	ldr	r3, [pc, #324]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0xe8>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d063      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d11c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dea:	4b44      	ldr	r3, [pc, #272]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d116      	bne.n	8003e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_RCC_OscConfig+0x152>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e1c7      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4937      	ldr	r1, [pc, #220]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	e03a      	b.n	8003e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2c:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCC_OscConfig+0x244>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fd fa2b 	bl	800128c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fa27 	bl	800128c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1a8      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4925      	ldr	r1, [pc, #148]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_OscConfig+0x244>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fa0a 	bl	800128c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fd fa06 	bl	800128c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e187      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d036      	beq.n	8003f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_RCC_OscConfig+0x248>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd f9ea 	bl	800128c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7fd f9e6 	bl	800128c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e167      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_OscConfig+0x240>)
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x200>
 8003eda:	e01b      	b.n	8003f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_RCC_OscConfig+0x248>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fd f9d3 	bl	800128c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	e00e      	b.n	8003f08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fd f9cf 	bl	800128c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d907      	bls.n	8003f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e150      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	42470000 	.word	0x42470000
 8003f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ea      	bne.n	8003eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8097 	beq.w	8004050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f26:	4b81      	ldr	r3, [pc, #516]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	4b7d      	ldr	r3, [pc, #500]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b7a      	ldr	r3, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	4b77      	ldr	r3, [pc, #476]	; (8004130 <HAL_RCC_OscConfig+0x474>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5e:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x474>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a73      	ldr	r2, [pc, #460]	; (8004130 <HAL_RCC_OscConfig+0x474>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd f98f 	bl	800128c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fd f98b 	bl	800128c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e10c      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_OscConfig+0x474>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2ea>
 8003f98:	4b64      	ldr	r3, [pc, #400]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a63      	ldr	r2, [pc, #396]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	e01c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x324>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x30c>
 8003fae:	4b5f      	ldr	r3, [pc, #380]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a5e      	ldr	r2, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fba:	4b5c      	ldr	r3, [pc, #368]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a5b      	ldr	r2, [pc, #364]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x324>
 8003fc8:	4b58      	ldr	r3, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a57      	ldr	r2, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	4b55      	ldr	r3, [pc, #340]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a54      	ldr	r2, [pc, #336]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fd f950 	bl	800128c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd f94c 	bl	800128c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0cb      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	4b49      	ldr	r3, [pc, #292]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0ee      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x334>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004014:	f7fd f93a 	bl	800128c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fd f936 	bl	800128c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0b5      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	4b3e      	ldr	r3, [pc, #248]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ee      	bne.n	800401c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4a38      	ldr	r2, [pc, #224]	; (800412c <HAL_RCC_OscConfig+0x470>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80a1 	beq.w	800419c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCC_OscConfig+0x470>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d05c      	beq.n	8004120 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d141      	bne.n	80040f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCC_OscConfig+0x478>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd f90a 	bl	800128c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd f906 	bl	800128c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e087      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	491b      	ldr	r1, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x470>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x478>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fd f8df 	bl	800128c <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fd f8db 	bl	800128c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e05c      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_OscConfig+0x470>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x416>
 80040f0:	e054      	b.n	800419c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x478>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fd f8c8 	bl	800128c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd f8c4 	bl	800128c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e045      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x470>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x444>
 800411e:	e03d      	b.n	800419c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e038      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
 800412c:	40023800 	.word	0x40023800
 8004130:	40007000 	.word	0x40007000
 8004134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x4ec>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d028      	beq.n	8004198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d121      	bne.n	8004198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d11a      	bne.n	8004198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800416e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004170:	4293      	cmp	r3, r2
 8004172:	d111      	bne.n	8004198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800

080041ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0cc      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c0:	4b68      	ldr	r3, [pc, #416]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d90c      	bls.n	80041e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b65      	ldr	r3, [pc, #404]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0b8      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800420a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004218:	4b53      	ldr	r3, [pc, #332]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	4b50      	ldr	r3, [pc, #320]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	494d      	ldr	r1, [pc, #308]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d044      	beq.n	80042cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d119      	bne.n	800428a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e07f      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d003      	beq.n	800426a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004266:	2b03      	cmp	r3, #3
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426a:	4b3f      	ldr	r3, [pc, #252]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e06f      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e067      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428a:	4b37      	ldr	r3, [pc, #220]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4934      	ldr	r1, [pc, #208]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800429c:	f7fc fff6 	bl	800128c <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fc fff2 	bl	800128c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e04f      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 020c 	and.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1eb      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d20c      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e032      	b.n	800435a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4916      	ldr	r1, [pc, #88]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	490e      	ldr	r1, [pc, #56]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004332:	f000 f821 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8004336:	4602      	mov	r2, r0
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	490a      	ldr	r1, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1c0>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc ff56 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023c00 	.word	0x40023c00
 8004368:	40023800 	.word	0x40023800
 800436c:	08008e14 	.word	0x08008e14
 8004370:	20000004 	.word	0x20000004
 8004374:	20000008 	.word	0x20000008

08004378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b094      	sub	sp, #80	; 0x50
 800437e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	647b      	str	r3, [r7, #68]	; 0x44
 8004384:	2300      	movs	r3, #0
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004388:	2300      	movs	r3, #0
 800438a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004390:	4b79      	ldr	r3, [pc, #484]	; (8004578 <HAL_RCC_GetSysClockFreq+0x200>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d00d      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x40>
 800439c:	2b08      	cmp	r3, #8
 800439e:	f200 80e1 	bhi.w	8004564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x34>
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043aa:	e0db      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4b73      	ldr	r3, [pc, #460]	; (800457c <HAL_RCC_GetSysClockFreq+0x204>)
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043b0:	e0db      	b.n	800456a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043b2:	4b73      	ldr	r3, [pc, #460]	; (8004580 <HAL_RCC_GetSysClockFreq+0x208>)
 80043b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043b6:	e0d8      	b.n	800456a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b8:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043c2:	4b6d      	ldr	r3, [pc, #436]	; (8004578 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d063      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ce:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	2200      	movs	r2, #0
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
 80043e2:	2300      	movs	r3, #0
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
 80043e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043ea:	4622      	mov	r2, r4
 80043ec:	462b      	mov	r3, r5
 80043ee:	f04f 0000 	mov.w	r0, #0
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	0159      	lsls	r1, r3, #5
 80043f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043fc:	0150      	lsls	r0, r2, #5
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4621      	mov	r1, r4
 8004404:	1a51      	subs	r1, r2, r1
 8004406:	6139      	str	r1, [r7, #16]
 8004408:	4629      	mov	r1, r5
 800440a:	eb63 0301 	sbc.w	r3, r3, r1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800441c:	4659      	mov	r1, fp
 800441e:	018b      	lsls	r3, r1, #6
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004426:	4651      	mov	r1, sl
 8004428:	018a      	lsls	r2, r1, #6
 800442a:	4651      	mov	r1, sl
 800442c:	ebb2 0801 	subs.w	r8, r2, r1
 8004430:	4659      	mov	r1, fp
 8004432:	eb63 0901 	sbc.w	r9, r3, r1
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444a:	4690      	mov	r8, r2
 800444c:	4699      	mov	r9, r3
 800444e:	4623      	mov	r3, r4
 8004450:	eb18 0303 	adds.w	r3, r8, r3
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	462b      	mov	r3, r5
 8004458:	eb49 0303 	adc.w	r3, r9, r3
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800446a:	4629      	mov	r1, r5
 800446c:	024b      	lsls	r3, r1, #9
 800446e:	4621      	mov	r1, r4
 8004470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004474:	4621      	mov	r1, r4
 8004476:	024a      	lsls	r2, r1, #9
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447e:	2200      	movs	r2, #0
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
 8004482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004488:	f7fb fea6 	bl	80001d8 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	e058      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004496:	4b38      	ldr	r3, [pc, #224]	; (8004578 <HAL_RCC_GetSysClockFreq+0x200>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	2200      	movs	r2, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	4611      	mov	r1, r2
 80044a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	0159      	lsls	r1, r3, #5
 80044be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c2:	0150      	lsls	r0, r2, #5
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4641      	mov	r1, r8
 80044ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ce:	4649      	mov	r1, r9
 80044d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e8:	ebb2 040a 	subs.w	r4, r2, sl
 80044ec:	eb63 050b 	sbc.w	r5, r3, fp
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	00eb      	lsls	r3, r5, #3
 80044fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fe:	00e2      	lsls	r2, r4, #3
 8004500:	4614      	mov	r4, r2
 8004502:	461d      	mov	r5, r3
 8004504:	4643      	mov	r3, r8
 8004506:	18e3      	adds	r3, r4, r3
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	464b      	mov	r3, r9
 800450c:	eb45 0303 	adc.w	r3, r5, r3
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451e:	4629      	mov	r1, r5
 8004520:	028b      	lsls	r3, r1, #10
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004528:	4621      	mov	r1, r4
 800452a:	028a      	lsls	r2, r1, #10
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	2200      	movs	r2, #0
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	61fa      	str	r2, [r7, #28]
 8004538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453c:	f7fb fe4c 	bl	80001d8 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_GetSysClockFreq+0x200>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	3301      	adds	r3, #1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004562:	e002      	b.n	800456a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetSysClockFreq+0x204>)
 8004566:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800456c:	4618      	mov	r0, r3
 800456e:	3750      	adds	r7, #80	; 0x50
 8004570:	46bd      	mov	sp, r7
 8004572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	00f42400 	.word	0x00f42400
 8004580:	007a1200 	.word	0x007a1200

08004584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <HAL_RCC_GetHCLKFreq+0x14>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a0:	f7ff fff0 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4903      	ldr	r1, [pc, #12]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40023800 	.word	0x40023800
 80045c0:	08008e24 	.word	0x08008e24

080045c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d038      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045ec:	4b68      	ldr	r3, [pc, #416]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045f2:	f7fc fe4b 	bl	800128c <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045fa:	f7fc fe47 	bl	800128c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0bd      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800460c:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	071b      	lsls	r3, r3, #28
 800462a:	495a      	ldr	r1, [pc, #360]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004632:	4b57      	ldr	r3, [pc, #348]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004638:	f7fc fe28 	bl	800128c <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004640:	f7fc fe24 	bl	800128c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e09a      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004652:	4b50      	ldr	r3, [pc, #320]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8083 	beq.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	4b48      	ldr	r3, [pc, #288]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a47      	ldr	r2, [pc, #284]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	6413      	str	r3, [r2, #64]	; 0x40
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004688:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a42      	ldr	r2, [pc, #264]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004694:	f7fc fdfa 	bl	800128c <HAL_GetTick>
 8004698:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800469c:	f7fc fdf6 	bl	800128c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e06c      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046ae:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02f      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d028      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046ee:	4a29      	ldr	r2, [pc, #164]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f4:	4b27      	ldr	r3, [pc, #156]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d114      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004700:	f7fc fdc4 	bl	800128c <HAL_GetTick>
 8004704:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fc fdc0 	bl	800128c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e034      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0ee      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004736:	d10d      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004738:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474c:	4911      	ldr	r1, [pc, #68]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
 8004752:	e005      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800475e:	6093      	str	r3, [r2, #8]
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476c:	4909      	ldr	r1, [pc, #36]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7d1a      	ldrb	r2, [r3, #20]
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004784:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	42470068 	.word	0x42470068
 8004794:	40023800 	.word	0x40023800
 8004798:	40007000 	.word	0x40007000
 800479c:	42470e40 	.word	0x42470e40
 80047a0:	424711e0 	.word	0x424711e0

080047a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d140      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d131      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047d8:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047da:	617b      	str	r3, [r7, #20]
          break;
 80047dc:	e031      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ea:	d109      	bne.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f6:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e008      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	0f1b      	lsrs	r3, r3, #28
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
          break;
 800483a:	e002      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
          break;
 8004840:	bf00      	nop
        }
      }
      break;
 8004842:	bf00      	nop
    }
  }
  return frequency;
 8004844:	697b      	ldr	r3, [r7, #20]
}
 8004846:	4618      	mov	r0, r3
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	00bb8000 	.word	0x00bb8000
 800485c:	007a1200 	.word	0x007a1200
 8004860:	00f42400 	.word	0x00f42400

08004864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07b      	b.n	800496e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d009      	beq.n	800489c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
 800488e:	e005      	b.n	800489c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fb30 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	ea42 0103 	orr.w	r1, r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0104 	and.w	r1, r3, #4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f003 0210 	and.w	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e041      	b.n	8004a0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fc fb05 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 fac1 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e041      	b.n	8004aaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f839 	bl	8004ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fa72 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_TIM_PWM_Start+0x24>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e022      	b.n	8004b32 <HAL_TIM_PWM_Start+0x6a>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d109      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x3e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e015      	b.n	8004b32 <HAL_TIM_PWM_Start+0x6a>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d109      	bne.n	8004b20 <HAL_TIM_PWM_Start+0x58>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e008      	b.n	8004b32 <HAL_TIM_PWM_Start+0x6a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e068      	b.n	8004c0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_PWM_Start+0x82>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b48:	e013      	b.n	8004b72 <HAL_TIM_PWM_Start+0xaa>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Start+0x92>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b58:	e00b      	b.n	8004b72 <HAL_TIM_PWM_Start+0xaa>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xa2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b68:	e003      	b.n	8004b72 <HAL_TIM_PWM_Start+0xaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fc84 	bl	8005488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <HAL_TIM_PWM_Start+0x14c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_TIM_PWM_Start+0x14c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x10e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d013      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x10e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <HAL_TIM_PWM_Start+0x150>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x10e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <HAL_TIM_PWM_Start+0x154>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x10e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <HAL_TIM_PWM_Start+0x158>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x10e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <HAL_TIM_PWM_Start+0x15c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d010      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	e007      	b.n	8004c0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40014000 	.word	0x40014000

08004c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e0ae      	b.n	8004da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b0c      	cmp	r3, #12
 8004c52:	f200 809f 	bhi.w	8004d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c91 	.word	0x08004c91
 8004c60:	08004d95 	.word	0x08004d95
 8004c64:	08004d95 	.word	0x08004d95
 8004c68:	08004d95 	.word	0x08004d95
 8004c6c:	08004cd1 	.word	0x08004cd1
 8004c70:	08004d95 	.word	0x08004d95
 8004c74:	08004d95 	.word	0x08004d95
 8004c78:	08004d95 	.word	0x08004d95
 8004c7c:	08004d13 	.word	0x08004d13
 8004c80:	08004d95 	.word	0x08004d95
 8004c84:	08004d95 	.word	0x08004d95
 8004c88:	08004d95 	.word	0x08004d95
 8004c8c:	08004d53 	.word	0x08004d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f9d0 	bl	800503c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	619a      	str	r2, [r3, #24]
      break;
 8004cce:	e064      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fa16 	bl	8005108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	619a      	str	r2, [r3, #24]
      break;
 8004d10:	e043      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fa61 	bl	80051e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0208 	orr.w	r2, r2, #8
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0204 	bic.w	r2, r2, #4
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	61da      	str	r2, [r3, #28]
      break;
 8004d50:	e023      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 faab 	bl	80052b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69d9      	ldr	r1, [r3, #28]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	021a      	lsls	r2, r3, #8
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	61da      	str	r2, [r3, #28]
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	75fb      	strb	r3, [r7, #23]
      break;
 8004d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e0b4      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x186>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d03e      	beq.n	8004e80 <HAL_TIM_ConfigClockSource+0xd4>
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	f200 8087 	bhi.w	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	f000 8086 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x172>
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d87f      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b70      	cmp	r3, #112	; 0x70
 8004e1a:	d01a      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0xa6>
 8004e1c:	2b70      	cmp	r3, #112	; 0x70
 8004e1e:	d87b      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b60      	cmp	r3, #96	; 0x60
 8004e22:	d050      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e24:	2b60      	cmp	r3, #96	; 0x60
 8004e26:	d877      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b50      	cmp	r3, #80	; 0x50
 8004e2a:	d03c      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e2c:	2b50      	cmp	r3, #80	; 0x50
 8004e2e:	d873      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d058      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d86f      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d064      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d86b      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d060      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d867      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d05c      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d05a      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	e062      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6899      	ldr	r1, [r3, #8]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f000 faf1 	bl	8005448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	609a      	str	r2, [r3, #8]
      break;
 8004e7e:	e04f      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f000 fada 	bl	8005448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea2:	609a      	str	r2, [r3, #8]
      break;
 8004ea4:	e03c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fa4e 	bl	8005354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2150      	movs	r1, #80	; 0x50
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 faa7 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e02c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fa6d 	bl	80053b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2160      	movs	r1, #96	; 0x60
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fa97 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e01c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 fa2e 	bl	8005354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2140      	movs	r1, #64	; 0x40
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fa87 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004f04:	e00c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 fa7e 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8004f16:	e003      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1c:	e000      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <TIM_Base_SetConfig+0xe4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00f      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a31      	ldr	r2, [pc, #196]	; (8005024 <TIM_Base_SetConfig+0xe8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a30      	ldr	r2, [pc, #192]	; (8005028 <TIM_Base_SetConfig+0xec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a2f      	ldr	r2, [pc, #188]	; (800502c <TIM_Base_SetConfig+0xf0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a25      	ldr	r2, [pc, #148]	; (8005020 <TIM_Base_SetConfig+0xe4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d017      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a22      	ldr	r2, [pc, #136]	; (8005024 <TIM_Base_SetConfig+0xe8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a21      	ldr	r2, [pc, #132]	; (8005028 <TIM_Base_SetConfig+0xec>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	; (800502c <TIM_Base_SetConfig+0xf0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <TIM_Base_SetConfig+0xf4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <TIM_Base_SetConfig+0xf8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <TIM_Base_SetConfig+0xfc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d108      	bne.n	8004fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a08      	ldr	r2, [pc, #32]	; (8005020 <TIM_Base_SetConfig+0xe4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d103      	bne.n	800500c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	615a      	str	r2, [r3, #20]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800

0800503c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0302 	bic.w	r3, r3, #2
 8005084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <TIM_OC1_SetConfig+0xc8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10c      	bne.n	80050b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0308 	bic.w	r3, r3, #8
 800509e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <TIM_OC1_SetConfig+0xc8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d111      	bne.n	80050de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40010000 	.word	0x40010000

08005108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0210 	bic.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <TIM_OC2_SetConfig+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10d      	bne.n	8005184 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <TIM_OC2_SetConfig+0xd4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d113      	bne.n	80051b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000

080051e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <TIM_OC3_SetConfig+0xd0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10d      	bne.n	800525a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <TIM_OC3_SetConfig+0xd0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d113      	bne.n	800528a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40010000 	.word	0x40010000

080052b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a10      	ldr	r2, [pc, #64]	; (8005350 <TIM_OC4_SetConfig+0x9c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d109      	bne.n	8005328 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000

08005354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 030a 	bic.w	r3, r3, #10
 8005390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b087      	sub	sp, #28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f023 0210 	bic.w	r2, r3, #16
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	031b      	lsls	r3, r3, #12
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	f043 0307 	orr.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	021a      	lsls	r2, r3, #8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	431a      	orrs	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	609a      	str	r2, [r3, #8]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2201      	movs	r2, #1
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e050      	b.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005538:	d013      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10c      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40014000 	.word	0x40014000

080055b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b0:	b084      	sub	sp, #16
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	f107 001c 	add.w	r0, r7, #28
 80055be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d122      	bne.n	800560e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d105      	bne.n	8005602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f9c0 	bl	8005988 <USB_CoreReset>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	e01a      	b.n	8005644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9b4 	bl	8005988 <USB_CoreReset>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
 8005636:	e005      	b.n	8005644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b01      	cmp	r3, #1
 8005648:	d10b      	bne.n	8005662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f043 0206 	orr.w	r2, r3, #6
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800566e:	b004      	add	sp, #16
 8005670:	4770      	bx	lr

08005672 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f043 0201 	orr.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 0201 	bic.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d115      	bne.n	8005704 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056e4:	2001      	movs	r0, #1
 80056e6:	f7fb fddd 	bl	80012a4 <HAL_Delay>
      ms++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f93a 	bl	800596a <USB_GetMode>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d01e      	beq.n	800573a <USB_SetCurrentMode+0x84>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b31      	cmp	r3, #49	; 0x31
 8005700:	d9f0      	bls.n	80056e4 <USB_SetCurrentMode+0x2e>
 8005702:	e01a      	b.n	800573a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d115      	bne.n	8005736 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005716:	2001      	movs	r0, #1
 8005718:	f7fb fdc4 	bl	80012a4 <HAL_Delay>
      ms++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f921 	bl	800596a <USB_GetMode>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <USB_SetCurrentMode+0x84>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b31      	cmp	r3, #49	; 0x31
 8005732:	d9f0      	bls.n	8005716 <USB_SetCurrentMode+0x60>
 8005734:	e001      	b.n	800573a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e005      	b.n	8005746 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b32      	cmp	r3, #50	; 0x32
 800573e:	d101      	bne.n	8005744 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <USB_FlushTxFifo+0x64>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e01b      	b.n	80057a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	daf2      	bge.n	800575e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	f043 0220 	orr.w	r2, r3, #32
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <USB_FlushTxFifo+0x64>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d0f0      	beq.n	8005788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	00030d40 	.word	0x00030d40

080057b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a11      	ldr	r2, [pc, #68]	; (8005814 <USB_FlushRxFifo+0x5c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e018      	b.n	8005808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	daf2      	bge.n	80057c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2210      	movs	r2, #16
 80057e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a08      	ldr	r2, [pc, #32]	; (8005814 <USB_FlushRxFifo+0x5c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e006      	b.n	8005808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b10      	cmp	r3, #16
 8005804:	d0f0      	beq.n	80057e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	00030d40 	.word	0x00030d40

08005818 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005818:	b480      	push	{r7}
 800581a:	b089      	sub	sp, #36	; 0x24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4611      	mov	r1, r2
 8005824:	461a      	mov	r2, r3
 8005826:	460b      	mov	r3, r1
 8005828:	71fb      	strb	r3, [r7, #7]
 800582a:	4613      	mov	r3, r2
 800582c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d123      	bne.n	8005886 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800583e:	88bb      	ldrh	r3, [r7, #4]
 8005840:	3303      	adds	r3, #3
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e018      	b.n	800587e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	031a      	lsls	r2, r3, #12
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005858:	461a      	mov	r2, r3
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3301      	adds	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3301      	adds	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3301      	adds	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3301      	adds	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3e2      	bcc.n	800584c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3724      	adds	r7, #36	; 0x24
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005894:	b480      	push	{r7}
 8005896:	b08b      	sub	sp, #44	; 0x2c
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	089b      	lsrs	r3, r3, #2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	e014      	b.n	80058ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	3301      	adds	r3, #1
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	3301      	adds	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	3301      	adds	r3, #1
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	3301      	adds	r3, #1
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	3301      	adds	r3, #1
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d3e6      	bcc.n	80058c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058f2:	8bfb      	ldrh	r3, [r7, #30]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01e      	beq.n	8005936 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005902:	461a      	mov	r2, r3
 8005904:	f107 0310 	add.w	r3, r7, #16
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	701a      	strb	r2, [r3, #0]
      i++;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	3301      	adds	r3, #1
 8005922:	623b      	str	r3, [r7, #32]
      pDest++;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	3301      	adds	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800592a:	8bfb      	ldrh	r3, [r7, #30]
 800592c:	3b01      	subs	r3, #1
 800592e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ea      	bne.n	800590c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005938:	4618      	mov	r0, r3
 800593a:	372c      	adds	r7, #44	; 0x2c
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0301 	and.w	r3, r3, #1
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <USB_CoreReset+0x64>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e01b      	b.n	80059de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	daf2      	bge.n	8005994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f043 0201 	orr.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <USB_CoreReset+0x64>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d0f0      	beq.n	80059be <USB_CoreReset+0x36>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	00030d40 	.word	0x00030d40

080059f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059f0:	b084      	sub	sp, #16
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b086      	sub	sp, #24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a10:	461a      	mov	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d018      	beq.n	8005a78 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d10a      	bne.n	8005a62 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e014      	b.n	8005a8c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e009      	b.n	8005a8c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a86:	f023 0304 	bic.w	r3, r3, #4
 8005a8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a8c:	2110      	movs	r1, #16
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fe5e 	bl	8005750 <USB_FlushTxFifo>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fe8a 	bl	80057b8 <USB_FlushRxFifo>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e015      	b.n	8005ae0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3e5      	bcc.n	8005ab4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <USB_HostInit+0x16c>)
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <USB_HostInit+0x170>)
 8005b14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b18:	e009      	b.n	8005b2e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <USB_HostInit+0x174>)
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a0f      	ldr	r2, [pc, #60]	; (8005b68 <USB_HostInit+0x178>)
 8005b2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f043 0210 	orr.w	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <USB_HostInit+0x17c>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b58:	b004      	add	sp, #16
 8005b5a:	4770      	bx	lr
 8005b5c:	01000200 	.word	0x01000200
 8005b60:	00e00300 	.word	0x00e00300
 8005b64:	00600080 	.word	0x00600080
 8005b68:	004000e0 	.word	0x004000e0
 8005b6c:	a3200008 	.word	0xa3200008

08005b70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bbe:	6053      	str	r3, [r2, #4]
 8005bc0:	e009      	b.n	8005bd6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d106      	bne.n	8005bd6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005bd4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c12:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c14:	2064      	movs	r0, #100	; 0x64
 8005c16:	f7fb fb45 	bl	80012a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c26:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c28:	200a      	movs	r0, #10
 8005c2a:	f7fb fb3b 	bl	80012a4 <HAL_Delay>

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <USB_DriveVbus+0x44>
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d106      	bne.n	8005c7c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c7a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c86:	d109      	bne.n	8005c9c <USB_DriveVbus+0x64>
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	0c5b      	lsrs	r3, r3, #17
 8005cc8:	f003 0303 	and.w	r3, r3, #3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	b29b      	uxth	r3, r3
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	70fb      	strb	r3, [r7, #3]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70bb      	strb	r3, [r7, #2]
 8005d12:	4613      	mov	r3, r2
 8005d14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d30:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d87e      	bhi.n	8005e38 <USB_HC_Init+0x13c>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <USB_HC_Init+0x44>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005dfb 	.word	0x08005dfb
 8005d48:	08005d51 	.word	0x08005d51
 8005d4c:	08005dbd 	.word	0x08005dbd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	da10      	bge.n	8005d8e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005d8c:	e057      	b.n	8005e3e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d051      	beq.n	8005e3e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005db8:	60d3      	str	r3, [r2, #12]
      break;
 8005dba:	e040      	b.n	8005e3e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f240 639d 	movw	r3, #1693	; 0x69d
 8005dce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da34      	bge.n	8005e42 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005df8:	e023      	b.n	8005e42 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	461a      	mov	r2, r3
 8005e08:	f240 2325 	movw	r3, #549	; 0x225
 8005e0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da17      	bge.n	8005e46 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e30:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e34:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e36:	e006      	b.n	8005e46 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e3c:	e004      	b.n	8005e48 <USB_HC_Init+0x14c>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <USB_HC_Init+0x14c>
      break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <USB_HC_Init+0x14c>
      break;
 8005e46:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e62:	f043 0302 	orr.w	r3, r3, #2
 8005e66:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	2101      	movs	r1, #1
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	6939      	ldr	r1, [r7, #16]
 8005e7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e82:	4313      	orrs	r3, r2
 8005e84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da03      	bge.n	8005ea2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	e001      	b.n	8005ea6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff feff 	bl	8005caa <USB_GetHostSpeed>
 8005eac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d106      	bne.n	8005ec4 <USB_HC_Init+0x1c8>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d003      	beq.n	8005ec4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e001      	b.n	8005ec8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ec8:	787b      	ldrb	r3, [r7, #1]
 8005eca:	059b      	lsls	r3, r3, #22
 8005ecc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ed0:	78bb      	ldrb	r3, [r7, #2]
 8005ed2:	02db      	lsls	r3, r3, #11
 8005ed4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ed8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005eda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ede:	049b      	lsls	r3, r3, #18
 8005ee0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ee4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ee6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005eec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	0159      	lsls	r1, r3, #5
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	440b      	add	r3, r1
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f04:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d003      	beq.n	8005f16 <USB_HC_Init+0x21a>
 8005f0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d10f      	bne.n	8005f36 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08c      	sub	sp, #48	; 0x30
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d02d      	beq.n	8005fc6 <USB_HC_StartXfer+0x86>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	791b      	ldrb	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d129      	bne.n	8005fc6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d117      	bne.n	8005fa8 <USB_HC_StartXfer+0x68>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	79db      	ldrb	r3, [r3, #7]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <USB_HC_StartXfer+0x48>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	79db      	ldrb	r3, [r3, #7]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d10f      	bne.n	8005fa8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <USB_HC_StartXfer+0x86>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	795b      	ldrb	r3, [r3, #5]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fa0f 	bl	80063e0 <USB_DoPing>
      return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e0f8      	b.n	80061b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d018      	beq.n	8006000 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	8912      	ldrh	r2, [r2, #8]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	8912      	ldrh	r2, [r2, #8]
 8005fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005fe4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005fe6:	8b7b      	ldrh	r3, [r7, #26]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d90b      	bls.n	8006004 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005fec:	8b7b      	ldrh	r3, [r7, #26]
 8005fee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	8912      	ldrh	r2, [r2, #8]
 8005ff6:	fb03 f202 	mul.w	r2, r3, r2
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	611a      	str	r2, [r3, #16]
 8005ffe:	e001      	b.n	8006004 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006000:	2301      	movs	r3, #1
 8006002:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	78db      	ldrb	r3, [r3, #3]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800600c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	8912      	ldrh	r2, [r2, #8]
 8006012:	fb03 f202 	mul.w	r2, r3, r2
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	611a      	str	r2, [r3, #16]
 800601a:	e003      	b.n	8006024 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800602c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800602e:	04d9      	lsls	r1, r3, #19
 8006030:	4b63      	ldr	r3, [pc, #396]	; (80061c0 <USB_HC_StartXfer+0x280>)
 8006032:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006034:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7a9b      	ldrb	r3, [r3, #10]
 800603a:	075b      	lsls	r3, r3, #29
 800603c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	0148      	lsls	r0, r1, #5
 8006044:	6a39      	ldr	r1, [r7, #32]
 8006046:	4401      	add	r1, r0
 8006048:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800604c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800604e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	460a      	mov	r2, r1
 8006068:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	bf0c      	ite	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	2300      	movne	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	6a3a      	ldr	r2, [r7, #32]
 8006096:	440a      	add	r2, r1
 8006098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800609c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	7e7b      	ldrb	r3, [r7, #25]
 80060b2:	075b      	lsls	r3, r3, #29
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	0148      	lsls	r0, r1, #5
 80060b8:	6a39      	ldr	r1, [r7, #32]
 80060ba:	4401      	add	r1, r0
 80060bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	78db      	ldrb	r3, [r3, #3]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	e003      	b.n	80060f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	461a      	mov	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e04e      	b.n	80061b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	78db      	ldrb	r3, [r3, #3]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d149      	bne.n	80061b6 <USB_HC_StartXfer+0x276>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d045      	beq.n	80061b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	79db      	ldrb	r3, [r3, #7]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d830      	bhi.n	8006194 <USB_HC_StartXfer+0x254>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <USB_HC_StartXfer+0x1f8>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006149 	.word	0x08006149
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006149 	.word	0x08006149
 8006144:	0800616d 	.word	0x0800616d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	3303      	adds	r3, #3
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006152:	8afa      	ldrh	r2, [r7, #22]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	b29b      	uxth	r3, r3
 800615a:	429a      	cmp	r2, r3
 800615c:	d91c      	bls.n	8006198 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]
        }
        break;
 800616a:	e015      	b.n	8006198 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	3303      	adds	r3, #3
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006176:	8afa      	ldrh	r2, [r7, #22]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	b29b      	uxth	r3, r3
 8006182:	429a      	cmp	r2, r3
 8006184:	d90a      	bls.n	800619c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	619a      	str	r2, [r3, #24]
        }
        break;
 8006192:	e003      	b.n	800619c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006194:	bf00      	nop
 8006196:	e002      	b.n	800619e <USB_HC_StartXfer+0x25e>
        break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <USB_HC_StartXfer+0x25e>
        break;
 800619c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68d9      	ldr	r1, [r3, #12]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	785a      	ldrb	r2, [r3, #1]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2000      	movs	r0, #0
 80061ae:	9000      	str	r0, [sp, #0]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fb31 	bl	8005818 <USB_WritePacket>
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	; 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	1ff80000 	.word	0x1ff80000

080061c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	b29b      	uxth	r3, r3
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b089      	sub	sp, #36	; 0x24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	0c9b      	lsrs	r3, r3, #18
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	0fdb      	lsrs	r3, r3, #31
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b20      	cmp	r3, #32
 8006234:	d104      	bne.n	8006240 <USB_HC_Halt+0x5a>
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e0c8      	b.n	80063d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <USB_HC_Halt+0x66>
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d163      	bne.n	8006314 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800626a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 80ab 	bne.w	80063d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d133      	bne.n	80062ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d2:	d81d      	bhi.n	8006310 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ea:	d0ec      	beq.n	80062c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ec:	e070      	b.n	80063d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	440a      	add	r2, r1
 8006304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800630c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800630e:	e05f      	b.n	80063d0 <USB_HC_Halt+0x1ea>
            break;
 8006310:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006312:	e05d      	b.n	80063d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006332:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d133      	bne.n	80063ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006362:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	440a      	add	r2, r1
 800637a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006382:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006390:	d81d      	bhi.n	80063ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a8:	d0ec      	beq.n	8006384 <USB_HC_Halt+0x19e>
 80063aa:	e011      	b.n	80063d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e000      	b.n	80063d0 <USB_HC_Halt+0x1ea>
          break;
 80063ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3724      	adds	r7, #36	; 0x24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80063f4:	2301      	movs	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	04da      	lsls	r2, r3, #19
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <USB_DoPing+0x74>)
 80063fe:	4013      	ands	r3, r2
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006428:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006430:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	461a      	mov	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	1ff80000 	.word	0x1ff80000

08006458 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff f911 	bl	8005694 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006472:	2110      	movs	r1, #16
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff f96b 	bl	8005750 <USB_FlushTxFifo>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff f997 	bl	80057b8 <USB_FlushRxFifo>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e01f      	b.n	80064da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	461a      	mov	r2, r3
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d9dc      	bls.n	800649a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e034      	b.n	8006550 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006504:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	461a      	mov	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652c:	d80c      	bhi.n	8006548 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006544:	d0ec      	beq.n	8006520 <USB_StopHost+0xc8>
 8006546:	e000      	b.n	800654a <USB_StopHost+0xf2>
        break;
 8006548:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	3301      	adds	r3, #1
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d9c7      	bls.n	80064e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655c:	461a      	mov	r2, r3
 800655e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006562:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800656a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff f880 	bl	8005672 <USB_EnableGlobalInt>

  return ret;
 8006572:	7ffb      	ldrb	r3, [r7, #31]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af04      	add	r7, sp, #16
 8006582:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006584:	2301      	movs	r3, #1
 8006586:	2202      	movs	r2, #2
 8006588:	2102      	movs	r1, #2
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fc66 	bl	8006e5c <USBH_FindInterface>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2bff      	cmp	r3, #255	; 0xff
 8006598:	d002      	beq.n	80065a0 <USBH_CDC_InterfaceInit+0x24>
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d901      	bls.n	80065a4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065a0:	2302      	movs	r3, #2
 80065a2:	e13d      	b.n	8006820 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fc3b 	bl	8006e24 <USBH_SelectInterface>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065b8:	2302      	movs	r3, #2
 80065ba:	e131      	b.n	8006820 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80065c2:	2050      	movs	r0, #80	; 0x50
 80065c4:	f002 fafa 	bl	8008bbc <malloc>
 80065c8:	4603      	mov	r3, r0
 80065ca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80065dc:	2302      	movs	r3, #2
 80065de:	e11f      	b.n	8006820 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80065e0:	2250      	movs	r2, #80	; 0x50
 80065e2:	2100      	movs	r1, #0
 80065e4:	68b8      	ldr	r0, [r7, #8]
 80065e6:	f002 faf9 	bl	8008bdc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	211a      	movs	r1, #26
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da15      	bge.n	800662e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	211a      	movs	r1, #26
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	211a      	movs	r1, #26
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	4413      	add	r3, r2
 8006624:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 ff2c 	bl	8008492 <USBH_AllocPipe>
 800663a:	4603      	mov	r3, r0
 800663c:	461a      	mov	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	7819      	ldrb	r1, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	7858      	ldrb	r0, [r3, #1]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	8952      	ldrh	r2, [r2, #10]
 800665a:	9202      	str	r2, [sp, #8]
 800665c:	2203      	movs	r2, #3
 800665e:	9201      	str	r2, [sp, #4]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4623      	mov	r3, r4
 8006664:	4602      	mov	r2, r0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fee4 	bl	8008434 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2200      	movs	r2, #0
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f002 f9f3 	bl	8008a60 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800667a:	2300      	movs	r3, #0
 800667c:	2200      	movs	r2, #0
 800667e:	210a      	movs	r1, #10
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fbeb 	bl	8006e5c <USBH_FindInterface>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2bff      	cmp	r3, #255	; 0xff
 800668e:	d002      	beq.n	8006696 <USBH_CDC_InterfaceInit+0x11a>
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d901      	bls.n	800669a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006696:	2302      	movs	r3, #2
 8006698:	e0c2      	b.n	8006820 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	211a      	movs	r1, #26
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	da16      	bge.n	80066e0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	211a      	movs	r1, #26
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	4413      	add	r3, r2
 80066be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	211a      	movs	r1, #26
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	835a      	strh	r2, [r3, #26]
 80066de:	e015      	b.n	800670c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	211a      	movs	r1, #26
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	211a      	movs	r1, #26
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	4413      	add	r3, r2
 8006702:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006706:	881a      	ldrh	r2, [r3, #0]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	211a      	movs	r1, #26
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	4413      	add	r3, r2
 8006718:	f203 3356 	addw	r3, r3, #854	; 0x356
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b25b      	sxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	da16      	bge.n	8006752 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	211a      	movs	r1, #26
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	211a      	movs	r1, #26
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	4413      	add	r3, r2
 8006746:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800674a:	881a      	ldrh	r2, [r3, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	835a      	strh	r2, [r3, #26]
 8006750:	e015      	b.n	800677e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	211a      	movs	r1, #26
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	211a      	movs	r1, #26
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	4413      	add	r3, r2
 8006774:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006778:	881a      	ldrh	r2, [r3, #0]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	7b9b      	ldrb	r3, [r3, #14]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fe84 	bl	8008492 <USBH_AllocPipe>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	7bdb      	ldrb	r3, [r3, #15]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fe7a 	bl	8008492 <USBH_AllocPipe>
 800679e:	4603      	mov	r3, r0
 80067a0:	461a      	mov	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	7b59      	ldrb	r1, [r3, #13]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	7b98      	ldrb	r0, [r3, #14]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	8b12      	ldrh	r2, [r2, #24]
 80067be:	9202      	str	r2, [sp, #8]
 80067c0:	2202      	movs	r2, #2
 80067c2:	9201      	str	r2, [sp, #4]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	4623      	mov	r3, r4
 80067c8:	4602      	mov	r2, r0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fe32 	bl	8008434 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	7b19      	ldrb	r1, [r3, #12]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	7bd8      	ldrb	r0, [r3, #15]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	8b52      	ldrh	r2, [r2, #26]
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	2202      	movs	r2, #2
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4623      	mov	r3, r4
 80067f2:	4602      	mov	r2, r0
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe1d 	bl	8008434 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	7b5b      	ldrb	r3, [r3, #13]
 8006806:	2200      	movs	r2, #0
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 f928 	bl	8008a60 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7b1b      	ldrb	r3, [r3, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f002 f921 	bl	8008a60 <USBH_LL_SetToggle>

  return USBH_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}

08006828 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00e      	beq.n	8006860 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fe12 	bl	8008472 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fe3d 	bl	80084d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	7b1b      	ldrb	r3, [r3, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00e      	beq.n	8006886 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	7b1b      	ldrb	r3, [r3, #12]
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fdff 	bl	8008472 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	7b1b      	ldrb	r3, [r3, #12]
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fe2a 	bl	80084d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	7b5b      	ldrb	r3, [r3, #13]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	7b5b      	ldrb	r3, [r3, #13]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fdec 	bl	8008472 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	7b5b      	ldrb	r3, [r3, #13]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fe17 	bl	80084d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f002 f983 	bl	8008bcc <free>
    phost->pActiveClass->pData = 0U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068cc:	2200      	movs	r2, #0
 80068ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3340      	adds	r3, #64	; 0x40
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f8b1 	bl	8006a5a <GetLineCoding>
 80068f8:	4603      	mov	r3, r0
 80068fa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006908:	2102      	movs	r1, #2
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800690e:	7afb      	ldrb	r3, [r7, #11]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006938:	2b04      	cmp	r3, #4
 800693a:	d877      	bhi.n	8006a2c <USBH_CDC_Process+0x114>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <USBH_CDC_Process+0x2c>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006959 	.word	0x08006959
 8006948:	0800695f 	.word	0x0800695f
 800694c:	0800698f 	.word	0x0800698f
 8006950:	08006a03 	.word	0x08006a03
 8006954:	08006a11 	.word	0x08006a11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e06d      	b.n	8006a3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f897 	bl	8006a98 <SetLineCoding>
 800696a:	4603      	mov	r3, r0
 800696c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800697c:	e058      	b.n	8006a30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d055      	beq.n	8006a30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2204      	movs	r2, #4
 8006988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800698c:	e050      	b.n	8006a30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	3340      	adds	r3, #64	; 0x40
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f860 	bl	8006a5a <GetLineCoding>
 800699a:	4603      	mov	r3, r0
 800699c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d126      	bne.n	80069f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b6:	791b      	ldrb	r3, [r3, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d13b      	bne.n	8006a34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d133      	bne.n	8006a34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069d8:	429a      	cmp	r2, r3
 80069da:	d12b      	bne.n	8006a34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d124      	bne.n	8006a34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f958 	bl	8006ca0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069f0:	e020      	b.n	8006a34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d01d      	beq.n	8006a34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2204      	movs	r2, #4
 80069fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a00:	e018      	b.n	8006a34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f867 	bl	8006ad6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8da 	bl	8006bc2 <CDC_ProcessReception>
      break;
 8006a0e:	e014      	b.n	8006a3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a10:	2100      	movs	r1, #0
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 ffef 	bl	80079f6 <USBH_ClrFeature>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a2a:	e005      	b.n	8006a38 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a2c:	bf00      	nop
 8006a2e:	e004      	b.n	8006a3a <USBH_CDC_Process+0x122>
      break;
 8006a30:	bf00      	nop
 8006a32:	e002      	b.n	8006a3a <USBH_CDC_Process+0x122>
      break;
 8006a34:	bf00      	nop
 8006a36:	e000      	b.n	8006a3a <USBH_CDC_Process+0x122>
      break;
 8006a38:	bf00      	nop

  }

  return status;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	22a1      	movs	r2, #161	; 0xa1
 8006a68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2221      	movs	r2, #33	; 0x21
 8006a6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2207      	movs	r2, #7
 8006a80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2207      	movs	r2, #7
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fa81 	bl	8007f90 <USBH_CtlReq>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2221      	movs	r2, #33	; 0x21
 8006aa6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2207      	movs	r2, #7
 8006abe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2207      	movs	r2, #7
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fa62 	bl	8007f90 <USBH_CtlReq>
 8006acc:	4603      	mov	r3, r0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af02      	add	r7, sp, #8
 8006adc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d002      	beq.n	8006afc <CDC_ProcessTransmission+0x26>
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d023      	beq.n	8006b42 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006afa:	e05e      	b.n	8006bba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	8b12      	ldrh	r2, [r2, #24]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d90b      	bls.n	8006b20 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8b1a      	ldrh	r2, [r3, #24]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	7b5b      	ldrb	r3, [r3, #13]
 8006b14:	2001      	movs	r0, #1
 8006b16:	9000      	str	r0, [sp, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fc48 	bl	80083ae <USBH_BulkSendData>
 8006b1e:	e00b      	b.n	8006b38 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	7b5b      	ldrb	r3, [r3, #13]
 8006b2e:	2001      	movs	r0, #1
 8006b30:	9000      	str	r0, [sp, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 fc3b 	bl	80083ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b40:	e03b      	b.n	8006bba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	7b5b      	ldrb	r3, [r3, #13]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 ff5f 	bl	8008a0c <USBH_LL_GetURBState>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d128      	bne.n	8006baa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	8b12      	ldrh	r2, [r2, #24]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d90e      	bls.n	8006b82 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	8b12      	ldrh	r2, [r2, #24]
 8006b6c:	1a9a      	subs	r2, r3, r2
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	8b12      	ldrh	r2, [r2, #24]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	61da      	str	r2, [r3, #28]
 8006b80:	e002      	b.n	8006b88 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b98:	e00e      	b.n	8006bb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f868 	bl	8006c78 <USBH_CDC_TransmitCallback>
      break;
 8006ba8:	e006      	b.n	8006bb8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d103      	bne.n	8006bb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bb8:	bf00      	nop
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d002      	beq.n	8006be8 <CDC_ProcessReception+0x26>
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d00e      	beq.n	8006c04 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006be6:	e043      	b.n	8006c70 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	6a19      	ldr	r1, [r3, #32]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	8b5a      	ldrh	r2, [r3, #26]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	7b1b      	ldrb	r3, [r3, #12]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fbff 	bl	80083f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c02:	e035      	b.n	8006c70 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	7b1b      	ldrb	r3, [r3, #12]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fefe 	bl	8008a0c <USBH_LL_GetURBState>
 8006c10:	4603      	mov	r3, r0
 8006c12:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c14:	7cfb      	ldrb	r3, [r7, #19]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d129      	bne.n	8006c6e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	7b1b      	ldrb	r3, [r3, #12]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fe61 	bl	80088e8 <USBH_LL_GetLastXferSize>
 8006c26:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d016      	beq.n	8006c60 <CDC_ProcessReception+0x9e>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	8b5b      	ldrh	r3, [r3, #26]
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d910      	bls.n	8006c60 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	441a      	add	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c5e:	e006      	b.n	8006c6e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f80f 	bl	8006c8c <USBH_CDC_ReceiveCallback>
      break;
 8006c6e:	bf00      	nop
  }
}
 8006c70:	bf00      	nop
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e029      	b.n	8006d20 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	79fa      	ldrb	r2, [r7, #7]
 8006cd0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f81f 	bl	8006d28 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f001 fd31 	bl	8008780 <USBH_LL_Init>

  return USBH_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e009      	b.n	8006d4e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	33e0      	adds	r3, #224	; 0xe0
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b0f      	cmp	r3, #15
 8006d52:	d9f2      	bls.n	8006d3a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e009      	b.n	8006d6e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d74:	d3f1      	bcc.n	8006d5a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2240      	movs	r2, #64	; 0x40
 8006d9a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d016      	beq.n	8006e12 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10e      	bne.n	8006e0c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	33de      	adds	r3, #222	; 0xde
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	e004      	b.n	8006e16 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	73fb      	strb	r3, [r7, #15]
 8006e10:	e001      	b.n	8006e16 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e3a:	78fa      	ldrb	r2, [r7, #3]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d204      	bcs.n	8006e4a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e48:	e001      	b.n	8006e4e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	4608      	mov	r0, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	70fb      	strb	r3, [r7, #3]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70bb      	strb	r3, [r7, #2]
 8006e72:	4613      	mov	r3, r2
 8006e74:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e84:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e86:	e025      	b.n	8006ed4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	221a      	movs	r2, #26
 8006e8c:	fb02 f303 	mul.w	r3, r2, r3
 8006e90:	3308      	adds	r3, #8
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	3302      	adds	r3, #2
 8006e98:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	795b      	ldrb	r3, [r3, #5]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d002      	beq.n	8006eaa <USBH_FindInterface+0x4e>
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2bff      	cmp	r3, #255	; 0xff
 8006ea8:	d111      	bne.n	8006ece <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eae:	78ba      	ldrb	r2, [r7, #2]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d002      	beq.n	8006eba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eb4:	78bb      	ldrb	r3, [r7, #2]
 8006eb6:	2bff      	cmp	r3, #255	; 0xff
 8006eb8:	d109      	bne.n	8006ece <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ebe:	787a      	ldrb	r2, [r7, #1]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d002      	beq.n	8006eca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ec4:	787b      	ldrb	r3, [r7, #1]
 8006ec6:	2bff      	cmp	r3, #255	; 0xff
 8006ec8:	d101      	bne.n	8006ece <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	e006      	b.n	8006edc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d9d6      	bls.n	8006e88 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006eda:	23ff      	movs	r3, #255	; 0xff
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fc81 	bl	80087f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fd9a 	bl	8008a32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af04      	add	r7, sp, #16
 8006f0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f10:	2302      	movs	r3, #2
 8006f12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d102      	bne.n	8006f2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2203      	movs	r2, #3
 8006f28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b0b      	cmp	r3, #11
 8006f32:	f200 81be 	bhi.w	80072b2 <USBH_Process+0x3aa>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <USBH_Process+0x34>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f9f 	.word	0x08006f9f
 8006f44:	08007007 	.word	0x08007007
 8006f48:	0800724d 	.word	0x0800724d
 8006f4c:	080072b3 	.word	0x080072b3
 8006f50:	080070ab 	.word	0x080070ab
 8006f54:	080071f3 	.word	0x080071f3
 8006f58:	080070e1 	.word	0x080070e1
 8006f5c:	08007101 	.word	0x08007101
 8006f60:	08007121 	.word	0x08007121
 8006f64:	08007165 	.word	0x08007165
 8006f68:	08007235 	.word	0x08007235
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 819e 	beq.w	80072b6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006f80:	20c8      	movs	r0, #200	; 0xc8
 8006f82:	f001 fd9d 	bl	8008ac0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fc93 	bl	80088b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f9c:	e18b      	b.n	80072b6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d107      	bne.n	8006fb8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fb6:	e18d      	b.n	80072d4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc2:	d914      	bls.n	8006fee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006fca:	3301      	adds	r3, #1
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d903      	bls.n	8006fe6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	220d      	movs	r2, #13
 8006fe2:	701a      	strb	r2, [r3, #0]
      break;
 8006fe4:	e176      	b.n	80072d4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
      break;
 8006fec:	e172      	b.n	80072d4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ff4:	f103 020a 	add.w	r2, r3, #10
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ffe:	200a      	movs	r0, #10
 8007000:	f001 fd5e 	bl	8008ac0 <USBH_Delay>
      break;
 8007004:	e166      	b.n	80072d4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007016:	2104      	movs	r1, #4
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800701c:	2064      	movs	r0, #100	; 0x64
 800701e:	f001 fd4f 	bl	8008ac0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fc1e 	bl	8008864 <USBH_LL_GetSpeed>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2205      	movs	r2, #5
 8007036:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fa29 	bl	8008492 <USBH_AllocPipe>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007048:	2180      	movs	r1, #128	; 0x80
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fa21 	bl	8008492 <USBH_AllocPipe>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7919      	ldrb	r1, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800706c:	b292      	uxth	r2, r2
 800706e:	9202      	str	r2, [sp, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	9201      	str	r2, [sp, #4]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4603      	mov	r3, r0
 8007078:	2280      	movs	r2, #128	; 0x80
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 f9da 	bl	8008434 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	7959      	ldrb	r1, [r3, #5]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007094:	b292      	uxth	r2, r2
 8007096:	9202      	str	r2, [sp, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4603      	mov	r3, r0
 80070a0:	2200      	movs	r2, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 f9c6 	bl	8008434 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070a8:	e114      	b.n	80072d4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f918 	bl	80072e0 <USBH_HandleEnum>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 80fe 	bne.w	80072ba <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d103      	bne.n	80070d8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2208      	movs	r2, #8
 80070d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070d6:	e0f0      	b.n	80072ba <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2207      	movs	r2, #7
 80070dc:	701a      	strb	r2, [r3, #0]
      break;
 80070de:	e0ec      	b.n	80072ba <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80e9 	beq.w	80072be <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2208      	movs	r2, #8
 80070fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80070fe:	e0de      	b.n	80072be <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007106:	b29b      	uxth	r3, r3
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fc2c 	bl	8007968 <USBH_SetCfg>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	f040 80d5 	bne.w	80072c2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2209      	movs	r2, #9
 800711c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800711e:	e0d0      	b.n	80072c2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800712e:	2101      	movs	r1, #1
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc3c 	bl	80079ae <USBH_SetFeature>
 8007136:	4603      	mov	r3, r0
 8007138:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	220a      	movs	r2, #10
 8007146:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007148:	e0bd      	b.n	80072c6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b03      	cmp	r3, #3
 8007150:	f040 80b9 	bne.w	80072c6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	220a      	movs	r2, #10
 8007158:	701a      	strb	r2, [r3, #0]
      break;
 800715a:	e0b4      	b.n	80072c6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220a      	movs	r2, #10
 8007160:	701a      	strb	r2, [r3, #0]
      break;
 8007162:	e0b0      	b.n	80072c6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80ad 	beq.w	80072ca <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
 800717c:	e016      	b.n	80071ac <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800717e:	7bfa      	ldrb	r2, [r7, #15]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	32de      	adds	r2, #222	; 0xde
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	791a      	ldrb	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007190:	429a      	cmp	r2, r3
 8007192:	d108      	bne.n	80071a6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007194:	7bfa      	ldrb	r2, [r7, #15]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	32de      	adds	r2, #222	; 0xde
 800719a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071a4:	e005      	b.n	80071b2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	3301      	adds	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0e5      	beq.n	800717e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d016      	beq.n	80071ea <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2206      	movs	r2, #6
 80071d2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071da:	2103      	movs	r1, #3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071e0:	e073      	b.n	80072ca <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220d      	movs	r2, #13
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e06f      	b.n	80072ca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220d      	movs	r2, #13
 80071ee:	701a      	strb	r2, [r3, #0]
      break;
 80071f0:	e06b      	b.n	80072ca <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d017      	beq.n	800722c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	4603      	mov	r3, r0
 800720a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	220b      	movs	r2, #11
 8007218:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800721a:	e058      	b.n	80072ce <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d154      	bne.n	80072ce <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	220d      	movs	r2, #13
 8007228:	701a      	strb	r2, [r3, #0]
      break;
 800722a:	e050      	b.n	80072ce <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	220d      	movs	r2, #13
 8007230:	701a      	strb	r2, [r3, #0]
      break;
 8007232:	e04c      	b.n	80072ce <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d049      	beq.n	80072d2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
      }
      break;
 800724a:	e042      	b.n	80072d2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff fd67 	bl	8006d28 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007288:	2105      	movs	r1, #5
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b01      	cmp	r3, #1
 8007298:	d107      	bne.n	80072aa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fe20 	bl	8006ee8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072a8:	e014      	b.n	80072d4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 faa4 	bl	80087f8 <USBH_LL_Start>
      break;
 80072b0:	e010      	b.n	80072d4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80072b2:	bf00      	nop
 80072b4:	e00e      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072b6:	bf00      	nop
 80072b8:	e00c      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072ba:	bf00      	nop
 80072bc:	e00a      	b.n	80072d4 <USBH_Process+0x3cc>
    break;
 80072be:	bf00      	nop
 80072c0:	e008      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072c2:	bf00      	nop
 80072c4:	e006      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072c6:	bf00      	nop
 80072c8:	e004      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072ca:	bf00      	nop
 80072cc:	e002      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <USBH_Process+0x3cc>
      break;
 80072d2:	bf00      	nop
  }
  return USBH_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop

080072e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af04      	add	r7, sp, #16
 80072e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b07      	cmp	r3, #7
 80072f6:	f200 81c1 	bhi.w	800767c <USBH_HandleEnum+0x39c>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <USBH_HandleEnum+0x20>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007321 	.word	0x08007321
 8007304:	080073df 	.word	0x080073df
 8007308:	08007449 	.word	0x08007449
 800730c:	080074d7 	.word	0x080074d7
 8007310:	08007541 	.word	0x08007541
 8007314:	080075b1 	.word	0x080075b1
 8007318:	080075f7 	.word	0x080075f7
 800731c:	0800763d 	.word	0x0800763d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007320:	2108      	movs	r1, #8
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa50 	bl	80077c8 <USBH_Get_DevDesc>
 8007328:	4603      	mov	r3, r0
 800732a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d130      	bne.n	8007394 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7919      	ldrb	r1, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007356:	b292      	uxth	r2, r2
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	9201      	str	r2, [sp, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	4603      	mov	r3, r0
 8007362:	2280      	movs	r2, #128	; 0x80
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f865 	bl	8008434 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7959      	ldrb	r1, [r3, #5]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800737e:	b292      	uxth	r2, r2
 8007380:	9202      	str	r2, [sp, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	9201      	str	r2, [sp, #4]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4603      	mov	r3, r0
 800738a:	2200      	movs	r2, #0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 f851 	bl	8008434 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007392:	e175      	b.n	8007680 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b03      	cmp	r3, #3
 8007398:	f040 8172 	bne.w	8007680 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073a2:	3301      	adds	r3, #1
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d903      	bls.n	80073be <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	220d      	movs	r2, #13
 80073ba:	701a      	strb	r2, [r3, #0]
      break;
 80073bc:	e160      	b.n	8007680 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	795b      	ldrb	r3, [r3, #5]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f885 	bl	80084d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	791b      	ldrb	r3, [r3, #4]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 f87f 	bl	80084d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
      break;
 80073dc:	e150      	b.n	8007680 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80073de:	2112      	movs	r1, #18
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9f1 	bl	80077c8 <USBH_Get_DevDesc>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073f6:	e145      	b.n	8007684 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	f040 8142 	bne.w	8007684 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007406:	3301      	adds	r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007416:	2b03      	cmp	r3, #3
 8007418:	d903      	bls.n	8007422 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	220d      	movs	r2, #13
 800741e:	701a      	strb	r2, [r3, #0]
      break;
 8007420:	e130      	b.n	8007684 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	795b      	ldrb	r3, [r3, #5]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 f853 	bl	80084d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 f84d 	bl	80084d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
      break;
 8007446:	e11d      	b.n	8007684 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007448:	2101      	movs	r1, #1
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa68 	bl	8007920 <USBH_SetAddress>
 8007450:	4603      	mov	r3, r0
 8007452:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d132      	bne.n	80074c0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800745a:	2002      	movs	r0, #2
 800745c:	f001 fb30 	bl	8008ac0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2203      	movs	r2, #3
 800746c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7919      	ldrb	r1, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007482:	b292      	uxth	r2, r2
 8007484:	9202      	str	r2, [sp, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	9201      	str	r2, [sp, #4]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	4603      	mov	r3, r0
 800748e:	2280      	movs	r2, #128	; 0x80
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 ffcf 	bl	8008434 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7959      	ldrb	r1, [r3, #5]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074aa:	b292      	uxth	r2, r2
 80074ac:	9202      	str	r2, [sp, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	9201      	str	r2, [sp, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	4603      	mov	r3, r0
 80074b6:	2200      	movs	r2, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 ffbb 	bl	8008434 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074be:	e0e3      	b.n	8007688 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f040 80e0 	bne.w	8007688 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220d      	movs	r2, #13
 80074cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	705a      	strb	r2, [r3, #1]
      break;
 80074d4:	e0d8      	b.n	8007688 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80074d6:	2109      	movs	r1, #9
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f99d 	bl	8007818 <USBH_Get_CfgDesc>
 80074de:	4603      	mov	r3, r0
 80074e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2204      	movs	r2, #4
 80074ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ee:	e0cd      	b.n	800768c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 80ca 	bne.w	800768c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074fe:	3301      	adds	r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800750e:	2b03      	cmp	r3, #3
 8007510:	d903      	bls.n	800751a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220d      	movs	r2, #13
 8007516:	701a      	strb	r2, [r3, #0]
      break;
 8007518:	e0b8      	b.n	800768c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 ffd7 	bl	80084d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 ffd1 	bl	80084d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
      break;
 800753e:	e0a5      	b.n	800768c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f965 	bl	8007818 <USBH_Get_CfgDesc>
 800754e:	4603      	mov	r3, r0
 8007550:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d103      	bne.n	8007560 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2205      	movs	r2, #5
 800755c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800755e:	e097      	b.n	8007690 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b03      	cmp	r3, #3
 8007564:	f040 8094 	bne.w	8007690 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756e:	3301      	adds	r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800757e:	2b03      	cmp	r3, #3
 8007580:	d903      	bls.n	800758a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	220d      	movs	r2, #13
 8007586:	701a      	strb	r2, [r3, #0]
      break;
 8007588:	e082      	b.n	8007690 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 ff9f 	bl	80084d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	791b      	ldrb	r3, [r3, #4]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 ff99 	bl	80084d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e06f      	b.n	8007690 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d019      	beq.n	80075ee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075c6:	23ff      	movs	r3, #255	; 0xff
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f949 	bl	8007860 <USBH_Get_StringDesc>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2206      	movs	r2, #6
 80075dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075de:	e059      	b.n	8007694 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d156      	bne.n	8007694 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2206      	movs	r2, #6
 80075ea:	705a      	strb	r2, [r3, #1]
      break;
 80075ec:	e052      	b.n	8007694 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2206      	movs	r2, #6
 80075f2:	705a      	strb	r2, [r3, #1]
      break;
 80075f4:	e04e      	b.n	8007694 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d019      	beq.n	8007634 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800760c:	23ff      	movs	r3, #255	; 0xff
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f926 	bl	8007860 <USBH_Get_StringDesc>
 8007614:	4603      	mov	r3, r0
 8007616:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2207      	movs	r2, #7
 8007622:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007624:	e038      	b.n	8007698 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d135      	bne.n	8007698 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2207      	movs	r2, #7
 8007630:	705a      	strb	r2, [r3, #1]
      break;
 8007632:	e031      	b.n	8007698 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2207      	movs	r2, #7
 8007638:	705a      	strb	r2, [r3, #1]
      break;
 800763a:	e02d      	b.n	8007698 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007642:	2b00      	cmp	r3, #0
 8007644:	d017      	beq.n	8007676 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007652:	23ff      	movs	r3, #255	; 0xff
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f903 	bl	8007860 <USBH_Get_StringDesc>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007668:	e018      	b.n	800769c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d115      	bne.n	800769c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
      break;
 8007674:	e012      	b.n	800769c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
      break;
 800767a:	e00f      	b.n	800769c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800767c:	bf00      	nop
 800767e:	e00e      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 8007680:	bf00      	nop
 8007682:	e00c      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 8007684:	bf00      	nop
 8007686:	e00a      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 8007688:	bf00      	nop
 800768a:	e008      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 800768c:	bf00      	nop
 800768e:	e006      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 8007690:	bf00      	nop
 8007692:	e004      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 8007694:	bf00      	nop
 8007696:	e002      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 8007698:	bf00      	nop
 800769a:	e000      	b.n	800769e <USBH_HandleEnum+0x3be>
      break;
 800769c:	bf00      	nop
  }
  return Status;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f804 	bl	80076ea <USBH_HandleSof>
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b0b      	cmp	r3, #11
 80076fa:	d10a      	bne.n	8007712 <USBH_HandleSof+0x28>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
  }
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800772a:	bf00      	nop
}
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007746:	bf00      	nop
}
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f844 	bl	800882e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	791b      	ldrb	r3, [r3, #4]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fe91 	bl	80084d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	795b      	ldrb	r3, [r3, #5]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fe8b 	bl	80084d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077e6:	2100      	movs	r1, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f864 	bl	80078b6 <USBH_GetDescriptor>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	b292      	uxth	r2, r2
 8007808:	4619      	mov	r1, r3
 800780a:	f000 f918 	bl	8007a3e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	331c      	adds	r3, #28
 8007828:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f83d 	bl	80078b6 <USBH_GetDescriptor>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d107      	bne.n	8007856 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	461a      	mov	r2, r3
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f987 	bl	8007b60 <USBH_ParseCfgDesc>
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	461a      	mov	r2, r3
 800786c:	460b      	mov	r3, r1
 800786e:	72fb      	strb	r3, [r7, #11]
 8007870:	4613      	mov	r3, r2
 8007872:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007874:	7afb      	ldrb	r3, [r7, #11]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800787c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007884:	893b      	ldrh	r3, [r7, #8]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	460b      	mov	r3, r1
 800788a:	2100      	movs	r1, #0
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f812 	bl	80078b6 <USBH_GetDescriptor>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d107      	bne.n	80078ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078a2:	893a      	ldrh	r2, [r7, #8]
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fb24 	bl	8007ef4 <USBH_ParseStringDesc>
  }

  return status;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	72fb      	strb	r3, [r7, #11]
 80078c4:	4613      	mov	r3, r2
 80078c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	789b      	ldrb	r3, [r3, #2]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d11c      	bne.n	800790a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2206      	movs	r2, #6
 80078e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	893a      	ldrh	r2, [r7, #8]
 80078e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f2:	d104      	bne.n	80078fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f240 4209 	movw	r2, #1033	; 0x409
 80078fa:	829a      	strh	r2, [r3, #20]
 80078fc:	e002      	b.n	8007904 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8b3a      	ldrh	r2, [r7, #24]
 8007908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800790a:	8b3b      	ldrh	r3, [r7, #24]
 800790c:	461a      	mov	r2, r3
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fb3d 	bl	8007f90 <USBH_CtlReq>
 8007916:	4603      	mov	r3, r0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	789b      	ldrb	r3, [r3, #2]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d10f      	bne.n	8007954 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2205      	movs	r2, #5
 800793e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007954:	2200      	movs	r2, #0
 8007956:	2100      	movs	r1, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb19 	bl	8007f90 <USBH_CtlReq>
 800795e:	4603      	mov	r3, r0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	789b      	ldrb	r3, [r3, #2]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10e      	bne.n	800799a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2209      	movs	r2, #9
 8007986:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	887a      	ldrh	r2, [r7, #2]
 800798c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 faf6 	bl	8007f90 <USBH_CtlReq>
 80079a4:	4603      	mov	r3, r0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	789b      	ldrb	r3, [r3, #2]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d10f      	bne.n	80079e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2203      	movs	r2, #3
 80079cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079e2:	2200      	movs	r2, #0
 80079e4:	2100      	movs	r1, #0
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fad2 	bl	8007f90 <USBH_CtlReq>
 80079ec:	4603      	mov	r3, r0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	789b      	ldrb	r3, [r3, #2]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d10f      	bne.n	8007a2a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 faae 	bl	8007f90 <USBH_CtlReq>
 8007a34:	4603      	mov	r3, r0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b085      	sub	sp, #20
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	781a      	ldrb	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	785a      	ldrb	r2, [r3, #1]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	3302      	adds	r3, #2
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	3303      	adds	r3, #3
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4313      	orrs	r3, r2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	791a      	ldrb	r2, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	795a      	ldrb	r2, [r3, #5]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	799a      	ldrb	r2, [r3, #6]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	79da      	ldrb	r2, [r3, #7]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	79db      	ldrb	r3, [r3, #7]
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	dc11      	bgt.n	8007ac4 <USBH_ParseDevDesc+0x86>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	db16      	blt.n	8007ad2 <USBH_ParseDevDesc+0x94>
 8007aa4:	3b08      	subs	r3, #8
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf14      	ite	ne
 8007ab8:	2301      	movne	r3, #1
 8007aba:	2300      	moveq	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d102      	bne.n	8007ac8 <USBH_ParseDevDesc+0x8a>
 8007ac2:	e006      	b.n	8007ad2 <USBH_ParseDevDesc+0x94>
 8007ac4:	2b40      	cmp	r3, #64	; 0x40
 8007ac6:	d104      	bne.n	8007ad2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	79da      	ldrb	r2, [r3, #7]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	71da      	strb	r2, [r3, #7]
      break;
 8007ad0:	e003      	b.n	8007ada <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	71da      	strb	r2, [r3, #7]
      break;
 8007ad8:	bf00      	nop
  }

  if (length > 8U)
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d939      	bls.n	8007b54 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3309      	adds	r3, #9
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	330a      	adds	r3, #10
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	330b      	adds	r3, #11
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	4313      	orrs	r3, r2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	330d      	adds	r3, #13
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	7b9a      	ldrb	r2, [r3, #14]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	7bda      	ldrb	r2, [r3, #15]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	7c1a      	ldrb	r2, [r3, #16]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	7c5a      	ldrb	r2, [r3, #17]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	745a      	strb	r2, [r3, #17]
  }
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08c      	sub	sp, #48	; 0x30
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b74:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	785a      	ldrb	r2, [r3, #1]
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	3303      	adds	r3, #3
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bbc:	bf28      	it	cs
 8007bbe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	791a      	ldrb	r2, [r3, #4]
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	795a      	ldrb	r2, [r3, #5]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	799a      	ldrb	r2, [r3, #6]
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	79da      	ldrb	r2, [r3, #7]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	7a1a      	ldrb	r2, [r3, #8]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	d002      	beq.n	8007bfe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	2209      	movs	r2, #9
 8007bfc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	f240 809d 	bls.w	8007d40 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c06:	2309      	movs	r3, #9
 8007c08:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c0e:	e081      	b.n	8007d14 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c10:	f107 0316 	add.w	r3, r7, #22
 8007c14:	4619      	mov	r1, r3
 8007c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c18:	f000 f99f 	bl	8007f5a <USBH_GetNextDesc>
 8007c1c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d176      	bne.n	8007d14 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d002      	beq.n	8007c34 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	2209      	movs	r2, #9
 8007c32:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c38:	221a      	movs	r2, #26
 8007c3a:	fb02 f303 	mul.w	r3, r2, r3
 8007c3e:	3308      	adds	r3, #8
 8007c40:	6a3a      	ldr	r2, [r7, #32]
 8007c42:	4413      	add	r3, r2
 8007c44:	3302      	adds	r3, #2
 8007c46:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c4a:	69f8      	ldr	r0, [r7, #28]
 8007c4c:	f000 f87e 	bl	8007d4c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c5a:	e043      	b.n	8007ce4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c5c:	f107 0316 	add.w	r3, r7, #22
 8007c60:	4619      	mov	r1, r3
 8007c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c64:	f000 f979 	bl	8007f5a <USBH_GetNextDesc>
 8007c68:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d138      	bne.n	8007ce4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	795b      	ldrb	r3, [r3, #5]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d10f      	bne.n	8007c9a <USBH_ParseCfgDesc+0x13a>
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	799b      	ldrb	r3, [r3, #6]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d10b      	bne.n	8007c9a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	79db      	ldrb	r3, [r3, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10f      	bne.n	8007caa <USBH_ParseCfgDesc+0x14a>
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	d00b      	beq.n	8007caa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	2209      	movs	r2, #9
 8007c96:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c98:	e007      	b.n	8007caa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b07      	cmp	r3, #7
 8007ca0:	d004      	beq.n	8007cac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	e000      	b.n	8007cac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007caa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	00d2      	lsls	r2, r2, #3
 8007cb8:	211a      	movs	r1, #26
 8007cba:	fb01 f303 	mul.w	r3, r1, r3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f86b 	bl	8007daa <USBH_ParseEPDesc>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	791b      	ldrb	r3, [r3, #4]
 8007ce8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d204      	bcs.n	8007cfa <USBH_ParseCfgDesc+0x19a>
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	885a      	ldrh	r2, [r3, #2]
 8007cf4:	8afb      	ldrh	r3, [r7, #22]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d8b0      	bhi.n	8007c5c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	791b      	ldrb	r3, [r3, #4]
 8007cfe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d201      	bcs.n	8007d0a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e01c      	b.n	8007d44 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d805      	bhi.n	8007d28 <USBH_ParseCfgDesc+0x1c8>
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	885a      	ldrh	r2, [r3, #2]
 8007d20:	8afb      	ldrh	r3, [r7, #22]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	f63f af74 	bhi.w	8007c10 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	bf28      	it	cs
 8007d30:	2302      	movcs	r3, #2
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d201      	bcs.n	8007d40 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e001      	b.n	8007d44 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3730      	adds	r7, #48	; 0x30
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781a      	ldrb	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	785a      	ldrb	r2, [r3, #1]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	789a      	ldrb	r2, [r3, #2]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	78da      	ldrb	r2, [r3, #3]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	791a      	ldrb	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	795a      	ldrb	r2, [r3, #5]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	799a      	ldrb	r2, [r3, #6]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	79da      	ldrb	r2, [r3, #7]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	7a1a      	ldrb	r2, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	721a      	strb	r2, [r3, #8]
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b087      	sub	sp, #28
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	781a      	ldrb	r2, [r3, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	785a      	ldrb	r2, [r3, #1]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	789a      	ldrb	r2, [r3, #2]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	78da      	ldrb	r2, [r3, #3]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3305      	adds	r3, #5
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	799a      	ldrb	r2, [r3, #6]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e06:	2303      	movs	r3, #3
 8007e08:	75fb      	strb	r3, [r7, #23]
 8007e0a:	e033      	b.n	8007e74 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	889b      	ldrh	r3, [r3, #4]
 8007e10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e14:	f023 0307 	bic.w	r3, r3, #7
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	889b      	ldrh	r3, [r3, #4]
 8007e22:	b21a      	sxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b299      	uxth	r1, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3305      	adds	r3, #5
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d110      	bne.n	8007e66 <USBH_ParseEPDesc+0xbc>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b299      	uxth	r1, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3305      	adds	r3, #5
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e62:	b21b      	sxth	r3, r3
 8007e64:	e001      	b.n	8007e6a <USBH_ParseEPDesc+0xc0>
 8007e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b21b      	sxth	r3, r3
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d116      	bne.n	8007eac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	78db      	ldrb	r3, [r3, #3]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d005      	beq.n	8007e96 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	78db      	ldrb	r3, [r3, #3]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d127      	bne.n	8007ee6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	799b      	ldrb	r3, [r3, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <USBH_ParseEPDesc+0xfc>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	799b      	ldrb	r3, [r3, #6]
 8007ea2:	2b10      	cmp	r3, #16
 8007ea4:	d91f      	bls.n	8007ee6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	75fb      	strb	r3, [r7, #23]
 8007eaa:	e01c      	b.n	8007ee6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	78db      	ldrb	r3, [r3, #3]
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d10a      	bne.n	8007ece <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	799b      	ldrb	r3, [r3, #6]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <USBH_ParseEPDesc+0x11e>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	799b      	ldrb	r3, [r3, #6]
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d90e      	bls.n	8007ee6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	75fb      	strb	r3, [r7, #23]
 8007ecc:	e00b      	b.n	8007ee6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d105      	bne.n	8007ee6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	799b      	ldrb	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3301      	adds	r3, #1
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d120      	bne.n	8007f4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	1e9a      	subs	r2, r3, #2
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bf28      	it	cs
 8007f18:	4613      	movcs	r3, r2
 8007f1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3302      	adds	r3, #2
 8007f20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f22:	2300      	movs	r3, #0
 8007f24:	82fb      	strh	r3, [r7, #22]
 8007f26:	e00b      	b.n	8007f40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f28:	8afb      	ldrh	r3, [r7, #22]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f3a:	8afb      	ldrh	r3, [r7, #22]
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	82fb      	strh	r3, [r7, #22]
 8007f40:	8afa      	ldrh	r2, [r7, #22]
 8007f42:	8abb      	ldrh	r3, [r7, #20]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d3ef      	bcc.n	8007f28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	881a      	ldrh	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4413      	add	r3, r2
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4413      	add	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f82:	68fb      	ldr	r3, [r7, #12]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	789b      	ldrb	r3, [r3, #2]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d002      	beq.n	8007fb0 <USBH_CtlReq+0x20>
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d00f      	beq.n	8007fce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007fae:	e027      	b.n	8008000 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	e018      	b.n	8008000 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f81c 	bl	800800c <USBH_HandleControl>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <USBH_CtlReq+0x54>
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d106      	bne.n	8007ff2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	761a      	strb	r2, [r3, #24]
      break;
 8007ff0:	e005      	b.n	8007ffe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d102      	bne.n	8007ffe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	709a      	strb	r2, [r3, #2]
      break;
 8007ffe:	bf00      	nop
  }
  return status;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af02      	add	r7, sp, #8
 8008012:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008018:	2300      	movs	r3, #0
 800801a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	7e1b      	ldrb	r3, [r3, #24]
 8008020:	3b01      	subs	r3, #1
 8008022:	2b0a      	cmp	r3, #10
 8008024:	f200 8156 	bhi.w	80082d4 <USBH_HandleControl+0x2c8>
 8008028:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <USBH_HandleControl+0x24>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	0800805d 	.word	0x0800805d
 8008034:	08008077 	.word	0x08008077
 8008038:	080080e1 	.word	0x080080e1
 800803c:	08008107 	.word	0x08008107
 8008040:	0800813f 	.word	0x0800813f
 8008044:	08008169 	.word	0x08008169
 8008048:	080081bb 	.word	0x080081bb
 800804c:	080081dd 	.word	0x080081dd
 8008050:	08008219 	.word	0x08008219
 8008054:	0800823f 	.word	0x0800823f
 8008058:	0800827d 	.word	0x0800827d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f103 0110 	add.w	r1, r3, #16
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	795b      	ldrb	r3, [r3, #5]
 8008066:	461a      	mov	r2, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f943 	bl	80082f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	761a      	strb	r2, [r3, #24]
      break;
 8008074:	e139      	b.n	80082ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	795b      	ldrb	r3, [r3, #5]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fcc5 	bl	8008a0c <USBH_LL_GetURBState>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d11e      	bne.n	80080ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	7c1b      	ldrb	r3, [r3, #16]
 8008090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008094:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8adb      	ldrh	r3, [r3, #22]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800809e:	7b7b      	ldrb	r3, [r7, #13]
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d103      	bne.n	80080ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2203      	movs	r2, #3
 80080a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080aa:	e115      	b.n	80082d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2205      	movs	r2, #5
 80080b0:	761a      	strb	r2, [r3, #24]
      break;
 80080b2:	e111      	b.n	80082d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80080b4:	7b7b      	ldrb	r3, [r7, #13]
 80080b6:	2b80      	cmp	r3, #128	; 0x80
 80080b8:	d103      	bne.n	80080c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2209      	movs	r2, #9
 80080be:	761a      	strb	r2, [r3, #24]
      break;
 80080c0:	e10a      	b.n	80082d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2207      	movs	r2, #7
 80080c6:	761a      	strb	r2, [r3, #24]
      break;
 80080c8:	e106      	b.n	80082d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d003      	beq.n	80080d8 <USBH_HandleControl+0xcc>
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	f040 8100 	bne.w	80082d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	220b      	movs	r2, #11
 80080dc:	761a      	strb	r2, [r3, #24]
      break;
 80080de:	e0fb      	b.n	80082d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6899      	ldr	r1, [r3, #8]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	899a      	ldrh	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f93a 	bl	8008372 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2204      	movs	r2, #4
 8008102:	761a      	strb	r2, [r3, #24]
      break;
 8008104:	e0f1      	b.n	80082ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc7d 	bl	8008a0c <USBH_LL_GetURBState>
 8008112:	4603      	mov	r3, r0
 8008114:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d102      	bne.n	8008122 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2209      	movs	r2, #9
 8008120:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b05      	cmp	r3, #5
 8008126:	d102      	bne.n	800812e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008128:	2303      	movs	r3, #3
 800812a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800812c:	e0d6      	b.n	80082dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b04      	cmp	r3, #4
 8008132:	f040 80d3 	bne.w	80082dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	220b      	movs	r2, #11
 800813a:	761a      	strb	r2, [r3, #24]
      break;
 800813c:	e0ce      	b.n	80082dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6899      	ldr	r1, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	899a      	ldrh	r2, [r3, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	795b      	ldrb	r3, [r3, #5]
 800814a:	2001      	movs	r0, #1
 800814c:	9000      	str	r0, [sp, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8ea 	bl	8008328 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800815a:	b29a      	uxth	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2206      	movs	r2, #6
 8008164:	761a      	strb	r2, [r3, #24]
      break;
 8008166:	e0c0      	b.n	80082ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	795b      	ldrb	r3, [r3, #5]
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fc4c 	bl	8008a0c <USBH_LL_GetURBState>
 8008174:	4603      	mov	r3, r0
 8008176:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d103      	bne.n	8008186 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2207      	movs	r2, #7
 8008182:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008184:	e0ac      	b.n	80082e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b05      	cmp	r3, #5
 800818a:	d105      	bne.n	8008198 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220c      	movs	r2, #12
 8008190:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008192:	2303      	movs	r3, #3
 8008194:	73fb      	strb	r3, [r7, #15]
      break;
 8008196:	e0a3      	b.n	80082e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b02      	cmp	r3, #2
 800819c:	d103      	bne.n	80081a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2205      	movs	r2, #5
 80081a2:	761a      	strb	r2, [r3, #24]
      break;
 80081a4:	e09c      	b.n	80082e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	f040 8099 	bne.w	80082e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	220b      	movs	r2, #11
 80081b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80081b4:	2302      	movs	r3, #2
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	e092      	b.n	80082e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	2100      	movs	r1, #0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8d5 	bl	8008372 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2208      	movs	r2, #8
 80081d8:	761a      	strb	r2, [r3, #24]

      break;
 80081da:	e086      	b.n	80082ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	791b      	ldrb	r3, [r3, #4]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fc12 	bl	8008a0c <USBH_LL_GetURBState>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d105      	bne.n	80081fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	220d      	movs	r2, #13
 80081f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081fc:	e072      	b.n	80082e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d103      	bne.n	800820c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	220b      	movs	r2, #11
 8008208:	761a      	strb	r2, [r3, #24]
      break;
 800820a:	e06b      	b.n	80082e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b05      	cmp	r3, #5
 8008210:	d168      	bne.n	80082e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008212:	2303      	movs	r3, #3
 8008214:	73fb      	strb	r3, [r7, #15]
      break;
 8008216:	e065      	b.n	80082e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	795b      	ldrb	r3, [r3, #5]
 800821c:	2201      	movs	r2, #1
 800821e:	9200      	str	r2, [sp, #0]
 8008220:	2200      	movs	r2, #0
 8008222:	2100      	movs	r1, #0
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f87f 	bl	8008328 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008230:	b29a      	uxth	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220a      	movs	r2, #10
 800823a:	761a      	strb	r2, [r3, #24]
      break;
 800823c:	e055      	b.n	80082ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fbe1 	bl	8008a0c <USBH_LL_GetURBState>
 800824a:	4603      	mov	r3, r0
 800824c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d105      	bne.n	8008260 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	220d      	movs	r2, #13
 800825c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800825e:	e043      	b.n	80082e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d103      	bne.n	800826e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2209      	movs	r2, #9
 800826a:	761a      	strb	r2, [r3, #24]
      break;
 800826c:	e03c      	b.n	80082e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b04      	cmp	r3, #4
 8008272:	d139      	bne.n	80082e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	220b      	movs	r2, #11
 8008278:	761a      	strb	r2, [r3, #24]
      break;
 800827a:	e035      	b.n	80082e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7e5b      	ldrb	r3, [r3, #25]
 8008280:	3301      	adds	r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	765a      	strb	r2, [r3, #25]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7e5b      	ldrb	r3, [r3, #25]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d806      	bhi.n	800829e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800829c:	e025      	b.n	80082ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a4:	2106      	movs	r1, #6
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	795b      	ldrb	r3, [r3, #5]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f90c 	bl	80084d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	791b      	ldrb	r3, [r3, #4]
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f906 	bl	80084d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80082ce:	2302      	movs	r3, #2
 80082d0:	73fb      	strb	r3, [r7, #15]
      break;
 80082d2:	e00a      	b.n	80082ea <USBH_HandleControl+0x2de>

    default:
      break;
 80082d4:	bf00      	nop
 80082d6:	e008      	b.n	80082ea <USBH_HandleControl+0x2de>
      break;
 80082d8:	bf00      	nop
 80082da:	e006      	b.n	80082ea <USBH_HandleControl+0x2de>
      break;
 80082dc:	bf00      	nop
 80082de:	e004      	b.n	80082ea <USBH_HandleControl+0x2de>
      break;
 80082e0:	bf00      	nop
 80082e2:	e002      	b.n	80082ea <USBH_HandleControl+0x2de>
      break;
 80082e4:	bf00      	nop
 80082e6:	e000      	b.n	80082ea <USBH_HandleControl+0x2de>
      break;
 80082e8:	bf00      	nop
  }

  return status;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008302:	79f9      	ldrb	r1, [r7, #7]
 8008304:	2300      	movs	r3, #0
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	2308      	movs	r3, #8
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	2300      	movs	r3, #0
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	2300      	movs	r3, #0
 8008316:	2200      	movs	r2, #0
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fb46 	bl	80089aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af04      	add	r7, sp, #16
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4611      	mov	r1, r2
 8008334:	461a      	mov	r2, r3
 8008336:	460b      	mov	r3, r1
 8008338:	80fb      	strh	r3, [r7, #6]
 800833a:	4613      	mov	r3, r2
 800833c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800834c:	7979      	ldrb	r1, [r7, #5]
 800834e:	7e3b      	ldrb	r3, [r7, #24]
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	9302      	str	r3, [sp, #8]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	2301      	movs	r3, #1
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2300      	movs	r3, #0
 8008360:	2200      	movs	r2, #0
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fb21 	bl	80089aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b088      	sub	sp, #32
 8008376:	af04      	add	r7, sp, #16
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	4611      	mov	r1, r2
 800837e:	461a      	mov	r2, r3
 8008380:	460b      	mov	r3, r1
 8008382:	80fb      	strh	r3, [r7, #6]
 8008384:	4613      	mov	r3, r2
 8008386:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008388:	7979      	ldrb	r1, [r7, #5]
 800838a:	2300      	movs	r3, #0
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	2301      	movs	r3, #1
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	2201      	movs	r2, #1
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fb03 	bl	80089aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083a4:	2300      	movs	r3, #0

}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b088      	sub	sp, #32
 80083b2:	af04      	add	r7, sp, #16
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	4611      	mov	r1, r2
 80083ba:	461a      	mov	r2, r3
 80083bc:	460b      	mov	r3, r1
 80083be:	80fb      	strh	r3, [r7, #6]
 80083c0:	4613      	mov	r3, r2
 80083c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083d2:	7979      	ldrb	r1, [r7, #5]
 80083d4:	7e3b      	ldrb	r3, [r7, #24]
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	9302      	str	r3, [sp, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	2301      	movs	r3, #1
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	2302      	movs	r3, #2
 80083e6:	2200      	movs	r2, #0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fade 	bl	80089aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	80fb      	strh	r3, [r7, #6]
 800840a:	4613      	mov	r3, r2
 800840c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800840e:	7979      	ldrb	r1, [r7, #5]
 8008410:	2300      	movs	r3, #0
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	9302      	str	r3, [sp, #8]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	2301      	movs	r3, #1
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2302      	movs	r3, #2
 8008422:	2201      	movs	r2, #1
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 fac0 	bl	80089aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af04      	add	r7, sp, #16
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	4608      	mov	r0, r1
 800843e:	4611      	mov	r1, r2
 8008440:	461a      	mov	r2, r3
 8008442:	4603      	mov	r3, r0
 8008444:	70fb      	strb	r3, [r7, #3]
 8008446:	460b      	mov	r3, r1
 8008448:	70bb      	strb	r3, [r7, #2]
 800844a:	4613      	mov	r3, r2
 800844c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800844e:	7878      	ldrb	r0, [r7, #1]
 8008450:	78ba      	ldrb	r2, [r7, #2]
 8008452:	78f9      	ldrb	r1, [r7, #3]
 8008454:	8b3b      	ldrh	r3, [r7, #24]
 8008456:	9302      	str	r3, [sp, #8]
 8008458:	7d3b      	ldrb	r3, [r7, #20]
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	7c3b      	ldrb	r3, [r7, #16]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4603      	mov	r3, r0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa53 	bl	800890e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa72 	bl	800896c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f836 	bl	8008510 <USBH_GetFreePipe>
 80084a4:	4603      	mov	r3, r0
 80084a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084a8:	89fb      	ldrh	r3, [r7, #14]
 80084aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00a      	beq.n	80084c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	89fb      	ldrh	r3, [r7, #14]
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	33e0      	adds	r3, #224	; 0xe0
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	440b      	add	r3, r1
 80084c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	b2db      	uxtb	r3, r3
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d80d      	bhi.n	8008502 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	33e0      	adds	r3, #224	; 0xe0
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	33e0      	adds	r3, #224	; 0xe0
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
 8008520:	e00f      	b.n	8008542 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	33e0      	adds	r3, #224	; 0xe0
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	b29b      	uxth	r3, r3
 800853a:	e007      	b.n	800854c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	3301      	adds	r3, #1
 8008540:	73fb      	strb	r3, [r7, #15]
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b0f      	cmp	r3, #15
 8008546:	d9ec      	bls.n	8008522 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008548:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800855c:	2201      	movs	r2, #1
 800855e:	490e      	ldr	r1, [pc, #56]	; (8008598 <MX_USB_HOST_Init+0x40>)
 8008560:	480e      	ldr	r0, [pc, #56]	; (800859c <MX_USB_HOST_Init+0x44>)
 8008562:	f7fe fba7 	bl	8006cb4 <USBH_Init>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800856c:	f7f8 fb92 	bl	8000c94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008570:	490b      	ldr	r1, [pc, #44]	; (80085a0 <MX_USB_HOST_Init+0x48>)
 8008572:	480a      	ldr	r0, [pc, #40]	; (800859c <MX_USB_HOST_Init+0x44>)
 8008574:	f7fe fc2c 	bl	8006dd0 <USBH_RegisterClass>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800857e:	f7f8 fb89 	bl	8000c94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008582:	4806      	ldr	r0, [pc, #24]	; (800859c <MX_USB_HOST_Init+0x44>)
 8008584:	f7fe fcb0 	bl	8006ee8 <USBH_Start>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800858e:	f7f8 fb81 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008592:	bf00      	nop
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	080085b9 	.word	0x080085b9
 800859c:	20000248 	.word	0x20000248
 80085a0:	20000010 	.word	0x20000010

080085a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085a8:	4802      	ldr	r0, [pc, #8]	; (80085b4 <MX_USB_HOST_Process+0x10>)
 80085aa:	f7fe fcad 	bl	8006f08 <USBH_Process>
}
 80085ae:	bf00      	nop
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000248 	.word	0x20000248

080085b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d819      	bhi.n	8008600 <USBH_UserProcess+0x48>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBH_UserProcess+0x1c>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	08008601 	.word	0x08008601
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	08008601 	.word	0x08008601
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	080085e9 	.word	0x080085e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <USBH_UserProcess+0x58>)
 80085ea:	2203      	movs	r2, #3
 80085ec:	701a      	strb	r2, [r3, #0]
  break;
 80085ee:	e008      	b.n	8008602 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <USBH_UserProcess+0x58>)
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
  break;
 80085f6:	e004      	b.n	8008602 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <USBH_UserProcess+0x58>)
 80085fa:	2201      	movs	r2, #1
 80085fc:	701a      	strb	r2, [r3, #0]
  break;
 80085fe:	e000      	b.n	8008602 <USBH_UserProcess+0x4a>

  default:
  break;
 8008600:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000620 	.word	0x20000620

08008614 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	; 0x28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800861c:	f107 0314 	add.w	r3, r7, #20
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	609a      	str	r2, [r3, #8]
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008634:	d147      	bne.n	80086c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a24      	ldr	r2, [pc, #144]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b22      	ldr	r3, [pc, #136]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008658:	2300      	movs	r3, #0
 800865a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865c:	2300      	movs	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	4619      	mov	r1, r3
 8008666:	481b      	ldr	r0, [pc, #108]	; (80086d4 <HAL_HCD_MspInit+0xc0>)
 8008668:	f7f8 ff84 	bl	8001574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800866c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008672:	2302      	movs	r3, #2
 8008674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800867a:	2303      	movs	r3, #3
 800867c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800867e:	230a      	movs	r3, #10
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008682:	f107 0314 	add.w	r3, r7, #20
 8008686:	4619      	mov	r1, r3
 8008688:	4812      	ldr	r0, [pc, #72]	; (80086d4 <HAL_HCD_MspInit+0xc0>)
 800868a:	f7f8 ff73 	bl	8001574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 8008694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008698:	6353      	str	r3, [r2, #52]	; 0x34
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 80086a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a2:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 80086a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086a8:	6453      	str	r3, [r2, #68]	; 0x44
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <HAL_HCD_MspInit+0xbc>)
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086b6:	2200      	movs	r2, #0
 80086b8:	2100      	movs	r1, #0
 80086ba:	2043      	movs	r0, #67	; 0x43
 80086bc:	f7f8 ff15 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086c0:	2043      	movs	r0, #67	; 0x43
 80086c2:	f7f8 ff2e 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086c6:	bf00      	nop
 80086c8:	3728      	adds	r7, #40	; 0x28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	40023800 	.word	0x40023800
 80086d4:	40020000 	.word	0x40020000

080086d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe ffed 	bl	80076c6 <USBH_LL_IncTimer>
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff f825 	bl	8007752 <USBH_LL_Connect>
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff f82e 	bl	8007780 <USBH_LL_Disconnect>
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
 8008738:	4613      	mov	r3, r2
 800873a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe ffdf 	bl	800771a <USBH_LL_PortEnabled>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe ffdf 	bl	8007736 <USBH_LL_PortDisabled>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800878e:	2b01      	cmp	r3, #1
 8008790:	d12a      	bne.n	80087e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008792:	4a18      	ldr	r2, [pc, #96]	; (80087f4 <USBH_LL_Init+0x74>)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a15      	ldr	r2, [pc, #84]	; (80087f4 <USBH_LL_Init+0x74>)
 800879e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <USBH_LL_Init+0x74>)
 80087a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <USBH_LL_Init+0x74>)
 80087ac:	2208      	movs	r2, #8
 80087ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087b0:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <USBH_LL_Init+0x74>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087b6:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <USBH_LL_Init+0x74>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <USBH_LL_Init+0x74>)
 80087be:	2202      	movs	r2, #2
 80087c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087c2:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <USBH_LL_Init+0x74>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80087c8:	480a      	ldr	r0, [pc, #40]	; (80087f4 <USBH_LL_Init+0x74>)
 80087ca:	f7f9 f889 	bl	80018e0 <HAL_HCD_Init>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80087d4:	f7f8 fa5e 	bl	8000c94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80087d8:	4806      	ldr	r0, [pc, #24]	; (80087f4 <USBH_LL_Init+0x74>)
 80087da:	f7f9 fc6c 	bl	80020b6 <HAL_HCD_GetCurrentFrame>
 80087de:	4603      	mov	r3, r0
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7fe ff60 	bl	80076a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000624 	.word	0x20000624

080087f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800880e:	4618      	mov	r0, r3
 8008810:	f7f9 fbdb 	bl	8001fca <HAL_HCD_Start>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f95c 	bl	8008ad8 <USBH_Get_USB_Status>
 8008820:	4603      	mov	r3, r0
 8008822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008824:	7bbb      	ldrb	r3, [r7, #14]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008844:	4618      	mov	r0, r3
 8008846:	f7f9 fbe3 	bl	8002010 <HAL_HCD_Stop>
 800884a:	4603      	mov	r3, r0
 800884c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f941 	bl	8008ad8 <USBH_Get_USB_Status>
 8008856:	4603      	mov	r3, r0
 8008858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885a:	7bbb      	ldrb	r3, [r7, #14]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008876:	4618      	mov	r0, r3
 8008878:	f7f9 fc2b 	bl	80020d2 <HAL_HCD_GetCurrentSpeed>
 800887c:	4603      	mov	r3, r0
 800887e:	2b02      	cmp	r3, #2
 8008880:	d00c      	beq.n	800889c <USBH_LL_GetSpeed+0x38>
 8008882:	2b02      	cmp	r3, #2
 8008884:	d80d      	bhi.n	80088a2 <USBH_LL_GetSpeed+0x3e>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <USBH_LL_GetSpeed+0x2c>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d003      	beq.n	8008896 <USBH_LL_GetSpeed+0x32>
 800888e:	e008      	b.n	80088a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	e008      	b.n	80088a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008896:	2301      	movs	r3, #1
 8008898:	73fb      	strb	r3, [r7, #15]
    break;
 800889a:	e005      	b.n	80088a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800889c:	2302      	movs	r3, #2
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	e002      	b.n	80088a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088a2:	2301      	movs	r3, #1
 80088a4:	73fb      	strb	r3, [r7, #15]
    break;
 80088a6:	bf00      	nop
  }
  return  speed;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7f9 fbbe 	bl	800204a <HAL_HCD_ResetPort>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f8ff 	bl	8008ad8 <USBH_Get_USB_Status>
 80088da:	4603      	mov	r3, r0
 80088dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088de:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f9 fbc5 	bl	800208e <HAL_HCD_HC_GetXferCount>
 8008904:	4603      	mov	r3, r0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800890e:	b590      	push	{r4, r7, lr}
 8008910:	b089      	sub	sp, #36	; 0x24
 8008912:	af04      	add	r7, sp, #16
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	4608      	mov	r0, r1
 8008918:	4611      	mov	r1, r2
 800891a:	461a      	mov	r2, r3
 800891c:	4603      	mov	r3, r0
 800891e:	70fb      	strb	r3, [r7, #3]
 8008920:	460b      	mov	r3, r1
 8008922:	70bb      	strb	r3, [r7, #2]
 8008924:	4613      	mov	r3, r2
 8008926:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008936:	787c      	ldrb	r4, [r7, #1]
 8008938:	78ba      	ldrb	r2, [r7, #2]
 800893a:	78f9      	ldrb	r1, [r7, #3]
 800893c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	f897 3020 	ldrb.w	r3, [r7, #32]
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	4623      	mov	r3, r4
 800894e:	f7f9 f829 	bl	80019a4 <HAL_HCD_HC_Init>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 f8bd 	bl	8008ad8 <USBH_Get_USB_Status>
 800895e:	4603      	mov	r3, r0
 8008960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008962:	7bbb      	ldrb	r3, [r7, #14]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	bd90      	pop	{r4, r7, pc}

0800896c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f7f9 f899 	bl	8001ac2 <HAL_HCD_HC_Halt>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f89e 	bl	8008ad8 <USBH_Get_USB_Status>
 800899c:	4603      	mov	r3, r0
 800899e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089aa:	b590      	push	{r4, r7, lr}
 80089ac:	b089      	sub	sp, #36	; 0x24
 80089ae:	af04      	add	r7, sp, #16
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	461a      	mov	r2, r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	70fb      	strb	r3, [r7, #3]
 80089bc:	460b      	mov	r3, r1
 80089be:	70bb      	strb	r3, [r7, #2]
 80089c0:	4613      	mov	r3, r2
 80089c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80089d2:	787c      	ldrb	r4, [r7, #1]
 80089d4:	78ba      	ldrb	r2, [r7, #2]
 80089d6:	78f9      	ldrb	r1, [r7, #3]
 80089d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4623      	mov	r3, r4
 80089ee:	f7f9 f88b 	bl	8001b08 <HAL_HCD_HC_SubmitRequest>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f86d 	bl	8008ad8 <USBH_Get_USB_Status>
 80089fe:	4603      	mov	r3, r0
 8008a00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd90      	pop	{r4, r7, pc}

08008a0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f9 fb1f 	bl	8002066 <HAL_HCD_HC_GetURBState>
 8008a28:	4603      	mov	r3, r0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d103      	bne.n	8008a50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f870 	bl	8008b30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a50:	20c8      	movs	r0, #200	; 0xc8
 8008a52:	f7f8 fc27 	bl	80012a4 <HAL_Delay>
  return USBH_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	212c      	movs	r1, #44	; 0x2c
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	4413      	add	r3, r2
 8008a84:	333b      	adds	r3, #59	; 0x3b
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d009      	beq.n	8008aa0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	212c      	movs	r1, #44	; 0x2c
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	3354      	adds	r3, #84	; 0x54
 8008a9a:	78ba      	ldrb	r2, [r7, #2]
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	e008      	b.n	8008ab2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	212c      	movs	r1, #44	; 0x2c
 8008aa6:	fb01 f303 	mul.w	r3, r1, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	3355      	adds	r3, #85	; 0x55
 8008aae:	78ba      	ldrb	r2, [r7, #2]
 8008ab0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7f8 fbeb 	bl	80012a4 <HAL_Delay>
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d817      	bhi.n	8008b1c <USBH_Get_USB_Status+0x44>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <USBH_Get_USB_Status+0x1c>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b0b 	.word	0x08008b0b
 8008afc:	08008b11 	.word	0x08008b11
 8008b00:	08008b17 	.word	0x08008b17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
    break;
 8008b08:	e00b      	b.n	8008b22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0e:	e008      	b.n	8008b22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
    break;
 8008b14:	e005      	b.n	8008b22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b16:	2302      	movs	r3, #2
 8008b18:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1a:	e002      	b.n	8008b22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b20:	bf00      	nop
  }
  return usb_status;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e001      	b.n	8008b4e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	461a      	mov	r2, r3
 8008b52:	2101      	movs	r1, #1
 8008b54:	4803      	ldr	r0, [pc, #12]	; (8008b64 <MX_DriverVbusFS+0x34>)
 8008b56:	f7f8 fe91 	bl	800187c <HAL_GPIO_WritePin>
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40020800 	.word	0x40020800

08008b68 <__errno>:
 8008b68:	4b01      	ldr	r3, [pc, #4]	; (8008b70 <__errno+0x8>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000030 	.word	0x20000030

08008b74 <__libc_init_array>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4d0d      	ldr	r5, [pc, #52]	; (8008bac <__libc_init_array+0x38>)
 8008b78:	4c0d      	ldr	r4, [pc, #52]	; (8008bb0 <__libc_init_array+0x3c>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	2600      	movs	r6, #0
 8008b80:	42a6      	cmp	r6, r4
 8008b82:	d109      	bne.n	8008b98 <__libc_init_array+0x24>
 8008b84:	4d0b      	ldr	r5, [pc, #44]	; (8008bb4 <__libc_init_array+0x40>)
 8008b86:	4c0c      	ldr	r4, [pc, #48]	; (8008bb8 <__libc_init_array+0x44>)
 8008b88:	f000 f92e 	bl	8008de8 <_init>
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	2600      	movs	r6, #0
 8008b92:	42a6      	cmp	r6, r4
 8008b94:	d105      	bne.n	8008ba2 <__libc_init_array+0x2e>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9c:	4798      	blx	r3
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7ee      	b.n	8008b80 <__libc_init_array+0xc>
 8008ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba6:	4798      	blx	r3
 8008ba8:	3601      	adds	r6, #1
 8008baa:	e7f2      	b.n	8008b92 <__libc_init_array+0x1e>
 8008bac:	08008e34 	.word	0x08008e34
 8008bb0:	08008e34 	.word	0x08008e34
 8008bb4:	08008e34 	.word	0x08008e34
 8008bb8:	08008e38 	.word	0x08008e38

08008bbc <malloc>:
 8008bbc:	4b02      	ldr	r3, [pc, #8]	; (8008bc8 <malloc+0xc>)
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	f000 b87f 	b.w	8008cc4 <_malloc_r>
 8008bc6:	bf00      	nop
 8008bc8:	20000030 	.word	0x20000030

08008bcc <free>:
 8008bcc:	4b02      	ldr	r3, [pc, #8]	; (8008bd8 <free+0xc>)
 8008bce:	4601      	mov	r1, r0
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f000 b80b 	b.w	8008bec <_free_r>
 8008bd6:	bf00      	nop
 8008bd8:	20000030 	.word	0x20000030

08008bdc <memset>:
 8008bdc:	4402      	add	r2, r0
 8008bde:	4603      	mov	r3, r0
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d100      	bne.n	8008be6 <memset+0xa>
 8008be4:	4770      	bx	lr
 8008be6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bea:	e7f9      	b.n	8008be0 <memset+0x4>

08008bec <_free_r>:
 8008bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	d044      	beq.n	8008c7c <_free_r+0x90>
 8008bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf6:	9001      	str	r0, [sp, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f1a1 0404 	sub.w	r4, r1, #4
 8008bfe:	bfb8      	it	lt
 8008c00:	18e4      	addlt	r4, r4, r3
 8008c02:	f000 f8e3 	bl	8008dcc <__malloc_lock>
 8008c06:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <_free_r+0x94>)
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	6813      	ldr	r3, [r2, #0]
 8008c0c:	b933      	cbnz	r3, 8008c1c <_free_r+0x30>
 8008c0e:	6063      	str	r3, [r4, #4]
 8008c10:	6014      	str	r4, [r2, #0]
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c18:	f000 b8de 	b.w	8008dd8 <__malloc_unlock>
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d908      	bls.n	8008c32 <_free_r+0x46>
 8008c20:	6825      	ldr	r5, [r4, #0]
 8008c22:	1961      	adds	r1, r4, r5
 8008c24:	428b      	cmp	r3, r1
 8008c26:	bf01      	itttt	eq
 8008c28:	6819      	ldreq	r1, [r3, #0]
 8008c2a:	685b      	ldreq	r3, [r3, #4]
 8008c2c:	1949      	addeq	r1, r1, r5
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	e7ed      	b.n	8008c0e <_free_r+0x22>
 8008c32:	461a      	mov	r2, r3
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b10b      	cbz	r3, 8008c3c <_free_r+0x50>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d9fa      	bls.n	8008c32 <_free_r+0x46>
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	1855      	adds	r5, r2, r1
 8008c40:	42a5      	cmp	r5, r4
 8008c42:	d10b      	bne.n	8008c5c <_free_r+0x70>
 8008c44:	6824      	ldr	r4, [r4, #0]
 8008c46:	4421      	add	r1, r4
 8008c48:	1854      	adds	r4, r2, r1
 8008c4a:	42a3      	cmp	r3, r4
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	d1e0      	bne.n	8008c12 <_free_r+0x26>
 8008c50:	681c      	ldr	r4, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	6053      	str	r3, [r2, #4]
 8008c56:	4421      	add	r1, r4
 8008c58:	6011      	str	r1, [r2, #0]
 8008c5a:	e7da      	b.n	8008c12 <_free_r+0x26>
 8008c5c:	d902      	bls.n	8008c64 <_free_r+0x78>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	e7d6      	b.n	8008c12 <_free_r+0x26>
 8008c64:	6825      	ldr	r5, [r4, #0]
 8008c66:	1961      	adds	r1, r4, r5
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	bf04      	itt	eq
 8008c6c:	6819      	ldreq	r1, [r3, #0]
 8008c6e:	685b      	ldreq	r3, [r3, #4]
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	bf04      	itt	eq
 8008c74:	1949      	addeq	r1, r1, r5
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	6054      	str	r4, [r2, #4]
 8008c7a:	e7ca      	b.n	8008c12 <_free_r+0x26>
 8008c7c:	b003      	add	sp, #12
 8008c7e:	bd30      	pop	{r4, r5, pc}
 8008c80:	20000928 	.word	0x20000928

08008c84 <sbrk_aligned>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	4e0e      	ldr	r6, [pc, #56]	; (8008cc0 <sbrk_aligned+0x3c>)
 8008c88:	460c      	mov	r4, r1
 8008c8a:	6831      	ldr	r1, [r6, #0]
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	b911      	cbnz	r1, 8008c96 <sbrk_aligned+0x12>
 8008c90:	f000 f88c 	bl	8008dac <_sbrk_r>
 8008c94:	6030      	str	r0, [r6, #0]
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f000 f887 	bl	8008dac <_sbrk_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d00a      	beq.n	8008cb8 <sbrk_aligned+0x34>
 8008ca2:	1cc4      	adds	r4, r0, #3
 8008ca4:	f024 0403 	bic.w	r4, r4, #3
 8008ca8:	42a0      	cmp	r0, r4
 8008caa:	d007      	beq.n	8008cbc <sbrk_aligned+0x38>
 8008cac:	1a21      	subs	r1, r4, r0
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f000 f87c 	bl	8008dac <_sbrk_r>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d101      	bne.n	8008cbc <sbrk_aligned+0x38>
 8008cb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	2000092c 	.word	0x2000092c

08008cc4 <_malloc_r>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	1ccd      	adds	r5, r1, #3
 8008cca:	f025 0503 	bic.w	r5, r5, #3
 8008cce:	3508      	adds	r5, #8
 8008cd0:	2d0c      	cmp	r5, #12
 8008cd2:	bf38      	it	cc
 8008cd4:	250c      	movcc	r5, #12
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	4607      	mov	r7, r0
 8008cda:	db01      	blt.n	8008ce0 <_malloc_r+0x1c>
 8008cdc:	42a9      	cmp	r1, r5
 8008cde:	d905      	bls.n	8008cec <_malloc_r+0x28>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	2600      	movs	r6, #0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	4e2e      	ldr	r6, [pc, #184]	; (8008da8 <_malloc_r+0xe4>)
 8008cee:	f000 f86d 	bl	8008dcc <__malloc_lock>
 8008cf2:	6833      	ldr	r3, [r6, #0]
 8008cf4:	461c      	mov	r4, r3
 8008cf6:	bb34      	cbnz	r4, 8008d46 <_malloc_r+0x82>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7ff ffc2 	bl	8008c84 <sbrk_aligned>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	4604      	mov	r4, r0
 8008d04:	d14d      	bne.n	8008da2 <_malloc_r+0xde>
 8008d06:	6834      	ldr	r4, [r6, #0]
 8008d08:	4626      	mov	r6, r4
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	d140      	bne.n	8008d90 <_malloc_r+0xcc>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	4631      	mov	r1, r6
 8008d12:	4638      	mov	r0, r7
 8008d14:	eb04 0803 	add.w	r8, r4, r3
 8008d18:	f000 f848 	bl	8008dac <_sbrk_r>
 8008d1c:	4580      	cmp	r8, r0
 8008d1e:	d13a      	bne.n	8008d96 <_malloc_r+0xd2>
 8008d20:	6821      	ldr	r1, [r4, #0]
 8008d22:	3503      	adds	r5, #3
 8008d24:	1a6d      	subs	r5, r5, r1
 8008d26:	f025 0503 	bic.w	r5, r5, #3
 8008d2a:	3508      	adds	r5, #8
 8008d2c:	2d0c      	cmp	r5, #12
 8008d2e:	bf38      	it	cc
 8008d30:	250c      	movcc	r5, #12
 8008d32:	4629      	mov	r1, r5
 8008d34:	4638      	mov	r0, r7
 8008d36:	f7ff ffa5 	bl	8008c84 <sbrk_aligned>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	d02b      	beq.n	8008d96 <_malloc_r+0xd2>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	442b      	add	r3, r5
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	e00e      	b.n	8008d64 <_malloc_r+0xa0>
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	1b52      	subs	r2, r2, r5
 8008d4a:	d41e      	bmi.n	8008d8a <_malloc_r+0xc6>
 8008d4c:	2a0b      	cmp	r2, #11
 8008d4e:	d916      	bls.n	8008d7e <_malloc_r+0xba>
 8008d50:	1961      	adds	r1, r4, r5
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	6025      	str	r5, [r4, #0]
 8008d56:	bf18      	it	ne
 8008d58:	6059      	strne	r1, [r3, #4]
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	bf08      	it	eq
 8008d5e:	6031      	streq	r1, [r6, #0]
 8008d60:	5162      	str	r2, [r4, r5]
 8008d62:	604b      	str	r3, [r1, #4]
 8008d64:	4638      	mov	r0, r7
 8008d66:	f104 060b 	add.w	r6, r4, #11
 8008d6a:	f000 f835 	bl	8008dd8 <__malloc_unlock>
 8008d6e:	f026 0607 	bic.w	r6, r6, #7
 8008d72:	1d23      	adds	r3, r4, #4
 8008d74:	1af2      	subs	r2, r6, r3
 8008d76:	d0b6      	beq.n	8008ce6 <_malloc_r+0x22>
 8008d78:	1b9b      	subs	r3, r3, r6
 8008d7a:	50a3      	str	r3, [r4, r2]
 8008d7c:	e7b3      	b.n	8008ce6 <_malloc_r+0x22>
 8008d7e:	6862      	ldr	r2, [r4, #4]
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	bf0c      	ite	eq
 8008d84:	6032      	streq	r2, [r6, #0]
 8008d86:	605a      	strne	r2, [r3, #4]
 8008d88:	e7ec      	b.n	8008d64 <_malloc_r+0xa0>
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	6864      	ldr	r4, [r4, #4]
 8008d8e:	e7b2      	b.n	8008cf6 <_malloc_r+0x32>
 8008d90:	4634      	mov	r4, r6
 8008d92:	6876      	ldr	r6, [r6, #4]
 8008d94:	e7b9      	b.n	8008d0a <_malloc_r+0x46>
 8008d96:	230c      	movs	r3, #12
 8008d98:	603b      	str	r3, [r7, #0]
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f000 f81c 	bl	8008dd8 <__malloc_unlock>
 8008da0:	e7a1      	b.n	8008ce6 <_malloc_r+0x22>
 8008da2:	6025      	str	r5, [r4, #0]
 8008da4:	e7de      	b.n	8008d64 <_malloc_r+0xa0>
 8008da6:	bf00      	nop
 8008da8:	20000928 	.word	0x20000928

08008dac <_sbrk_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d06      	ldr	r5, [pc, #24]	; (8008dc8 <_sbrk_r+0x1c>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	f7f8 f990 	bl	80010dc <_sbrk>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_sbrk_r+0x1a>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_sbrk_r+0x1a>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	20000930 	.word	0x20000930

08008dcc <__malloc_lock>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__malloc_lock+0x8>)
 8008dce:	f000 b809 	b.w	8008de4 <__retarget_lock_acquire_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	20000934 	.word	0x20000934

08008dd8 <__malloc_unlock>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__malloc_unlock+0x8>)
 8008dda:	f000 b804 	b.w	8008de6 <__retarget_lock_release_recursive>
 8008dde:	bf00      	nop
 8008de0:	20000934 	.word	0x20000934

08008de4 <__retarget_lock_acquire_recursive>:
 8008de4:	4770      	bx	lr

08008de6 <__retarget_lock_release_recursive>:
 8008de6:	4770      	bx	lr

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
